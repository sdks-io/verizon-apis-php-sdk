<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib;

use Core\ClientBuilder;
use Core\Request\Parameters\HeaderParam;
use Core\Utils\CoreHelper;
use Unirest\Configuration;
use Unirest\HttpClient;
use VerizonLib\Controllers\AccountDevicesController;
use VerizonLib\Controllers\AccountRequestsController;
use VerizonLib\Controllers\AccountsController;
use VerizonLib\Controllers\AccountSubscriptionsController;
use VerizonLib\Controllers\AnomalySettingsController;
use VerizonLib\Controllers\AnomalyTriggersController;
use VerizonLib\Controllers\BillingController;
use VerizonLib\Controllers\CampaignsV2Controller;
use VerizonLib\Controllers\CampaignsV3Controller;
use VerizonLib\Controllers\ClientLoggingController;
use VerizonLib\Controllers\CloudConnectorDevicesController;
use VerizonLib\Controllers\CloudConnectorSubscriptionsController;
use VerizonLib\Controllers\ConfigurationFilesController;
use VerizonLib\Controllers\ConnectivityCallbacksController;
use VerizonLib\Controllers\CSPProfilesController;
use VerizonLib\Controllers\DeviceGroupsController;
use VerizonLib\Controllers\DeviceLocationCallbacksController;
use VerizonLib\Controllers\DeviceManagementController;
use VerizonLib\Controllers\DeviceMonitoringController;
use VerizonLib\Controllers\DeviceProfileManagementController;
use VerizonLib\Controllers\DeviceReportsController;
use VerizonLib\Controllers\DeviceServiceManagementController;
use VerizonLib\Controllers\DevicesLocationsController;
use VerizonLib\Controllers\DevicesLocationSubscriptionsController;
use VerizonLib\Controllers\DiagnosticsCallbacksController;
use VerizonLib\Controllers\DiagnosticsFactoryResetController;
use VerizonLib\Controllers\DiagnosticsHistoryController;
use VerizonLib\Controllers\DiagnosticsObservationsController;
use VerizonLib\Controllers\DiagnosticsSettingsController;
use VerizonLib\Controllers\DiagnosticsSubscriptionsController;
use VerizonLib\Controllers\ExclusionsController;
use VerizonLib\Controllers\FirmwareV1Controller;
use VerizonLib\Controllers\FirmwareV3Controller;
use VerizonLib\Controllers\HyperPreciseLocationCallbacksController;
use VerizonLib\Controllers\M5gEdgePlatformsController;
use VerizonLib\Controllers\MECSitesController;
use VerizonLib\Controllers\OauthAuthorizationController;
use VerizonLib\Controllers\PerformanceMetricsController;
use VerizonLib\Controllers\RepositoriesController;
use VerizonLib\Controllers\ServerLoggingController;
use VerizonLib\Controllers\ServiceClaimsController;
use VerizonLib\Controllers\ServiceEndpointsController;
use VerizonLib\Controllers\ServiceInstanceOperationsController;
use VerizonLib\Controllers\ServiceInstancesController;
use VerizonLib\Controllers\ServiceLaunchProfilesController;
use VerizonLib\Controllers\ServiceLaunchRequestsController;
use VerizonLib\Controllers\ServiceMetadataController;
use VerizonLib\Controllers\ServiceOnboardingController;
use VerizonLib\Controllers\ServicePlansController;
use VerizonLib\Controllers\ServiceProfilesController;
use VerizonLib\Controllers\SessionManagementController;
use VerizonLib\Controllers\SIMSecureForIoTLicensesController;
use VerizonLib\Controllers\SMSController;
use VerizonLib\Controllers\SoftwareManagementCallbacksV1Controller;
use VerizonLib\Controllers\SoftwareManagementCallbacksV2Controller;
use VerizonLib\Controllers\SoftwareManagementCallbacksV3Controller;
use VerizonLib\Controllers\SoftwareManagementLicensesV1Controller;
use VerizonLib\Controllers\SoftwareManagementLicensesV2Controller;
use VerizonLib\Controllers\SoftwareManagementLicensesV3Controller;
use VerizonLib\Controllers\SoftwareManagementReportsV1Controller;
use VerizonLib\Controllers\SoftwareManagementReportsV2Controller;
use VerizonLib\Controllers\SoftwareManagementReportsV3Controller;
use VerizonLib\Controllers\SoftwareManagementSubscriptionsV1Controller;
use VerizonLib\Controllers\SoftwareManagementSubscriptionsV2Controller;
use VerizonLib\Controllers\SoftwareManagementSubscriptionsV3Controller;
use VerizonLib\Controllers\TargetsController;
use VerizonLib\Controllers\UICCDeviceProfileManagementController;
use VerizonLib\Controllers\UsageTriggerManagementController;
use VerizonLib\Utils\CompatibilityConverter;

class VerizonClient implements ConfigurationInterface
{
    private $m5gEdgePlatforms;

    private $serviceEndpoints;

    private $serviceProfiles;

    private $deviceManagement;

    private $accounts;

    private $deviceGroups;

    private $sMS;

    private $sessionManagement;

    private $connectivityCallbacks;

    private $accountRequests;

    private $servicePlans;

    private $deviceProfileManagement;

    private $deviceMonitoring;

    private $uICCDeviceProfileManagement;

    private $devicesLocations;

    private $exclusions;

    private $devicesLocationSubscriptions;

    private $deviceLocationCallbacks;

    private $usageTriggerManagement;

    private $billing;

    private $softwareManagementSubscriptionsV1;

    private $softwareManagementLicensesV1;

    private $firmwareV1;

    private $softwareManagementCallbacksV1;

    private $softwareManagementReportsV1;

    private $softwareManagementSubscriptionsV2;

    private $softwareManagementLicensesV2;

    private $campaignsV2;

    private $softwareManagementCallbacksV2;

    private $softwareManagementReportsV2;

    private $clientLogging;

    private $serverLogging;

    private $configurationFiles;

    private $softwareManagementSubscriptionsV3;

    private $softwareManagementLicensesV3;

    private $campaignsV3;

    private $softwareManagementReportsV3;

    private $firmwareV3;

    private $accountDevices;

    private $softwareManagementCallbacksV3;

    private $sIMSecureForIoTLicenses;

    private $accountSubscriptions;

    private $performanceMetrics;

    private $diagnosticsSubscriptions;

    private $diagnosticsObservations;

    private $diagnosticsHistory;

    private $diagnosticsSettings;

    private $diagnosticsCallbacks;

    private $diagnosticsFactoryReset;

    private $targets;

    private $cloudConnectorSubscriptions;

    private $cloudConnectorDevices;

    private $deviceServiceManagement;

    private $deviceReports;

    private $hyperPreciseLocationCallbacks;

    private $anomalySettings;

    private $anomalyTriggers;

    private $mECSites;

    private $serviceLaunchProfiles;

    private $serviceLaunchRequests;

    private $serviceInstances;

    private $serviceInstanceOperations;

    private $serviceOnboarding;

    private $serviceMetadata;

    private $repositories;

    private $cSPProfiles;

    private $serviceClaims;

    private $oauthAuthorization;

    private $clientCredentialsAuthManager;

    private $config;

    private $client;

    /**
     * @see VerizonClientBuilder::init()
     * @see VerizonClientBuilder::build()
     *
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        $this->config = array_merge(ConfigurationDefaults::_ALL, CoreHelper::clone($config));
        $this->clientCredentialsAuthManager = new ClientCredentialsAuthManager(
            $this->config['oauthClientId'] ?? ConfigurationDefaults::O_AUTH_CLIENT_ID,
            $this->config['oauthClientSecret'] ?? ConfigurationDefaults::O_AUTH_CLIENT_SECRET,
            $this->config['oauthToken'],
            $this->config['oauthScopes']
        );
        $this->validateConfig();
        $this->client = ClientBuilder::init(new HttpClient(Configuration::init($this)))
            ->converter(new CompatibilityConverter())
            ->jsonHelper(ApiHelper::getJsonHelper())
            ->apiCallback($this->config['httpCallback'] ?? null)
            ->userAgent('APIMATIC 3.0')
            ->globalConfig($this->getGlobalConfiguration())
            ->serverUrls(self::ENVIRONMENT_MAP[$this->getEnvironment()], Server::EDGE_DISCOVERY)
            ->authManagers(['global' => $this->clientCredentialsAuthManager])
            ->build();
        $this->clientCredentialsAuthManager->setClient($this->client);
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return VerizonClientBuilder VerizonClientBuilder instance
     */
    public function toBuilder(): VerizonClientBuilder
    {
        return VerizonClientBuilder::init()
            ->timeout($this->getTimeout())
            ->enableRetries($this->shouldEnableRetries())
            ->numberOfRetries($this->getNumberOfRetries())
            ->retryInterval($this->getRetryInterval())
            ->backOffFactor($this->getBackOffFactor())
            ->maximumRetryWaitTime($this->getMaximumRetryWaitTime())
            ->retryOnTimeout($this->shouldRetryOnTimeout())
            ->httpStatusCodesToRetry($this->getHttpStatusCodesToRetry())
            ->httpMethodsToRetry($this->getHttpMethodsToRetry())
            ->vZM2mToken($this->getVZM2mToken())
            ->environment($this->getEnvironment())
            ->oauthClientId($this->clientCredentialsAuthManager->getOauthClientId())
            ->oauthClientSecret($this->clientCredentialsAuthManager->getOauthClientSecret())
            ->oauthToken($this->clientCredentialsAuthManager->getOauthToken())
            ->oauthScopes($this->clientCredentialsAuthManager->getOauthScopes())
            ->httpCallback($this->config['httpCallback'] ?? null);
    }

    public function getTimeout(): int
    {
        return $this->config['timeout'] ?? ConfigurationDefaults::TIMEOUT;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->config['enableRetries'] ?? ConfigurationDefaults::ENABLE_RETRIES;
    }

    public function getNumberOfRetries(): int
    {
        return $this->config['numberOfRetries'] ?? ConfigurationDefaults::NUMBER_OF_RETRIES;
    }

    public function getRetryInterval(): float
    {
        return $this->config['retryInterval'] ?? ConfigurationDefaults::RETRY_INTERVAL;
    }

    public function getBackOffFactor(): float
    {
        return $this->config['backOffFactor'] ?? ConfigurationDefaults::BACK_OFF_FACTOR;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->config['maximumRetryWaitTime'] ?? ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->config['retryOnTimeout'] ?? ConfigurationDefaults::RETRY_ON_TIMEOUT;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->config['httpStatusCodesToRetry'] ?? ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->config['httpMethodsToRetry'] ?? ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    }

    public function getVZM2mToken(): string
    {
        return $this->config['vZM2mToken'] ?? ConfigurationDefaults::VZ_M2_M_TOKEN;
    }

    public function getEnvironment(): string
    {
        return $this->config['environment'] ?? ConfigurationDefaults::ENVIRONMENT;
    }

    public function getClientCredentialsAuth(): ?ClientCredentialsAuth
    {
        return $this->clientCredentialsAuthManager;
    }

    /**
     * Get the client configuration as an associative array
     *
     * @see VerizonClientBuilder::getConfiguration()
     */
    public function getConfiguration(): array
    {
        return $this->toBuilder()->getConfiguration();
    }

    /**
     * Clone this client and override given configuration options
     *
     * @see VerizonClientBuilder::build()
     */
    public function withConfiguration(array $config): self
    {
        return new self(array_merge($this->config, $config));
    }

    /**
     * Validate required configuration variables
     */
    private function validateConfig(): void
    {
        VerizonClientBuilder::init()->oauthScopes($this->clientCredentialsAuthManager->getOauthScopes());
    }

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::EDGE_DISCOVERY): string
    {
        return $this->client->getGlobalRequest($server)->getQueryUrl();
    }

    /**
     * Returns 5g Edge Platforms Controller
     */
    public function getM5gEdgePlatformsController(): M5gEdgePlatformsController
    {
        if ($this->m5gEdgePlatforms == null) {
            $this->m5gEdgePlatforms = new M5gEdgePlatformsController($this->client);
        }
        return $this->m5gEdgePlatforms;
    }

    /**
     * Returns Service Endpoints Controller
     */
    public function getServiceEndpointsController(): ServiceEndpointsController
    {
        if ($this->serviceEndpoints == null) {
            $this->serviceEndpoints = new ServiceEndpointsController($this->client);
        }
        return $this->serviceEndpoints;
    }

    /**
     * Returns Service Profiles Controller
     */
    public function getServiceProfilesController(): ServiceProfilesController
    {
        if ($this->serviceProfiles == null) {
            $this->serviceProfiles = new ServiceProfilesController($this->client);
        }
        return $this->serviceProfiles;
    }

    /**
     * Returns Device Management Controller
     */
    public function getDeviceManagementController(): DeviceManagementController
    {
        if ($this->deviceManagement == null) {
            $this->deviceManagement = new DeviceManagementController($this->client);
        }
        return $this->deviceManagement;
    }

    /**
     * Returns Accounts Controller
     */
    public function getAccountsController(): AccountsController
    {
        if ($this->accounts == null) {
            $this->accounts = new AccountsController($this->client);
        }
        return $this->accounts;
    }

    /**
     * Returns Device Groups Controller
     */
    public function getDeviceGroupsController(): DeviceGroupsController
    {
        if ($this->deviceGroups == null) {
            $this->deviceGroups = new DeviceGroupsController($this->client);
        }
        return $this->deviceGroups;
    }

    /**
     * Returns SMS Controller
     */
    public function getSMSController(): SMSController
    {
        if ($this->sMS == null) {
            $this->sMS = new SMSController($this->client);
        }
        return $this->sMS;
    }

    /**
     * Returns Session Management Controller
     */
    public function getSessionManagementController(): SessionManagementController
    {
        if ($this->sessionManagement == null) {
            $this->sessionManagement = new SessionManagementController($this->client);
        }
        return $this->sessionManagement;
    }

    /**
     * Returns Connectivity Callbacks Controller
     */
    public function getConnectivityCallbacksController(): ConnectivityCallbacksController
    {
        if ($this->connectivityCallbacks == null) {
            $this->connectivityCallbacks = new ConnectivityCallbacksController($this->client);
        }
        return $this->connectivityCallbacks;
    }

    /**
     * Returns Account Requests Controller
     */
    public function getAccountRequestsController(): AccountRequestsController
    {
        if ($this->accountRequests == null) {
            $this->accountRequests = new AccountRequestsController($this->client);
        }
        return $this->accountRequests;
    }

    /**
     * Returns Service Plans Controller
     */
    public function getServicePlansController(): ServicePlansController
    {
        if ($this->servicePlans == null) {
            $this->servicePlans = new ServicePlansController($this->client);
        }
        return $this->servicePlans;
    }

    /**
     * Returns Device Profile Management Controller
     */
    public function getDeviceProfileManagementController(): DeviceProfileManagementController
    {
        if ($this->deviceProfileManagement == null) {
            $this->deviceProfileManagement = new DeviceProfileManagementController($this->client);
        }
        return $this->deviceProfileManagement;
    }

    /**
     * Returns Device Monitoring Controller
     */
    public function getDeviceMonitoringController(): DeviceMonitoringController
    {
        if ($this->deviceMonitoring == null) {
            $this->deviceMonitoring = new DeviceMonitoringController($this->client);
        }
        return $this->deviceMonitoring;
    }

    /**
     * Returns UICC Device Profile Management Controller
     */
    public function getUICCDeviceProfileManagementController(): UICCDeviceProfileManagementController
    {
        if ($this->uICCDeviceProfileManagement == null) {
            $this->uICCDeviceProfileManagement = new UICCDeviceProfileManagementController($this->client);
        }
        return $this->uICCDeviceProfileManagement;
    }

    /**
     * Returns Devices Locations Controller
     */
    public function getDevicesLocationsController(): DevicesLocationsController
    {
        if ($this->devicesLocations == null) {
            $this->devicesLocations = new DevicesLocationsController($this->client);
        }
        return $this->devicesLocations;
    }

    /**
     * Returns Exclusions Controller
     */
    public function getExclusionsController(): ExclusionsController
    {
        if ($this->exclusions == null) {
            $this->exclusions = new ExclusionsController($this->client);
        }
        return $this->exclusions;
    }

    /**
     * Returns Devices Location Subscriptions Controller
     */
    public function getDevicesLocationSubscriptionsController(): DevicesLocationSubscriptionsController
    {
        if ($this->devicesLocationSubscriptions == null) {
            $this->devicesLocationSubscriptions = new DevicesLocationSubscriptionsController($this->client);
        }
        return $this->devicesLocationSubscriptions;
    }

    /**
     * Returns Device Location Callbacks Controller
     */
    public function getDeviceLocationCallbacksController(): DeviceLocationCallbacksController
    {
        if ($this->deviceLocationCallbacks == null) {
            $this->deviceLocationCallbacks = new DeviceLocationCallbacksController($this->client);
        }
        return $this->deviceLocationCallbacks;
    }

    /**
     * Returns Usage Trigger Management Controller
     */
    public function getUsageTriggerManagementController(): UsageTriggerManagementController
    {
        if ($this->usageTriggerManagement == null) {
            $this->usageTriggerManagement = new UsageTriggerManagementController($this->client);
        }
        return $this->usageTriggerManagement;
    }

    /**
     * Returns Billing Controller
     */
    public function getBillingController(): BillingController
    {
        if ($this->billing == null) {
            $this->billing = new BillingController($this->client);
        }
        return $this->billing;
    }

    /**
     * Returns Software Management Subscriptions V1 Controller
     */
    public function getSoftwareManagementSubscriptionsV1Controller(): SoftwareManagementSubscriptionsV1Controller
    {
        if ($this->softwareManagementSubscriptionsV1 == null) {
            $this->softwareManagementSubscriptionsV1 = new SoftwareManagementSubscriptionsV1Controller(
                $this->client
            );
        }
        return $this->softwareManagementSubscriptionsV1;
    }

    /**
     * Returns Software Management Licenses V1 Controller
     */
    public function getSoftwareManagementLicensesV1Controller(): SoftwareManagementLicensesV1Controller
    {
        if ($this->softwareManagementLicensesV1 == null) {
            $this->softwareManagementLicensesV1 = new SoftwareManagementLicensesV1Controller($this->client);
        }
        return $this->softwareManagementLicensesV1;
    }

    /**
     * Returns Firmware V1 Controller
     */
    public function getFirmwareV1Controller(): FirmwareV1Controller
    {
        if ($this->firmwareV1 == null) {
            $this->firmwareV1 = new FirmwareV1Controller($this->client);
        }
        return $this->firmwareV1;
    }

    /**
     * Returns Software Management Callbacks V1 Controller
     */
    public function getSoftwareManagementCallbacksV1Controller(): SoftwareManagementCallbacksV1Controller
    {
        if ($this->softwareManagementCallbacksV1 == null) {
            $this->softwareManagementCallbacksV1 = new SoftwareManagementCallbacksV1Controller($this->client);
        }
        return $this->softwareManagementCallbacksV1;
    }

    /**
     * Returns Software Management Reports V1 Controller
     */
    public function getSoftwareManagementReportsV1Controller(): SoftwareManagementReportsV1Controller
    {
        if ($this->softwareManagementReportsV1 == null) {
            $this->softwareManagementReportsV1 = new SoftwareManagementReportsV1Controller($this->client);
        }
        return $this->softwareManagementReportsV1;
    }

    /**
     * Returns Software Management Subscriptions V2 Controller
     */
    public function getSoftwareManagementSubscriptionsV2Controller(): SoftwareManagementSubscriptionsV2Controller
    {
        if ($this->softwareManagementSubscriptionsV2 == null) {
            $this->softwareManagementSubscriptionsV2 = new SoftwareManagementSubscriptionsV2Controller(
                $this->client
            );
        }
        return $this->softwareManagementSubscriptionsV2;
    }

    /**
     * Returns Software Management Licenses V2 Controller
     */
    public function getSoftwareManagementLicensesV2Controller(): SoftwareManagementLicensesV2Controller
    {
        if ($this->softwareManagementLicensesV2 == null) {
            $this->softwareManagementLicensesV2 = new SoftwareManagementLicensesV2Controller($this->client);
        }
        return $this->softwareManagementLicensesV2;
    }

    /**
     * Returns Campaigns V2 Controller
     */
    public function getCampaignsV2Controller(): CampaignsV2Controller
    {
        if ($this->campaignsV2 == null) {
            $this->campaignsV2 = new CampaignsV2Controller($this->client);
        }
        return $this->campaignsV2;
    }

    /**
     * Returns Software Management Callbacks V2 Controller
     */
    public function getSoftwareManagementCallbacksV2Controller(): SoftwareManagementCallbacksV2Controller
    {
        if ($this->softwareManagementCallbacksV2 == null) {
            $this->softwareManagementCallbacksV2 = new SoftwareManagementCallbacksV2Controller($this->client);
        }
        return $this->softwareManagementCallbacksV2;
    }

    /**
     * Returns Software Management Reports V2 Controller
     */
    public function getSoftwareManagementReportsV2Controller(): SoftwareManagementReportsV2Controller
    {
        if ($this->softwareManagementReportsV2 == null) {
            $this->softwareManagementReportsV2 = new SoftwareManagementReportsV2Controller($this->client);
        }
        return $this->softwareManagementReportsV2;
    }

    /**
     * Returns Client Logging Controller
     */
    public function getClientLoggingController(): ClientLoggingController
    {
        if ($this->clientLogging == null) {
            $this->clientLogging = new ClientLoggingController($this->client);
        }
        return $this->clientLogging;
    }

    /**
     * Returns Server Logging Controller
     */
    public function getServerLoggingController(): ServerLoggingController
    {
        if ($this->serverLogging == null) {
            $this->serverLogging = new ServerLoggingController($this->client);
        }
        return $this->serverLogging;
    }

    /**
     * Returns Configuration Files Controller
     */
    public function getConfigurationFilesController(): ConfigurationFilesController
    {
        if ($this->configurationFiles == null) {
            $this->configurationFiles = new ConfigurationFilesController($this->client);
        }
        return $this->configurationFiles;
    }

    /**
     * Returns Software Management Subscriptions V3 Controller
     */
    public function getSoftwareManagementSubscriptionsV3Controller(): SoftwareManagementSubscriptionsV3Controller
    {
        if ($this->softwareManagementSubscriptionsV3 == null) {
            $this->softwareManagementSubscriptionsV3 = new SoftwareManagementSubscriptionsV3Controller(
                $this->client
            );
        }
        return $this->softwareManagementSubscriptionsV3;
    }

    /**
     * Returns Software Management Licenses V3 Controller
     */
    public function getSoftwareManagementLicensesV3Controller(): SoftwareManagementLicensesV3Controller
    {
        if ($this->softwareManagementLicensesV3 == null) {
            $this->softwareManagementLicensesV3 = new SoftwareManagementLicensesV3Controller($this->client);
        }
        return $this->softwareManagementLicensesV3;
    }

    /**
     * Returns Campaigns V3 Controller
     */
    public function getCampaignsV3Controller(): CampaignsV3Controller
    {
        if ($this->campaignsV3 == null) {
            $this->campaignsV3 = new CampaignsV3Controller($this->client);
        }
        return $this->campaignsV3;
    }

    /**
     * Returns Software Management Reports V3 Controller
     */
    public function getSoftwareManagementReportsV3Controller(): SoftwareManagementReportsV3Controller
    {
        if ($this->softwareManagementReportsV3 == null) {
            $this->softwareManagementReportsV3 = new SoftwareManagementReportsV3Controller($this->client);
        }
        return $this->softwareManagementReportsV3;
    }

    /**
     * Returns Firmware V3 Controller
     */
    public function getFirmwareV3Controller(): FirmwareV3Controller
    {
        if ($this->firmwareV3 == null) {
            $this->firmwareV3 = new FirmwareV3Controller($this->client);
        }
        return $this->firmwareV3;
    }

    /**
     * Returns Account Devices Controller
     */
    public function getAccountDevicesController(): AccountDevicesController
    {
        if ($this->accountDevices == null) {
            $this->accountDevices = new AccountDevicesController($this->client);
        }
        return $this->accountDevices;
    }

    /**
     * Returns Software Management Callbacks V3 Controller
     */
    public function getSoftwareManagementCallbacksV3Controller(): SoftwareManagementCallbacksV3Controller
    {
        if ($this->softwareManagementCallbacksV3 == null) {
            $this->softwareManagementCallbacksV3 = new SoftwareManagementCallbacksV3Controller($this->client);
        }
        return $this->softwareManagementCallbacksV3;
    }

    /**
     * Returns SIM Secure for Io T Licenses Controller
     */
    public function getSIMSecureForIoTLicensesController(): SIMSecureForIoTLicensesController
    {
        if ($this->sIMSecureForIoTLicenses == null) {
            $this->sIMSecureForIoTLicenses = new SIMSecureForIoTLicensesController($this->client);
        }
        return $this->sIMSecureForIoTLicenses;
    }

    /**
     * Returns Account Subscriptions Controller
     */
    public function getAccountSubscriptionsController(): AccountSubscriptionsController
    {
        if ($this->accountSubscriptions == null) {
            $this->accountSubscriptions = new AccountSubscriptionsController($this->client);
        }
        return $this->accountSubscriptions;
    }

    /**
     * Returns Performance Metrics Controller
     */
    public function getPerformanceMetricsController(): PerformanceMetricsController
    {
        if ($this->performanceMetrics == null) {
            $this->performanceMetrics = new PerformanceMetricsController($this->client);
        }
        return $this->performanceMetrics;
    }

    /**
     * Returns Diagnostics Subscriptions Controller
     */
    public function getDiagnosticsSubscriptionsController(): DiagnosticsSubscriptionsController
    {
        if ($this->diagnosticsSubscriptions == null) {
            $this->diagnosticsSubscriptions = new DiagnosticsSubscriptionsController($this->client);
        }
        return $this->diagnosticsSubscriptions;
    }

    /**
     * Returns Diagnostics Observations Controller
     */
    public function getDiagnosticsObservationsController(): DiagnosticsObservationsController
    {
        if ($this->diagnosticsObservations == null) {
            $this->diagnosticsObservations = new DiagnosticsObservationsController($this->client);
        }
        return $this->diagnosticsObservations;
    }

    /**
     * Returns Diagnostics History Controller
     */
    public function getDiagnosticsHistoryController(): DiagnosticsHistoryController
    {
        if ($this->diagnosticsHistory == null) {
            $this->diagnosticsHistory = new DiagnosticsHistoryController($this->client);
        }
        return $this->diagnosticsHistory;
    }

    /**
     * Returns Diagnostics Settings Controller
     */
    public function getDiagnosticsSettingsController(): DiagnosticsSettingsController
    {
        if ($this->diagnosticsSettings == null) {
            $this->diagnosticsSettings = new DiagnosticsSettingsController($this->client);
        }
        return $this->diagnosticsSettings;
    }

    /**
     * Returns Diagnostics Callbacks Controller
     */
    public function getDiagnosticsCallbacksController(): DiagnosticsCallbacksController
    {
        if ($this->diagnosticsCallbacks == null) {
            $this->diagnosticsCallbacks = new DiagnosticsCallbacksController($this->client);
        }
        return $this->diagnosticsCallbacks;
    }

    /**
     * Returns Diagnostics Factory Reset Controller
     */
    public function getDiagnosticsFactoryResetController(): DiagnosticsFactoryResetController
    {
        if ($this->diagnosticsFactoryReset == null) {
            $this->diagnosticsFactoryReset = new DiagnosticsFactoryResetController($this->client);
        }
        return $this->diagnosticsFactoryReset;
    }

    /**
     * Returns Targets Controller
     */
    public function getTargetsController(): TargetsController
    {
        if ($this->targets == null) {
            $this->targets = new TargetsController($this->client);
        }
        return $this->targets;
    }

    /**
     * Returns Cloud Connector Subscriptions Controller
     */
    public function getCloudConnectorSubscriptionsController(): CloudConnectorSubscriptionsController
    {
        if ($this->cloudConnectorSubscriptions == null) {
            $this->cloudConnectorSubscriptions = new CloudConnectorSubscriptionsController($this->client);
        }
        return $this->cloudConnectorSubscriptions;
    }

    /**
     * Returns Cloud Connector Devices Controller
     */
    public function getCloudConnectorDevicesController(): CloudConnectorDevicesController
    {
        if ($this->cloudConnectorDevices == null) {
            $this->cloudConnectorDevices = new CloudConnectorDevicesController($this->client);
        }
        return $this->cloudConnectorDevices;
    }

    /**
     * Returns Device Service Management Controller
     */
    public function getDeviceServiceManagementController(): DeviceServiceManagementController
    {
        if ($this->deviceServiceManagement == null) {
            $this->deviceServiceManagement = new DeviceServiceManagementController($this->client);
        }
        return $this->deviceServiceManagement;
    }

    /**
     * Returns Device Reports Controller
     */
    public function getDeviceReportsController(): DeviceReportsController
    {
        if ($this->deviceReports == null) {
            $this->deviceReports = new DeviceReportsController($this->client);
        }
        return $this->deviceReports;
    }

    /**
     * Returns Hyper Precise Location Callbacks Controller
     */
    public function getHyperPreciseLocationCallbacksController(): HyperPreciseLocationCallbacksController
    {
        if ($this->hyperPreciseLocationCallbacks == null) {
            $this->hyperPreciseLocationCallbacks = new HyperPreciseLocationCallbacksController($this->client);
        }
        return $this->hyperPreciseLocationCallbacks;
    }

    /**
     * Returns Anomaly Settings Controller
     */
    public function getAnomalySettingsController(): AnomalySettingsController
    {
        if ($this->anomalySettings == null) {
            $this->anomalySettings = new AnomalySettingsController($this->client);
        }
        return $this->anomalySettings;
    }

    /**
     * Returns Anomaly Triggers Controller
     */
    public function getAnomalyTriggersController(): AnomalyTriggersController
    {
        if ($this->anomalyTriggers == null) {
            $this->anomalyTriggers = new AnomalyTriggersController($this->client);
        }
        return $this->anomalyTriggers;
    }

    /**
     * Returns MEC Sites Controller
     */
    public function getMECSitesController(): MECSitesController
    {
        if ($this->mECSites == null) {
            $this->mECSites = new MECSitesController($this->client);
        }
        return $this->mECSites;
    }

    /**
     * Returns Service Launch Profiles Controller
     */
    public function getServiceLaunchProfilesController(): ServiceLaunchProfilesController
    {
        if ($this->serviceLaunchProfiles == null) {
            $this->serviceLaunchProfiles = new ServiceLaunchProfilesController($this->client);
        }
        return $this->serviceLaunchProfiles;
    }

    /**
     * Returns Service Launch Requests Controller
     */
    public function getServiceLaunchRequestsController(): ServiceLaunchRequestsController
    {
        if ($this->serviceLaunchRequests == null) {
            $this->serviceLaunchRequests = new ServiceLaunchRequestsController($this->client);
        }
        return $this->serviceLaunchRequests;
    }

    /**
     * Returns Service Instances Controller
     */
    public function getServiceInstancesController(): ServiceInstancesController
    {
        if ($this->serviceInstances == null) {
            $this->serviceInstances = new ServiceInstancesController($this->client);
        }
        return $this->serviceInstances;
    }

    /**
     * Returns Service Instance Operations Controller
     */
    public function getServiceInstanceOperationsController(): ServiceInstanceOperationsController
    {
        if ($this->serviceInstanceOperations == null) {
            $this->serviceInstanceOperations = new ServiceInstanceOperationsController($this->client);
        }
        return $this->serviceInstanceOperations;
    }

    /**
     * Returns Service Onboarding Controller
     */
    public function getServiceOnboardingController(): ServiceOnboardingController
    {
        if ($this->serviceOnboarding == null) {
            $this->serviceOnboarding = new ServiceOnboardingController($this->client);
        }
        return $this->serviceOnboarding;
    }

    /**
     * Returns Service Metadata Controller
     */
    public function getServiceMetadataController(): ServiceMetadataController
    {
        if ($this->serviceMetadata == null) {
            $this->serviceMetadata = new ServiceMetadataController($this->client);
        }
        return $this->serviceMetadata;
    }

    /**
     * Returns Repositories Controller
     */
    public function getRepositoriesController(): RepositoriesController
    {
        if ($this->repositories == null) {
            $this->repositories = new RepositoriesController($this->client);
        }
        return $this->repositories;
    }

    /**
     * Returns CSP Profiles Controller
     */
    public function getCSPProfilesController(): CSPProfilesController
    {
        if ($this->cSPProfiles == null) {
            $this->cSPProfiles = new CSPProfilesController($this->client);
        }
        return $this->cSPProfiles;
    }

    /**
     * Returns Service Claims Controller
     */
    public function getServiceClaimsController(): ServiceClaimsController
    {
        if ($this->serviceClaims == null) {
            $this->serviceClaims = new ServiceClaimsController($this->client);
        }
        return $this->serviceClaims;
    }

    /**
     * Returns Oauth Authorization Controller
     */
    public function getOauthAuthorizationController(): OauthAuthorizationController
    {
        if ($this->oauthAuthorization == null) {
            $this->oauthAuthorization = new OauthAuthorizationController($this->client);
        }
        return $this->oauthAuthorization;
    }

    /**
     * Get the defined global configurations
     */
    private function getGlobalConfiguration(): array
    {
        return [HeaderParam::init('VZ-M2M-Token', $this->getVZM2mToken())];
    }

    /**
     * A map of all base urls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::EDGE_DISCOVERY => 'https://5gedge.verizon.com/api/mec/eds',
            Server::OAUTH_SERVER => 'https://thingspace.verizon.com/api/ts/v1',
            Server::M2M => 'https://thingspace.verizon.com/api/m2m',
            Server::DEVICE_LOCATION => 'https://thingspace.verizon.com/api/loc/v1',
            Server::SUBSCRIPTION_SERVER => 'https://thingspace.verizon.com/api/subsc/v1',
            Server::SOFTWARE_MANAGEMENT_V1 => 'https://thingspace.verizon.com/api/fota/v1',
            Server::SOFTWARE_MANAGEMENT_V2 => 'https://thingspace.verizon.com/api/fota/v2',
            Server::SOFTWARE_MANAGEMENT_V3 => 'https://thingspace.verizon.com/api/fota/v3',
            Server::PERFORMANCE => 'https://5gedge.verizon.com/api/mec',
            Server::DEVICE_DIAGNOSTICS => 'https://thingspace.verizon.com/api/diagnostics/v1',
            Server::CLOUD_CONNECTOR => 'https://thingspace.verizon.com/api/cc/v1',
            Server::HYPER_PRECISE_LOCATION => 'https://thingspace.verizon.com/api/hyper-precise/v1',
            Server::SERVICES => 'https://5gedge.verizon.com/api/mec/services'
        ]
    ];
}
