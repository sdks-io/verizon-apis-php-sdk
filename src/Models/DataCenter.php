<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

class DataCenter implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $packageType;

    /**
     * @var string|null
     */
    private $distribution;

    /**
     * @var string|null
     */
    private $location;

    /**
     * @var string|null
     */
    private $k8sVersion = K8sVersionEnum::ENUM_118;

    /**
     * @var string|null
     */
    private $operatingSystem;

    /**
     * @var EdgeServiceLaunchParams[]|null
     */
    private $tags;

    /**
     * Returns Package Type.
     * Packages are optimized for various operating environments. Prepackaged images are available in OVA
     * and QCOW formats.
     */
    public function getPackageType(): ?string
    {
        return $this->packageType;
    }

    /**
     * Sets Package Type.
     * Packages are optimized for various operating environments. Prepackaged images are available in OVA
     * and QCOW formats.
     *
     * @maps packageType
     * @factory \VerizonLib\Models\DataCenterPackageTypeEnum::checkValue
     */
    public function setPackageType(?string $packageType): void
    {
        $this->packageType = $packageType;
    }

    /**
     * Returns Distribution.
     * Supported Kubernetes distribution for the selected cloud provider.
     */
    public function getDistribution(): ?string
    {
        return $this->distribution;
    }

    /**
     * Sets Distribution.
     * Supported Kubernetes distribution for the selected cloud provider.
     *
     * @maps distribution
     * @factory \VerizonLib\Models\DataCenterDistributionEnum::checkValue
     */
    public function setDistribution(?string $distribution): void
    {
        $this->distribution = $distribution;
    }

    /**
     * Returns Location.
     * Indicate geo-location of cluster if you wish to use location based policies.
     */
    public function getLocation(): ?string
    {
        return $this->location;
    }

    /**
     * Sets Location.
     * Indicate geo-location of cluster if you wish to use location based policies.
     *
     * @maps location
     */
    public function setLocation(?string $location): void
    {
        $this->location = $location;
    }

    /**
     * Returns K 8 S Version.
     * Version of K8s platform.
     */
    public function getK8sVersion(): ?string
    {
        return $this->k8sVersion;
    }

    /**
     * Sets K 8 S Version.
     * Version of K8s platform.
     *
     * @maps k8sVersion
     * @factory \VerizonLib\Models\K8sVersionEnum::checkValue
     */
    public function setK8sVersion(?string $k8sVersion): void
    {
        $this->k8sVersion = $k8sVersion;
    }

    /**
     * Returns Operating System.
     * Operating System for the master and worker nodes.
     */
    public function getOperatingSystem(): ?string
    {
        return $this->operatingSystem;
    }

    /**
     * Sets Operating System.
     * Operating System for the master and worker nodes.
     *
     * @maps operatingSystem
     */
    public function setOperatingSystem(?string $operatingSystem): void
    {
        $this->operatingSystem = $operatingSystem;
    }

    /**
     * Returns Tags.
     *
     * @return EdgeServiceLaunchParams[]|null
     */
    public function getTags(): ?array
    {
        return $this->tags;
    }

    /**
     * Sets Tags.
     *
     * @maps tags
     *
     * @param EdgeServiceLaunchParams[]|null $tags
     */
    public function setTags(?array $tags): void
    {
        $this->tags = $tags;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->packageType)) {
            $json['packageType']     = DataCenterPackageTypeEnum::checkValue($this->packageType);
        }
        if (isset($this->distribution)) {
            $json['distribution']    = DataCenterDistributionEnum::checkValue($this->distribution);
        }
        if (isset($this->location)) {
            $json['location']        = $this->location;
        }
        if (isset($this->k8sVersion)) {
            $json['k8sVersion']      = K8sVersionEnum::checkValue($this->k8sVersion);
        }
        if (isset($this->operatingSystem)) {
            $json['operatingSystem'] = $this->operatingSystem;
        }
        if (isset($this->tags)) {
            $json['tags']            = $this->tags;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
