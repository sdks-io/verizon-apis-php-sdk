<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Resource of the service.
 */
class ServiceResource implements \JsonSerializable
{
    /**
     * @var ResourceBase|null
     */
    private $computeResources;

    /**
     * @var bool|null
     */
    private $gpuRequired = false;

    /**
     * @var ResourceBase|null
     */
    private $gpu;

    /**
     * @var ResourceBase|null
     */
    private $storage;

    /**
     * @var ResourceBase|null
     */
    private $memory;

    /**
     * @var ResourceBase|null
     */
    private $latency;

    /**
     * @var ResourceBase|null
     */
    private $requestRate;

    /**
     * @var ResourceBase|null
     */
    private $bandwidth;

    /**
     * Returns Compute Resources.
     * Resource Base of the service.
     */
    public function getComputeResources(): ?ResourceBase
    {
        return $this->computeResources;
    }

    /**
     * Sets Compute Resources.
     * Resource Base of the service.
     *
     * @maps computeResources
     */
    public function setComputeResources(?ResourceBase $computeResources): void
    {
        $this->computeResources = $computeResources;
    }

    /**
     * Returns Gpu Required.
     * GPU required or not for onboarding service.
     */
    public function getGpuRequired(): ?bool
    {
        return $this->gpuRequired;
    }

    /**
     * Sets Gpu Required.
     * GPU required or not for onboarding service.
     *
     * @maps gpuRequired
     */
    public function setGpuRequired(?bool $gpuRequired): void
    {
        $this->gpuRequired = $gpuRequired;
    }

    /**
     * Returns Gpu.
     * Resource Base of the service.
     */
    public function getGpu(): ?ResourceBase
    {
        return $this->gpu;
    }

    /**
     * Sets Gpu.
     * Resource Base of the service.
     *
     * @maps gpu
     */
    public function setGpu(?ResourceBase $gpu): void
    {
        $this->gpu = $gpu;
    }

    /**
     * Returns Storage.
     * Resource Base of the service.
     */
    public function getStorage(): ?ResourceBase
    {
        return $this->storage;
    }

    /**
     * Sets Storage.
     * Resource Base of the service.
     *
     * @maps storage
     */
    public function setStorage(?ResourceBase $storage): void
    {
        $this->storage = $storage;
    }

    /**
     * Returns Memory.
     * Resource Base of the service.
     */
    public function getMemory(): ?ResourceBase
    {
        return $this->memory;
    }

    /**
     * Sets Memory.
     * Resource Base of the service.
     *
     * @maps memory
     */
    public function setMemory(?ResourceBase $memory): void
    {
        $this->memory = $memory;
    }

    /**
     * Returns Latency.
     * Resource Base of the service.
     */
    public function getLatency(): ?ResourceBase
    {
        return $this->latency;
    }

    /**
     * Sets Latency.
     * Resource Base of the service.
     *
     * @maps latency
     */
    public function setLatency(?ResourceBase $latency): void
    {
        $this->latency = $latency;
    }

    /**
     * Returns Request Rate.
     * Resource Base of the service.
     */
    public function getRequestRate(): ?ResourceBase
    {
        return $this->requestRate;
    }

    /**
     * Sets Request Rate.
     * Resource Base of the service.
     *
     * @maps requestRate
     */
    public function setRequestRate(?ResourceBase $requestRate): void
    {
        $this->requestRate = $requestRate;
    }

    /**
     * Returns Bandwidth.
     * Resource Base of the service.
     */
    public function getBandwidth(): ?ResourceBase
    {
        return $this->bandwidth;
    }

    /**
     * Sets Bandwidth.
     * Resource Base of the service.
     *
     * @maps bandwidth
     */
    public function setBandwidth(?ResourceBase $bandwidth): void
    {
        $this->bandwidth = $bandwidth;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->computeResources)) {
            $json['computeResources'] = $this->computeResources;
        }
        if (isset($this->gpuRequired)) {
            $json['gpuRequired']      = $this->gpuRequired;
        }
        if (isset($this->gpu)) {
            $json['gpu']              = $this->gpu;
        }
        if (isset($this->storage)) {
            $json['storage']          = $this->storage;
        }
        if (isset($this->memory)) {
            $json['memory']           = $this->memory;
        }
        if (isset($this->latency)) {
            $json['latency']          = $this->latency;
        }
        if (isset($this->requestRate)) {
            $json['requestRate']      = $this->requestRate;
        }
        if (isset($this->bandwidth)) {
            $json['bandwidth']        = $this->bandwidth;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
