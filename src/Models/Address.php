<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * The customer address for the line's primary place of use, for line usage taxation.
 */
class Address implements \JsonSerializable
{
    /**
     * @var string
     */
    private $addressLine1;

    /**
     * @var string|null
     */
    private $addressLine2;

    /**
     * @var string
     */
    private $city;

    /**
     * @var string
     */
    private $state;

    /**
     * @var string
     */
    private $zip;

    /**
     * @var string|null
     */
    private $zip4;

    /**
     * @var string
     */
    private $country;

    /**
     * @var string|null
     */
    private $phone;

    /**
     * @var string|null
     */
    private $phoneType;

    /**
     * @var string|null
     */
    private $emailAddress;

    /**
     * @param string $addressLine1
     * @param string $city
     * @param string $state
     * @param string $zip
     * @param string $country
     */
    public function __construct(string $addressLine1, string $city, string $state, string $zip, string $country)
    {
        $this->addressLine1 = $addressLine1;
        $this->city = $city;
        $this->state = $state;
        $this->zip = $zip;
        $this->country = $country;
    }

    /**
     * Returns Address Line 1.
     * The street address for the line's primary place of use. This must be a physical address for taxation;
     * it cannot be a P.O. box.
     */
    public function getAddressLine1(): string
    {
        return $this->addressLine1;
    }

    /**
     * Sets Address Line 1.
     * The street address for the line's primary place of use. This must be a physical address for taxation;
     * it cannot be a P.O. box.
     *
     * @required
     * @maps addressLine1
     */
    public function setAddressLine1(string $addressLine1): void
    {
        $this->addressLine1 = $addressLine1;
    }

    /**
     * Returns Address Line 2.
     * Optional additional street address information.
     */
    public function getAddressLine2(): ?string
    {
        return $this->addressLine2;
    }

    /**
     * Sets Address Line 2.
     * Optional additional street address information.
     *
     * @maps addressLine2
     */
    public function setAddressLine2(?string $addressLine2): void
    {
        $this->addressLine2 = $addressLine2;
    }

    /**
     * Returns City.
     * The city for the line's primary place of use.
     */
    public function getCity(): string
    {
        return $this->city;
    }

    /**
     * Sets City.
     * The city for the line's primary place of use.
     *
     * @required
     * @maps city
     */
    public function setCity(string $city): void
    {
        $this->city = $city;
    }

    /**
     * Returns State.
     * The state for the line's primary place of use.
     */
    public function getState(): string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * The state for the line's primary place of use.
     *
     * @required
     * @maps state
     */
    public function setState(string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Zip.
     * The ZIP code for the line's primary place of use.
     */
    public function getZip(): string
    {
        return $this->zip;
    }

    /**
     * Sets Zip.
     * The ZIP code for the line's primary place of use.
     *
     * @required
     * @maps zip
     */
    public function setZip(string $zip): void
    {
        $this->zip = $zip;
    }

    /**
     * Returns Zip 4.
     * The ZIP+4 for the line's primary place of use.
     */
    public function getZip4(): ?string
    {
        return $this->zip4;
    }

    /**
     * Sets Zip 4.
     * The ZIP+4 for the line's primary place of use.
     *
     * @maps zip4
     */
    public function setZip4(?string $zip4): void
    {
        $this->zip4 = $zip4;
    }

    /**
     * Returns Country.
     * Either “US” or “USA” for the country of the line's primary place of use.
     */
    public function getCountry(): string
    {
        return $this->country;
    }

    /**
     * Sets Country.
     * Either “US” or “USA” for the country of the line's primary place of use.
     *
     * @required
     * @maps country
     */
    public function setCountry(string $country): void
    {
        $this->country = $country;
    }

    /**
     * Returns Phone.
     * A phone number where the customer can be reached.
     */
    public function getPhone(): ?string
    {
        return $this->phone;
    }

    /**
     * Sets Phone.
     * A phone number where the customer can be reached.
     *
     * @maps phone
     */
    public function setPhone(?string $phone): void
    {
        $this->phone = $phone;
    }

    /**
     * Returns Phone Type.
     * A single letter to indicate the customer phone type.
     */
    public function getPhoneType(): ?string
    {
        return $this->phoneType;
    }

    /**
     * Sets Phone Type.
     * A single letter to indicate the customer phone type.
     *
     * @maps phoneType
     */
    public function setPhoneType(?string $phoneType): void
    {
        $this->phoneType = $phoneType;
    }

    /**
     * Returns Email Address.
     * An email address for the customer.
     */
    public function getEmailAddress(): ?string
    {
        return $this->emailAddress;
    }

    /**
     * Sets Email Address.
     * An email address for the customer.
     *
     * @maps emailAddress
     */
    public function setEmailAddress(?string $emailAddress): void
    {
        $this->emailAddress = $emailAddress;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['addressLine1']     = $this->addressLine1;
        if (isset($this->addressLine2)) {
            $json['addressLine2'] = $this->addressLine2;
        }
        $json['city']             = $this->city;
        $json['state']            = $this->state;
        $json['zip']              = $this->zip;
        if (isset($this->zip4)) {
            $json['zip4']         = $this->zip4;
        }
        $json['country']          = $this->country;
        if (isset($this->phone)) {
            $json['phone']        = $this->phone;
        }
        if (isset($this->phoneType)) {
            $json['phoneType']    = $this->phoneType;
        }
        if (isset($this->emailAddress)) {
            $json['emailAddress'] = $this->emailAddress;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
