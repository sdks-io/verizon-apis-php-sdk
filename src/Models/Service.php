<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\Utils\DateTimeHelper;

/**
 * A customer service on 5G MEC platform using 5G MEC portal.
 */
class Service implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string
     */
    private $name;

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var string
     */
    private $version;

    /**
     * @var ServiceOnboardingAdditionalParams[]|null
     */
    private $metadata;

    /**
     * @var ServiceTag[]|null
     */
    private $tags;

    /**
     * @var array
     */
    private $categories = [];

    /**
     * @var bool|null
     */
    private $isFavourite;

    /**
     * @var bool|null
     */
    private $isDeleted;

    /**
     * @var Compatibility[]|null
     */
    private $compatibility;

    /**
     * @var ServiceResource|null
     */
    private $resource;

    /**
     * @var \DateTime|null
     */
    private $createdDate;

    /**
     * @var \DateTime|null
     */
    private $lastModifiedDate;

    /**
     * @var string|null
     */
    private $createdBy;

    /**
     * @var string|null
     */
    private $lastModifiedBy;

    /**
     * @var ServiceError|null
     */
    private $error;

    /**
     * @var EdgeServiceOnboardingResult|null
     */
    private $errorResponse;

    /**
     * @var string|null
     */
    private $state;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var ServiceHandlerId|null
     */
    private $serviceHandlerId;

    /**
     * @var ObservabilityTemplate|null
     */
    private $observabilityTemplate;

    /**
     * @var ServiceSwaggerSpecId|null
     */
    private $serviceSwaggerSpecId;

    /**
     * @var Workflow[]|null
     */
    private $workflows;

    /**
     * @var Workload[]|null
     */
    private $workloads;

    /**
     * @var ServiceDependency[]|null
     */
    private $dependencies;

    /**
     * @var array
     */
    private $boundaries = [];

    /**
     * @param string $name
     * @param string $version
     */
    public function __construct(string $name, string $version)
    {
        $this->name = $name;
        $this->version = $version;
    }

    /**
     * Returns Id.
     * System generated unique UUID.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * System generated unique UUID.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Name.
     * Name of the service needs to be deployed.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Name of the service needs to be deployed.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Description.
     * Description of the service needs to be deployed.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * Description of the service needs to be deployed.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * Description of the service needs to be deployed.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Version.
     * Version of the service needs to be deployed.
     */
    public function getVersion(): string
    {
        return $this->version;
    }

    /**
     * Sets Version.
     * Version of the service needs to be deployed.
     *
     * @required
     * @maps version
     */
    public function setVersion(string $version): void
    {
        $this->version = $version;
    }

    /**
     * Returns Metadata.
     * Properties are metadata attributes.
     *
     * @return ServiceOnboardingAdditionalParams[]|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Properties are metadata attributes.
     *
     * @maps metadata
     *
     * @param ServiceOnboardingAdditionalParams[]|null $metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Tags.
     * List of service tags.
     *
     * @return ServiceTag[]|null
     */
    public function getTags(): ?array
    {
        return $this->tags;
    }

    /**
     * Sets Tags.
     * List of service tags.
     *
     * @maps tags
     *
     * @param ServiceTag[]|null $tags
     */
    public function setTags(?array $tags): void
    {
        $this->tags = $tags;
    }

    /**
     * Returns Categories.
     * Can be any name just to define it under a category.
     *
     * @return string[]|null
     */
    public function getCategories(): ?array
    {
        if (count($this->categories) == 0) {
            return null;
        }
        return $this->categories['value'];
    }

    /**
     * Sets Categories.
     * Can be any name just to define it under a category.
     *
     * @maps categories
     *
     * @param string[]|null $categories
     */
    public function setCategories(?array $categories): void
    {
        $this->categories['value'] = $categories;
    }

    /**
     * Unsets Categories.
     * Can be any name just to define it under a category.
     */
    public function unsetCategories(): void
    {
        $this->categories = [];
    }

    /**
     * Returns Is Favourite.
     * Boolean value to set/unset the service as favorite.
     */
    public function getIsFavourite(): ?bool
    {
        return $this->isFavourite;
    }

    /**
     * Sets Is Favourite.
     * Boolean value to set/unset the service as favorite.
     *
     * @maps isFavourite
     */
    public function setIsFavourite(?bool $isFavourite): void
    {
        $this->isFavourite = $isFavourite;
    }

    /**
     * Returns Is Deleted.
     * Boolean to support soft delete of a version of a service.
     */
    public function getIsDeleted(): ?bool
    {
        return $this->isDeleted;
    }

    /**
     * Sets Is Deleted.
     * Boolean to support soft delete of a version of a service.
     *
     * @maps isDeleted
     */
    public function setIsDeleted(?bool $isDeleted): void
    {
        $this->isDeleted = $isDeleted;
    }

    /**
     * Returns Compatibility.
     * Compatibility would have the attribute CSP which is Cloud service provider e.g. AWS_PUBLIC_CLOUD,
     * AWS_WL, AWS_OUTPOST, AZURE_EDGE, AZURE_PUBLIC_CLOUD.
     *
     * @return Compatibility[]|null
     */
    public function getCompatibility(): ?array
    {
        return $this->compatibility;
    }

    /**
     * Sets Compatibility.
     * Compatibility would have the attribute CSP which is Cloud service provider e.g. AWS_PUBLIC_CLOUD,
     * AWS_WL, AWS_OUTPOST, AZURE_EDGE, AZURE_PUBLIC_CLOUD.
     *
     * @maps compatibility
     *
     * @param Compatibility[]|null $compatibility
     */
    public function setCompatibility(?array $compatibility): void
    {
        $this->compatibility = $compatibility;
    }

    /**
     * Returns Resource.
     * Resource of the service.
     */
    public function getResource(): ?ServiceResource
    {
        return $this->resource;
    }

    /**
     * Sets Resource.
     * Resource of the service.
     *
     * @maps resource
     */
    public function setResource(?ServiceResource $resource): void
    {
        $this->resource = $resource;
    }

    /**
     * Returns Created Date.
     * Auto-derived time of creation. Part of response only.
     */
    public function getCreatedDate(): ?\DateTime
    {
        return $this->createdDate;
    }

    /**
     * Sets Created Date.
     * Auto-derived time of creation. Part of response only.
     *
     * @maps createdDate
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedDate(?\DateTime $createdDate): void
    {
        $this->createdDate = $createdDate;
    }

    /**
     * Returns Last Modified Date.
     * Last modified time. Part of response only.
     */
    public function getLastModifiedDate(): ?\DateTime
    {
        return $this->lastModifiedDate;
    }

    /**
     * Sets Last Modified Date.
     * Last modified time. Part of response only.
     *
     * @maps lastModifiedDate
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLastModifiedDate(?\DateTime $lastModifiedDate): void
    {
        $this->lastModifiedDate = $lastModifiedDate;
    }

    /**
     * Returns Created By.
     * User who created the service. Part of response only.
     */
    public function getCreatedBy(): ?string
    {
        return $this->createdBy;
    }

    /**
     * Sets Created By.
     * User who created the service. Part of response only.
     *
     * @maps createdBy
     */
    public function setCreatedBy(?string $createdBy): void
    {
        $this->createdBy = $createdBy;
    }

    /**
     * Returns Last Modified By.
     * User who last modified the service. Part of response only.
     */
    public function getLastModifiedBy(): ?string
    {
        return $this->lastModifiedBy;
    }

    /**
     * Sets Last Modified By.
     * User who last modified the service. Part of response only.
     *
     * @maps lastModifiedBy
     */
    public function setLastModifiedBy(?string $lastModifiedBy): void
    {
        $this->lastModifiedBy = $lastModifiedBy;
    }

    /**
     * Returns Error.
     * Errors related to service.
     */
    public function getError(): ?ServiceError
    {
        return $this->error;
    }

    /**
     * Sets Error.
     * Errors related to service.
     *
     * @maps error
     */
    public function setError(?ServiceError $error): void
    {
        $this->error = $error;
    }

    /**
     * Returns Error Response.
     * Error response attribute of a service.
     */
    public function getErrorResponse(): ?EdgeServiceOnboardingResult
    {
        return $this->errorResponse;
    }

    /**
     * Sets Error Response.
     * Error response attribute of a service.
     *
     * @maps errorResponse
     */
    public function setErrorResponse(?EdgeServiceOnboardingResult $errorResponse): void
    {
        $this->errorResponse = $errorResponse;
    }

    /**
     * Returns State.
     * Can have any value as - DRAFT, DESIGN, TESTING, PUBLISH, CERTIFY, READY_TO_USE, DEPRECATE, DELETED.
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * Can have any value as - DRAFT, DESIGN, TESTING, PUBLISH, CERTIFY, READY_TO_USE, DEPRECATE, DELETED.
     *
     * @maps state
     * @factory \VerizonLib\Models\ServiceStateEnum::checkValue
     */
    public function setState(?string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Status.
     * Can have any value as - DRAFT_INPROGRESS, DRAFT_COMPLETE, DESIGN_INPROGRESS, DESIGN_FAILED,
     * DESIGN_COMPLETED, VALIDATION_INPROGRESS,  VALIDATION_FAILED, VALIDATION_COMPLETED,
     * TESTING_INPROGRESS, TESTING_FAILED, TESTING_COMPLETED, READY_TO_USE_INPROGRESS, READY_TO_USE_FAILED,
     * READY_TO_USE_COMPLETED, READY_TO_PRIVATE_USE_INPROGRESS, READY_TO_PRIVATE_USE_FAILED,
     * READY_TO_PRIVATE_USE_COMPLETED,  PUBLISH_INPROGRESS,  PUBLISH_FAILED,  PUBLISH_COMPLETED,
     * CERTIFY_INPROGRESS,  CERTIFY_FAILED, CERTIFY_COMPLETED, DEPRECATE_INPROGRESS,  DEPRECATE_FAILED,
     * DEPRECATE_COMPLETED, MARKDELETE_INPROGRESS, MARKDELETE_FAILED, MARKDELETE_COMPLETED.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Can have any value as - DRAFT_INPROGRESS, DRAFT_COMPLETE, DESIGN_INPROGRESS, DESIGN_FAILED,
     * DESIGN_COMPLETED, VALIDATION_INPROGRESS,  VALIDATION_FAILED, VALIDATION_COMPLETED,
     * TESTING_INPROGRESS, TESTING_FAILED, TESTING_COMPLETED, READY_TO_USE_INPROGRESS, READY_TO_USE_FAILED,
     * READY_TO_USE_COMPLETED, READY_TO_PRIVATE_USE_INPROGRESS, READY_TO_PRIVATE_USE_FAILED,
     * READY_TO_PRIVATE_USE_COMPLETED,  PUBLISH_INPROGRESS,  PUBLISH_FAILED,  PUBLISH_COMPLETED,
     * CERTIFY_INPROGRESS,  CERTIFY_FAILED, CERTIFY_COMPLETED, DEPRECATE_INPROGRESS,  DEPRECATE_FAILED,
     * DEPRECATE_COMPLETED, MARKDELETE_INPROGRESS, MARKDELETE_FAILED, MARKDELETE_COMPLETED.
     *
     * @maps status
     * @factory \VerizonLib\Models\ServiceStatusEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Type.
     * Service Type e.g. Installation, Operations, Custom.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Service Type e.g. Installation, Operations, Custom.
     *
     * @maps type
     * @factory \VerizonLib\Models\ServiceTypeEnum::checkValue
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Service Handler Id.
     * Auto-generated Id of serviceHandlerId created.
     */
    public function getServiceHandlerId(): ?ServiceHandlerId
    {
        return $this->serviceHandlerId;
    }

    /**
     * Sets Service Handler Id.
     * Auto-generated Id of serviceHandlerId created.
     *
     * @maps serviceHandlerId
     */
    public function setServiceHandlerId(?ServiceHandlerId $serviceHandlerId): void
    {
        $this->serviceHandlerId = $serviceHandlerId;
    }

    /**
     * Returns Observability Template.
     * Attribute of service.
     */
    public function getObservabilityTemplate(): ?ObservabilityTemplate
    {
        return $this->observabilityTemplate;
    }

    /**
     * Sets Observability Template.
     * Attribute of service.
     *
     * @maps observabilityTemplate
     */
    public function setObservabilityTemplate(?ObservabilityTemplate $observabilityTemplate): void
    {
        $this->observabilityTemplate = $observabilityTemplate;
    }

    /**
     * Returns Service Swagger Spec Id.
     * Auto-generated Id of service handler Swagger specification file uploaded.
     */
    public function getServiceSwaggerSpecId(): ?ServiceSwaggerSpecId
    {
        return $this->serviceSwaggerSpecId;
    }

    /**
     * Sets Service Swagger Spec Id.
     * Auto-generated Id of service handler Swagger specification file uploaded.
     *
     * @maps serviceSwaggerSpecId
     */
    public function setServiceSwaggerSpecId(?ServiceSwaggerSpecId $serviceSwaggerSpecId): void
    {
        $this->serviceSwaggerSpecId = $serviceSwaggerSpecId;
    }

    /**
     * Returns Workflows.
     *
     * @return Workflow[]|null
     */
    public function getWorkflows(): ?array
    {
        return $this->workflows;
    }

    /**
     * Sets Workflows.
     *
     * @maps workflows
     *
     * @param Workflow[]|null $workflows
     */
    public function setWorkflows(?array $workflows): void
    {
        $this->workflows = $workflows;
    }

    /**
     * Returns Workloads.
     *
     * @return Workload[]|null
     */
    public function getWorkloads(): ?array
    {
        return $this->workloads;
    }

    /**
     * Sets Workloads.
     *
     * @maps workloads
     *
     * @param Workload[]|null $workloads
     */
    public function setWorkloads(?array $workloads): void
    {
        $this->workloads = $workloads;
    }

    /**
     * Returns Dependencies.
     * Dependencies of the service.
     *
     * @return ServiceDependency[]|null
     */
    public function getDependencies(): ?array
    {
        return $this->dependencies;
    }

    /**
     * Sets Dependencies.
     * Dependencies of the service.
     *
     * @maps dependencies
     *
     * @param ServiceDependency[]|null $dependencies
     */
    public function setDependencies(?array $dependencies): void
    {
        $this->dependencies = $dependencies;
    }

    /**
     * Returns Boundaries.
     * Boundaries would have attributes csp, region and zoneId.
     *
     * @return Boundary[]|null
     */
    public function getBoundaries(): ?array
    {
        if (count($this->boundaries) == 0) {
            return null;
        }
        return $this->boundaries['value'];
    }

    /**
     * Sets Boundaries.
     * Boundaries would have attributes csp, region and zoneId.
     *
     * @maps boundaries
     *
     * @param Boundary[]|null $boundaries
     */
    public function setBoundaries(?array $boundaries): void
    {
        $this->boundaries['value'] = $boundaries;
    }

    /**
     * Unsets Boundaries.
     * Boundaries would have attributes csp, region and zoneId.
     */
    public function unsetBoundaries(): void
    {
        $this->boundaries = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']                    = $this->id;
        }
        $json['name']                      = $this->name;
        if (!empty($this->description)) {
            $json['description']           = $this->description['value'];
        }
        $json['version']                   = $this->version;
        if (isset($this->metadata)) {
            $json['metadata']              = $this->metadata;
        }
        if (isset($this->tags)) {
            $json['tags']                  = $this->tags;
        }
        if (!empty($this->categories)) {
            $json['categories']            = $this->categories['value'];
        }
        if (isset($this->isFavourite)) {
            $json['isFavourite']           = $this->isFavourite;
        }
        if (isset($this->isDeleted)) {
            $json['isDeleted']             = $this->isDeleted;
        }
        if (isset($this->compatibility)) {
            $json['compatibility']         = $this->compatibility;
        }
        if (isset($this->resource)) {
            $json['resource']              = $this->resource;
        }
        if (isset($this->createdDate)) {
            $json['createdDate']           = DateTimeHelper::toRfc3339DateTime($this->createdDate);
        }
        if (isset($this->lastModifiedDate)) {
            $json['lastModifiedDate']      = DateTimeHelper::toRfc3339DateTime($this->lastModifiedDate);
        }
        if (isset($this->createdBy)) {
            $json['createdBy']             = $this->createdBy;
        }
        if (isset($this->lastModifiedBy)) {
            $json['lastModifiedBy']        = $this->lastModifiedBy;
        }
        if (isset($this->error)) {
            $json['error']                 = $this->error;
        }
        if (isset($this->errorResponse)) {
            $json['errorResponse']         = $this->errorResponse;
        }
        if (isset($this->state)) {
            $json['state']                 = ServiceStateEnum::checkValue($this->state);
        }
        if (isset($this->status)) {
            $json['status']                = ServiceStatusEnum::checkValue($this->status);
        }
        if (isset($this->type)) {
            $json['type']                  = ServiceTypeEnum::checkValue($this->type);
        }
        if (isset($this->serviceHandlerId)) {
            $json['serviceHandlerId']      = $this->serviceHandlerId;
        }
        if (isset($this->observabilityTemplate)) {
            $json['observabilityTemplate'] = $this->observabilityTemplate;
        }
        if (isset($this->serviceSwaggerSpecId)) {
            $json['serviceSwaggerSpecId']  = $this->serviceSwaggerSpecId;
        }
        if (isset($this->workflows)) {
            $json['workflows']             = $this->workflows;
        }
        if (isset($this->workloads)) {
            $json['workloads']             = $this->workloads;
        }
        if (isset($this->dependencies)) {
            $json['dependencies']          = $this->dependencies;
        }
        if (!empty($this->boundaries)) {
            $json['boundaries']            = $this->boundaries['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
