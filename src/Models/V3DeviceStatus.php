<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\Utils\DateTimeHelper;

/**
 * Device status.
 */
class V3DeviceStatus implements \JsonSerializable
{
    /**
     * @var string
     */
    private $deviceId;

    /**
     * @var string
     */
    private $status;

    /**
     * @var string|null
     */
    private $resultReason;

    /**
     * @var \DateTime|null
     */
    private $updatedTime;

    /**
     * @var \DateTime|null
     */
    private $recentAttemptTime;

    /**
     * @var \DateTime|null
     */
    private $nextAttemptTime;

    /**
     * @param string $deviceId
     * @param string $status
     */
    public function __construct(string $deviceId, string $status)
    {
        $this->deviceId = $deviceId;
        $this->status = $status;
    }

    /**
     * Returns Device Id.
     * Device IMEI.
     */
    public function getDeviceId(): string
    {
        return $this->deviceId;
    }

    /**
     * Sets Device Id.
     * Device IMEI.
     *
     * @required
     * @maps deviceId
     */
    public function setDeviceId(string $deviceId): void
    {
        $this->deviceId = $deviceId;
    }

    /**
     * Returns Status.
     * Success or failure.
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Success or failure.
     *
     * @required
     * @maps status
     */
    public function setStatus(string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Result Reason.
     * Result reason.
     */
    public function getResultReason(): ?string
    {
        return $this->resultReason;
    }

    /**
     * Sets Result Reason.
     * Result reason.
     *
     * @maps resultReason
     */
    public function setResultReason(?string $resultReason): void
    {
        $this->resultReason = $resultReason;
    }

    /**
     * Returns Updated Time.
     * Updated Time.
     */
    public function getUpdatedTime(): ?\DateTime
    {
        return $this->updatedTime;
    }

    /**
     * Sets Updated Time.
     * Updated Time.
     *
     * @maps updatedTime
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setUpdatedTime(?\DateTime $updatedTime): void
    {
        $this->updatedTime = $updatedTime;
    }

    /**
     * Returns Recent Attempt Time.
     * The most recent attempt time.
     */
    public function getRecentAttemptTime(): ?\DateTime
    {
        return $this->recentAttemptTime;
    }

    /**
     * Sets Recent Attempt Time.
     * The most recent attempt time.
     *
     * @maps recentAttemptTime
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setRecentAttemptTime(?\DateTime $recentAttemptTime): void
    {
        $this->recentAttemptTime = $recentAttemptTime;
    }

    /**
     * Returns Next Attempt Time.
     * Next attempt time.
     */
    public function getNextAttemptTime(): ?\DateTime
    {
        return $this->nextAttemptTime;
    }

    /**
     * Sets Next Attempt Time.
     * Next attempt time.
     *
     * @maps nextAttemptTime
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setNextAttemptTime(?\DateTime $nextAttemptTime): void
    {
        $this->nextAttemptTime = $nextAttemptTime;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['deviceId']              = $this->deviceId;
        $json['status']                = $this->status;
        if (isset($this->resultReason)) {
            $json['resultReason']      = $this->resultReason;
        }
        if (isset($this->updatedTime)) {
            $json['updatedTime']       = DateTimeHelper::toRfc3339DateTime($this->updatedTime);
        }
        if (isset($this->recentAttemptTime)) {
            $json['recentAttemptTime'] = DateTimeHelper::toRfc3339DateTime($this->recentAttemptTime);
        }
        if (isset($this->nextAttemptTime)) {
            $json['nextAttemptTime']   = DateTimeHelper::toRfc3339DateTime($this->nextAttemptTime);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
