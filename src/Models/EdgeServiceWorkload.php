<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\Utils\DateTimeHelper;

class EdgeServiceWorkload implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string
     */
    private $name;

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var array
     */
    private $packageType = [];

    /**
     * @var array
     */
    private $uploadType = [];

    /**
     * @var array
     */
    private $repositoryType = [];

    /**
     * @var array
     */
    private $repositoryId = [];

    /**
     * @var EdgeServiceRepository|null
     */
    private $repository;

    /**
     * @var string[]|null
     */
    private $files;

    /**
     * @var array
     */
    private $revisionType = [];

    /**
     * @var ServiceLaunchHelmGitBranch|null
     */
    private $helmGitBranch;

    /**
     * @var ServiceLaunchHelmGitTag|null
     */
    private $helmGitTag;

    /**
     * @var ServiceLaunchHelmYamlGitTag|null
     */
    private $helmYamlGitTag;

    /**
     * @var ServiceLaunchHelmRepo|null
     */
    private $helmRepo;

    /**
     * @var ServiceLaunchYamlGitBranch|null
     */
    private $yamlGitBranch;

    /**
     * @var ServiceLaunchTerraformGitBranch|null
     */
    private $terraformGitBranch;

    /**
     * @var ServiceLaunchTerraformGitTag|null
     */
    private $terraformGitTag;

    /**
     * @var \DateTime|null
     */
    private $createdDate;

    /**
     * @var \DateTime|null
     */
    private $lastModifiedDte;

    /**
     * @var string|null
     */
    private $createdBy;

    /**
     * @var string|null
     */
    private $updatedBy;

    /**
     * @param string $name
     */
    public function __construct(string $name)
    {
        $this->name = $name;
    }

    /**
     * Returns Id.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Name.
     * Name of the workload needs to be deployed.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Name of the workload needs to be deployed.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Description.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Package Type.
     * Deployment package type.
     */
    public function getPackageType(): ?string
    {
        if (count($this->packageType) == 0) {
            return null;
        }
        return $this->packageType['value'];
    }

    /**
     * Sets Package Type.
     * Deployment package type.
     *
     * @maps packageType
     * @factory \VerizonLib\Models\PackageTypeEnum::checkValue
     */
    public function setPackageType(?string $packageType): void
    {
        $this->packageType['value'] = $packageType;
    }

    /**
     * Unsets Package Type.
     * Deployment package type.
     */
    public function unsetPackageType(): void
    {
        $this->packageType = [];
    }

    /**
     * Returns Upload Type.
     */
    public function getUploadType(): ?string
    {
        if (count($this->uploadType) == 0) {
            return null;
        }
        return $this->uploadType['value'];
    }

    /**
     * Sets Upload Type.
     *
     * @maps uploadType
     * @factory \VerizonLib\Models\WorkloadUploadTypeEnum::checkValue
     */
    public function setUploadType(?string $uploadType): void
    {
        $this->uploadType['value'] = $uploadType;
    }

    /**
     * Unsets Upload Type.
     */
    public function unsetUploadType(): void
    {
        $this->uploadType = [];
    }

    /**
     * Returns Repository Type.
     */
    public function getRepositoryType(): ?string
    {
        if (count($this->repositoryType) == 0) {
            return null;
        }
        return $this->repositoryType['value'];
    }

    /**
     * Sets Repository Type.
     *
     * @maps repositoryType
     * @factory \VerizonLib\Models\RepositoryTypeEnum::checkValue
     */
    public function setRepositoryType(?string $repositoryType): void
    {
        $this->repositoryType['value'] = $repositoryType;
    }

    /**
     * Unsets Repository Type.
     */
    public function unsetRepositoryType(): void
    {
        $this->repositoryType = [];
    }

    /**
     * Returns Repository Id.
     */
    public function getRepositoryId(): ?string
    {
        if (count($this->repositoryId) == 0) {
            return null;
        }
        return $this->repositoryId['value'];
    }

    /**
     * Sets Repository Id.
     *
     * @maps repositoryId
     */
    public function setRepositoryId(?string $repositoryId): void
    {
        $this->repositoryId['value'] = $repositoryId;
    }

    /**
     * Unsets Repository Id.
     */
    public function unsetRepositoryId(): void
    {
        $this->repositoryId = [];
    }

    /**
     * Returns Repository.
     */
    public function getRepository(): ?EdgeServiceRepository
    {
        return $this->repository;
    }

    /**
     * Sets Repository.
     *
     * @maps repository
     */
    public function setRepository(?EdgeServiceRepository $repository): void
    {
        $this->repository = $repository;
    }

    /**
     * Returns Files.
     *
     * @return string[]|null
     */
    public function getFiles(): ?array
    {
        return $this->files;
    }

    /**
     * Sets Files.
     *
     * @maps files
     *
     * @param string[]|null $files
     */
    public function setFiles(?array $files): void
    {
        $this->files = $files;
    }

    /**
     * Returns Revision Type.
     */
    public function getRevisionType(): ?string
    {
        if (count($this->revisionType) == 0) {
            return null;
        }
        return $this->revisionType['value'];
    }

    /**
     * Sets Revision Type.
     *
     * @maps revisionType
     * @factory \VerizonLib\Models\RevisionTypeEnum::checkValue
     */
    public function setRevisionType(?string $revisionType): void
    {
        $this->revisionType['value'] = $revisionType;
    }

    /**
     * Unsets Revision Type.
     */
    public function unsetRevisionType(): void
    {
        $this->revisionType = [];
    }

    /**
     * Returns Helm Git Branch.
     */
    public function getHelmGitBranch(): ?ServiceLaunchHelmGitBranch
    {
        return $this->helmGitBranch;
    }

    /**
     * Sets Helm Git Branch.
     *
     * @maps helmGitBranch
     */
    public function setHelmGitBranch(?ServiceLaunchHelmGitBranch $helmGitBranch): void
    {
        $this->helmGitBranch = $helmGitBranch;
    }

    /**
     * Returns Helm Git Tag.
     */
    public function getHelmGitTag(): ?ServiceLaunchHelmGitTag
    {
        return $this->helmGitTag;
    }

    /**
     * Sets Helm Git Tag.
     *
     * @maps helmGitTag
     */
    public function setHelmGitTag(?ServiceLaunchHelmGitTag $helmGitTag): void
    {
        $this->helmGitTag = $helmGitTag;
    }

    /**
     * Returns Helm Yaml Git Tag.
     */
    public function getHelmYamlGitTag(): ?ServiceLaunchHelmYamlGitTag
    {
        return $this->helmYamlGitTag;
    }

    /**
     * Sets Helm Yaml Git Tag.
     *
     * @maps helmYamlGitTag
     */
    public function setHelmYamlGitTag(?ServiceLaunchHelmYamlGitTag $helmYamlGitTag): void
    {
        $this->helmYamlGitTag = $helmYamlGitTag;
    }

    /**
     * Returns Helm Repo.
     */
    public function getHelmRepo(): ?ServiceLaunchHelmRepo
    {
        return $this->helmRepo;
    }

    /**
     * Sets Helm Repo.
     *
     * @maps helmRepo
     */
    public function setHelmRepo(?ServiceLaunchHelmRepo $helmRepo): void
    {
        $this->helmRepo = $helmRepo;
    }

    /**
     * Returns Yaml Git Branch.
     */
    public function getYamlGitBranch(): ?ServiceLaunchYamlGitBranch
    {
        return $this->yamlGitBranch;
    }

    /**
     * Sets Yaml Git Branch.
     *
     * @maps yamlGitBranch
     */
    public function setYamlGitBranch(?ServiceLaunchYamlGitBranch $yamlGitBranch): void
    {
        $this->yamlGitBranch = $yamlGitBranch;
    }

    /**
     * Returns Terraform Git Branch.
     */
    public function getTerraformGitBranch(): ?ServiceLaunchTerraformGitBranch
    {
        return $this->terraformGitBranch;
    }

    /**
     * Sets Terraform Git Branch.
     *
     * @maps terraformGitBranch
     */
    public function setTerraformGitBranch(?ServiceLaunchTerraformGitBranch $terraformGitBranch): void
    {
        $this->terraformGitBranch = $terraformGitBranch;
    }

    /**
     * Returns Terraform Git Tag.
     */
    public function getTerraformGitTag(): ?ServiceLaunchTerraformGitTag
    {
        return $this->terraformGitTag;
    }

    /**
     * Sets Terraform Git Tag.
     *
     * @maps terraformGitTag
     */
    public function setTerraformGitTag(?ServiceLaunchTerraformGitTag $terraformGitTag): void
    {
        $this->terraformGitTag = $terraformGitTag;
    }

    /**
     * Returns Created Date.
     */
    public function getCreatedDate(): ?\DateTime
    {
        return $this->createdDate;
    }

    /**
     * Sets Created Date.
     *
     * @maps createdDate
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedDate(?\DateTime $createdDate): void
    {
        $this->createdDate = $createdDate;
    }

    /**
     * Returns Last Modified Dte.
     */
    public function getLastModifiedDte(): ?\DateTime
    {
        return $this->lastModifiedDte;
    }

    /**
     * Sets Last Modified Dte.
     *
     * @maps lastModifiedDte
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLastModifiedDte(?\DateTime $lastModifiedDte): void
    {
        $this->lastModifiedDte = $lastModifiedDte;
    }

    /**
     * Returns Created By.
     */
    public function getCreatedBy(): ?string
    {
        return $this->createdBy;
    }

    /**
     * Sets Created By.
     *
     * @maps createdBy
     */
    public function setCreatedBy(?string $createdBy): void
    {
        $this->createdBy = $createdBy;
    }

    /**
     * Returns Updated By.
     */
    public function getUpdatedBy(): ?string
    {
        return $this->updatedBy;
    }

    /**
     * Sets Updated By.
     *
     * @maps updatedBy
     */
    public function setUpdatedBy(?string $updatedBy): void
    {
        $this->updatedBy = $updatedBy;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']                 = $this->id;
        }
        $json['name']                   = $this->name;
        if (!empty($this->description)) {
            $json['description']        = $this->description['value'];
        }
        if (!empty($this->packageType)) {
            $json['packageType']        = PackageTypeEnum::checkValue($this->packageType['value']);
        }
        if (!empty($this->uploadType)) {
            $json['uploadType']         = WorkloadUploadTypeEnum::checkValue($this->uploadType['value']);
        }
        if (!empty($this->repositoryType)) {
            $json['repositoryType']     = RepositoryTypeEnum::checkValue($this->repositoryType['value']);
        }
        if (!empty($this->repositoryId)) {
            $json['repositoryId']       = $this->repositoryId['value'];
        }
        if (isset($this->repository)) {
            $json['repository']         = $this->repository;
        }
        if (isset($this->files)) {
            $json['files']              = $this->files;
        }
        if (!empty($this->revisionType)) {
            $json['revisionType']       = RevisionTypeEnum::checkValue($this->revisionType['value']);
        }
        if (isset($this->helmGitBranch)) {
            $json['helmGitBranch']      = $this->helmGitBranch;
        }
        if (isset($this->helmGitTag)) {
            $json['helmGitTag']         = $this->helmGitTag;
        }
        if (isset($this->helmYamlGitTag)) {
            $json['helmYamlGitTag']     = $this->helmYamlGitTag;
        }
        if (isset($this->helmRepo)) {
            $json['helmRepo']           = $this->helmRepo;
        }
        if (isset($this->yamlGitBranch)) {
            $json['yamlGitBranch']      = $this->yamlGitBranch;
        }
        if (isset($this->terraformGitBranch)) {
            $json['terraformGitBranch'] = $this->terraformGitBranch;
        }
        if (isset($this->terraformGitTag)) {
            $json['terraformGitTag']    = $this->terraformGitTag;
        }
        if (isset($this->createdDate)) {
            $json['createdDate']        = DateTimeHelper::toRfc3339DateTime($this->createdDate);
        }
        if (isset($this->lastModifiedDte)) {
            $json['lastModifiedDte']    = DateTimeHelper::toRfc3339DateTime($this->lastModifiedDte);
        }
        if (isset($this->createdBy)) {
            $json['createdBy']          = $this->createdBy;
        }
        if (isset($this->updatedBy)) {
            $json['updatedBy']          = $this->updatedBy;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
