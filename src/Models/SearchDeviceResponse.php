<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * A success response includes an array of all matching events. Each event includes the full event
 * resource definition.
 */
class SearchDeviceResponse implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $action;

    /**
     * @var string|null
     */
    private $createdon;

    /**
     * @var string|null
     */
    private $deviceid;

    /**
     * @var Fields2|null
     */
    private $fields;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string|null
     */
    private $kind;

    /**
     * @var string|null
     */
    private $lastupdated;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $state;

    /**
     * @var string[]|null
     */
    private $tagids;

    /**
     * @var string|null
     */
    private $transactionid;

    /**
     * @var string|null
     */
    private $version;

    /**
     * @var string|null
     */
    private $versionid;

    /**
     * Returns Action.
     * The action requested in this event; “change” for device configuration changes.
     */
    public function getAction(): ?string
    {
        return $this->action;
    }

    /**
     * Sets Action.
     * The action requested in this event; “change” for device configuration changes.
     *
     * @maps action
     */
    public function setAction(?string $action): void
    {
        $this->action = $action;
    }

    /**
     * Returns Createdon.
     * The date and time of the change request.
     */
    public function getCreatedon(): ?string
    {
        return $this->createdon;
    }

    /**
     * Sets Createdon.
     * The date and time of the change request.
     *
     * @maps createdon
     */
    public function setCreatedon(?string $createdon): void
    {
        $this->createdon = $createdon;
    }

    /**
     * Returns Deviceid.
     * The device’s ThingSpace UUID.
     */
    public function getDeviceid(): ?string
    {
        return $this->deviceid;
    }

    /**
     * Sets Deviceid.
     * The device’s ThingSpace UUID.
     *
     * @maps deviceid
     */
    public function setDeviceid(?string $deviceid): void
    {
        $this->deviceid = $deviceid;
    }

    /**
     * Returns Fields.
     * List of fields affected by the event.
     */
    public function getFields(): ?Fields2
    {
        return $this->fields;
    }

    /**
     * Sets Fields.
     * List of fields affected by the event.
     *
     * @maps fields
     */
    public function setFields(?Fields2 $fields): void
    {
        $this->fields = $fields;
    }

    /**
     * Returns Id.
     * The unique ID of this ts.event.configuration event.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The unique ID of this ts.event.configuration event.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Kind.
     * The kind of the ThingSpace resource that is being reported; “ts.event.configuration” for device
     * configuration changes.
     */
    public function getKind(): ?string
    {
        return $this->kind;
    }

    /**
     * Sets Kind.
     * The kind of the ThingSpace resource that is being reported; “ts.event.configuration” for device
     * configuration changes.
     *
     * @maps kind
     */
    public function setKind(?string $kind): void
    {
        $this->kind = $kind;
    }

    /**
     * Returns Lastupdated.
     * The date and time that the event was last updated.
     */
    public function getLastupdated(): ?string
    {
        return $this->lastupdated;
    }

    /**
     * Sets Lastupdated.
     * The date and time that the event was last updated.
     *
     * @maps lastupdated
     */
    public function setLastupdated(?string $lastupdated): void
    {
        $this->lastupdated = $lastupdated;
    }

    /**
     * Returns Name.
     * The name of the event
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * The name of the event
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns State.
     * The current status of the request.
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * Sets State.
     * The current status of the request.
     *
     * @maps state
     */
    public function setState(?string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Tagids.
     * UUIDs of tag resources that are applied to this device.
     *
     * @return string[]|null
     */
    public function getTagids(): ?array
    {
        return $this->tagids;
    }

    /**
     * Sets Tagids.
     * UUIDs of tag resources that are applied to this device.
     *
     * @maps tagids
     *
     * @param string[]|null $tagids
     */
    public function setTagids(?array $tagids): void
    {
        $this->tagids = $tagids;
    }

    /**
     * Returns Transactionid.
     * transaction id
     */
    public function getTransactionid(): ?string
    {
        return $this->transactionid;
    }

    /**
     * Sets Transactionid.
     * transaction id
     *
     * @maps transactionid
     */
    public function setTransactionid(?string $transactionid): void
    {
        $this->transactionid = $transactionid;
    }

    /**
     * Returns Version.
     * The version of the resource.
     */
    public function getVersion(): ?string
    {
        return $this->version;
    }

    /**
     * Sets Version.
     * The version of the resource.
     *
     * @maps version
     */
    public function setVersion(?string $version): void
    {
        $this->version = $version;
    }

    /**
     * Returns Versionid.
     * The version of the resource.
     */
    public function getVersionid(): ?string
    {
        return $this->versionid;
    }

    /**
     * Sets Versionid.
     * The version of the resource.
     *
     * @maps versionid
     */
    public function setVersionid(?string $versionid): void
    {
        $this->versionid = $versionid;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->action)) {
            $json['action']        = $this->action;
        }
        if (isset($this->createdon)) {
            $json['createdon']     = $this->createdon;
        }
        if (isset($this->deviceid)) {
            $json['deviceid']      = $this->deviceid;
        }
        if (isset($this->fields)) {
            $json['fields']        = $this->fields;
        }
        if (isset($this->id)) {
            $json['id']            = $this->id;
        }
        if (isset($this->kind)) {
            $json['kind']          = $this->kind;
        }
        if (isset($this->lastupdated)) {
            $json['lastupdated']   = $this->lastupdated;
        }
        if (isset($this->name)) {
            $json['name']          = $this->name;
        }
        if (isset($this->state)) {
            $json['state']         = $this->state;
        }
        if (isset($this->tagids)) {
            $json['tagids']        = $this->tagids;
        }
        if (isset($this->transactionid)) {
            $json['transactionid'] = $this->transactionid;
        }
        if (isset($this->version)) {
            $json['version']       = $this->version;
        }
        if (isset($this->versionid)) {
            $json['versionid']     = $this->versionid;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
