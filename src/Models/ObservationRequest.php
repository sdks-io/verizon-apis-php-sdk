<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Used to define callbacks including the device identity, the attribute names, corresponding attribute
 * values and the date/timestamp of when the observation was made.
 */
class ObservationRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $accountName;

    /**
     * @var Device[]
     */
    private $devices;

    /**
     * @var ObservationRequestAttribute[]
     */
    private $attributes;

    /**
     * @var NumericalData|null
     */
    private $frequency;

    /**
     * @var NumericalData|null
     */
    private $duration;

    /**
     * @param string $accountName
     * @param Device[] $devices
     * @param ObservationRequestAttribute[] $attributes
     */
    public function __construct(string $accountName, array $devices, array $attributes)
    {
        $this->accountName = $accountName;
        $this->devices = $devices;
        $this->attributes = $attributes;
    }

    /**
     * Returns Account Name.
     * Account identifier in "##########-#####".
     */
    public function getAccountName(): string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * Account identifier in "##########-#####".
     *
     * @required
     * @maps accountName
     */
    public function setAccountName(string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Devices.
     * List of devices.
     *
     * @return Device[]
     */
    public function getDevices(): array
    {
        return $this->devices;
    }

    /**
     * Sets Devices.
     * List of devices.
     *
     * @required
     * @maps devices
     *
     * @param Device[] $devices
     */
    public function setDevices(array $devices): void
    {
        $this->devices = $devices;
    }

    /**
     * Returns Attributes.
     * Attributes are streaming RF parameters that you want to observe.
     *
     * @return ObservationRequestAttribute[]
     */
    public function getAttributes(): array
    {
        return $this->attributes;
    }

    /**
     * Sets Attributes.
     * Attributes are streaming RF parameters that you want to observe.
     *
     * @required
     * @maps attributes
     *
     * @param ObservationRequestAttribute[] $attributes
     */
    public function setAttributes(array $attributes): void
    {
        $this->attributes = $attributes;
    }

    /**
     * Returns Frequency.
     * Describes value and unit of time.
     */
    public function getFrequency(): ?NumericalData
    {
        return $this->frequency;
    }

    /**
     * Sets Frequency.
     * Describes value and unit of time.
     *
     * @maps frequency
     */
    public function setFrequency(?NumericalData $frequency): void
    {
        $this->frequency = $frequency;
    }

    /**
     * Returns Duration.
     * Describes value and unit of time.
     */
    public function getDuration(): ?NumericalData
    {
        return $this->duration;
    }

    /**
     * Sets Duration.
     * Describes value and unit of time.
     *
     * @maps duration
     */
    public function setDuration(?NumericalData $duration): void
    {
        $this->duration = $duration;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['accountName']   = $this->accountName;
        $json['devices']       = $this->devices;
        $json['attributes']    = $this->attributes;
        if (isset($this->frequency)) {
            $json['frequency'] = $this->frequency;
        }
        if (isset($this->duration)) {
            $json['duration']  = $this->duration;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
