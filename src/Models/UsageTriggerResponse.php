<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

class UsageTriggerResponse implements \JsonSerializable
{
    /**
     * @var string
     */
    private $triggerId;

    /**
     * @var string
     */
    private $triggerName;

    /**
     * @var string
     */
    private $accountName;

    /**
     * @var string
     */
    private $serviceName;

    /**
     * @var string
     */
    private $thresholdValue;

    /**
     * @var bool
     */
    private $allowExcess;

    /**
     * @var bool
     */
    private $sendSmsNotification;

    /**
     * @var string
     */
    private $smsPhoneNumbers;

    /**
     * @var bool
     */
    private $sendEmailNotification;

    /**
     * @var string
     */
    private $emailAddresses;

    /**
     * @var string
     */
    private $createDate;

    /**
     * @var string
     */
    private $updateDate;

    /**
     * @param string $triggerId
     * @param string $triggerName
     * @param string $accountName
     * @param string $serviceName
     * @param string $thresholdValue
     * @param bool $allowExcess
     * @param bool $sendSmsNotification
     * @param string $smsPhoneNumbers
     * @param bool $sendEmailNotification
     * @param string $emailAddresses
     * @param string $createDate
     * @param string $updateDate
     */
    public function __construct(
        string $triggerId,
        string $triggerName,
        string $accountName,
        string $serviceName,
        string $thresholdValue,
        bool $allowExcess,
        bool $sendSmsNotification,
        string $smsPhoneNumbers,
        bool $sendEmailNotification,
        string $emailAddresses,
        string $createDate,
        string $updateDate
    ) {
        $this->triggerId = $triggerId;
        $this->triggerName = $triggerName;
        $this->accountName = $accountName;
        $this->serviceName = $serviceName;
        $this->thresholdValue = $thresholdValue;
        $this->allowExcess = $allowExcess;
        $this->sendSmsNotification = $sendSmsNotification;
        $this->smsPhoneNumbers = $smsPhoneNumbers;
        $this->sendEmailNotification = $sendEmailNotification;
        $this->emailAddresses = $emailAddresses;
        $this->createDate = $createDate;
        $this->updateDate = $updateDate;
    }

    /**
     * Returns Trigger Id.
     * Unique usage triggerId
     */
    public function getTriggerId(): string
    {
        return $this->triggerId;
    }

    /**
     * Sets Trigger Id.
     * Unique usage triggerId
     *
     * @required
     * @maps triggerId
     */
    public function setTriggerId(string $triggerId): void
    {
        $this->triggerId = $triggerId;
    }

    /**
     * Returns Trigger Name.
     * Usage trigger name
     */
    public function getTriggerName(): string
    {
        return $this->triggerName;
    }

    /**
     * Sets Trigger Name.
     * Usage trigger name
     *
     * @required
     * @maps triggerName
     */
    public function setTriggerName(string $triggerName): void
    {
        $this->triggerName = $triggerName;
    }

    /**
     * Returns Account Name.
     * Account name
     */
    public function getAccountName(): string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * Account name
     *
     * @required
     * @maps accountName
     */
    public function setAccountName(string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Service Name.
     * Service name
     */
    public function getServiceName(): string
    {
        return $this->serviceName;
    }

    /**
     * Sets Service Name.
     * Service name
     *
     * @required
     * @maps serviceName
     * @factory \VerizonLib\Models\ServiceNameEnum::checkValue
     */
    public function setServiceName(string $serviceName): void
    {
        $this->serviceName = $serviceName;
    }

    /**
     * Returns Threshold Value.
     * Percent of subscription at which trigger will send an alert
     */
    public function getThresholdValue(): string
    {
        return $this->thresholdValue;
    }

    /**
     * Sets Threshold Value.
     * Percent of subscription at which trigger will send an alert
     *
     * @required
     * @maps thresholdValue
     */
    public function setThresholdValue(string $thresholdValue): void
    {
        $this->thresholdValue = $thresholdValue;
    }

    /**
     * Returns Allow Excess.
     * allowExcess determines whether to restrict usage after exceeds limits
     */
    public function getAllowExcess(): bool
    {
        return $this->allowExcess;
    }

    /**
     * Sets Allow Excess.
     * allowExcess determines whether to restrict usage after exceeds limits
     *
     * @required
     * @maps allowExcess
     */
    public function setAllowExcess(bool $allowExcess): void
    {
        $this->allowExcess = $allowExcess;
    }

    /**
     * Returns Send Sms Notification.
     * Send SMS (text) alerts when the thresholdValue is reached.
     */
    public function getSendSmsNotification(): bool
    {
        return $this->sendSmsNotification;
    }

    /**
     * Sets Send Sms Notification.
     * Send SMS (text) alerts when the thresholdValue is reached.
     *
     * @required
     * @maps sendSmsNotification
     */
    public function setSendSmsNotification(bool $sendSmsNotification): void
    {
        $this->sendSmsNotification = $sendSmsNotification;
    }

    /**
     * Returns Sms Phone Numbers.
     * comma seperated value of list of Phone numbers for SMS notifications
     */
    public function getSmsPhoneNumbers(): string
    {
        return $this->smsPhoneNumbers;
    }

    /**
     * Sets Sms Phone Numbers.
     * comma seperated value of list of Phone numbers for SMS notifications
     *
     * @required
     * @maps smsPhoneNumbers
     */
    public function setSmsPhoneNumbers(string $smsPhoneNumbers): void
    {
        $this->smsPhoneNumbers = $smsPhoneNumbers;
    }

    /**
     * Returns Send Email Notification.
     * Send email alerts when the thresholdValue is reached.
     */
    public function getSendEmailNotification(): bool
    {
        return $this->sendEmailNotification;
    }

    /**
     * Sets Send Email Notification.
     * Send email alerts when the thresholdValue is reached.
     *
     * @required
     * @maps sendEmailNotification
     */
    public function setSendEmailNotification(bool $sendEmailNotification): void
    {
        $this->sendEmailNotification = $sendEmailNotification;
    }

    /**
     * Returns Email Addresses.
     * comma seperated value of list of Email addresses for Email notifications
     */
    public function getEmailAddresses(): string
    {
        return $this->emailAddresses;
    }

    /**
     * Sets Email Addresses.
     * comma seperated value of list of Email addresses for Email notifications
     *
     * @required
     * @maps emailAddresses
     */
    public function setEmailAddresses(string $emailAddresses): void
    {
        $this->emailAddresses = $emailAddresses;
    }

    /**
     * Returns Create Date.
     * UTC Date when the usage trigger was created
     */
    public function getCreateDate(): string
    {
        return $this->createDate;
    }

    /**
     * Sets Create Date.
     * UTC Date when the usage trigger was created
     *
     * @required
     * @maps createDate
     */
    public function setCreateDate(string $createDate): void
    {
        $this->createDate = $createDate;
    }

    /**
     * Returns Update Date.
     * UTC Date when the usage trigger was last updated
     */
    public function getUpdateDate(): string
    {
        return $this->updateDate;
    }

    /**
     * Sets Update Date.
     * UTC Date when the usage trigger was last updated
     *
     * @required
     * @maps updateDate
     */
    public function setUpdateDate(string $updateDate): void
    {
        $this->updateDate = $updateDate;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['triggerId']             = $this->triggerId;
        $json['triggerName']           = $this->triggerName;
        $json['accountName']           = $this->accountName;
        $json['serviceName']           = ServiceNameEnum::checkValue($this->serviceName);
        $json['thresholdValue']        = $this->thresholdValue;
        $json['allowExcess']           = $this->allowExcess;
        $json['sendSmsNotification']   = $this->sendSmsNotification;
        $json['smsPhoneNumbers']       = $this->smsPhoneNumbers;
        $json['sendEmailNotification'] = $this->sendEmailNotification;
        $json['emailAddresses']        = $this->emailAddresses;
        $json['createDate']            = $this->createDate;
        $json['updateDate']            = $this->updateDate;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
