<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Request to send SMS.
 */
class SMSSendRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $accountName;

    /**
     * @var string
     */
    private $smsMessage;

    /**
     * @var CustomFields[]|null
     */
    private $customFields;

    /**
     * @var string|null
     */
    private $dataEncoding;

    /**
     * @var DeviceId[]|null
     */
    private $deviceIds;

    /**
     * @var string|null
     */
    private $groupName;

    /**
     * @var string|null
     */
    private $servicePlan;

    /**
     * @param string $accountName
     * @param string $smsMessage
     */
    public function __construct(string $accountName, string $smsMessage)
    {
        $this->accountName = $accountName;
        $this->smsMessage = $smsMessage;
    }

    /**
     * Returns Account Name.
     * The name of a billing account.
     */
    public function getAccountName(): string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * The name of a billing account.
     *
     * @required
     * @maps accountName
     */
    public function setAccountName(string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Sms Message.
     * The contents of the SMS message. The SMS message is limited to 160 characters in 7-bit format, or
     * 140 characters in 8-bit format.
     */
    public function getSmsMessage(): string
    {
        return $this->smsMessage;
    }

    /**
     * Sets Sms Message.
     * The contents of the SMS message. The SMS message is limited to 160 characters in 7-bit format, or
     * 140 characters in 8-bit format.
     *
     * @required
     * @maps smsMessage
     */
    public function setSmsMessage(string $smsMessage): void
    {
        $this->smsMessage = $smsMessage;
    }

    /**
     * Returns Custom Fields.
     * The names and values of custom fields, if you want to only include devices that have matching custom
     * fields.
     *
     * @return CustomFields[]|null
     */
    public function getCustomFields(): ?array
    {
        return $this->customFields;
    }

    /**
     * Sets Custom Fields.
     * The names and values of custom fields, if you want to only include devices that have matching custom
     * fields.
     *
     * @maps customFields
     *
     * @param CustomFields[]|null $customFields
     */
    public function setCustomFields(?array $customFields): void
    {
        $this->customFields = $customFields;
    }

    /**
     * Returns Data Encoding.
     * The SMS message encoding, which can be 7-bit (default), 8-bit-ASCII, 8-bit-UTF-8, 8-bit-DATA.
     */
    public function getDataEncoding(): ?string
    {
        return $this->dataEncoding;
    }

    /**
     * Sets Data Encoding.
     * The SMS message encoding, which can be 7-bit (default), 8-bit-ASCII, 8-bit-UTF-8, 8-bit-DATA.
     *
     * @maps dataEncoding
     */
    public function setDataEncoding(?string $dataEncoding): void
    {
        $this->dataEncoding = $dataEncoding;
    }

    /**
     * Returns Device Ids.
     * The devices that you want to send the message to, specified by device identifier.
     *
     * @return DeviceId[]|null
     */
    public function getDeviceIds(): ?array
    {
        return $this->deviceIds;
    }

    /**
     * Sets Device Ids.
     * The devices that you want to send the message to, specified by device identifier.
     *
     * @maps deviceIds
     *
     * @param DeviceId[]|null $deviceIds
     */
    public function setDeviceIds(?array $deviceIds): void
    {
        $this->deviceIds = $deviceIds;
    }

    /**
     * Returns Group Name.
     * The name of a device group, if you want to send the SMS message to all devices in the device group.
     */
    public function getGroupName(): ?string
    {
        return $this->groupName;
    }

    /**
     * Sets Group Name.
     * The name of a device group, if you want to send the SMS message to all devices in the device group.
     *
     * @maps groupName
     */
    public function setGroupName(?string $groupName): void
    {
        $this->groupName = $groupName;
    }

    /**
     * Returns Service Plan.
     * The name of a service plan, if you want to only include devices that have that service plan.
     */
    public function getServicePlan(): ?string
    {
        return $this->servicePlan;
    }

    /**
     * Sets Service Plan.
     * The name of a service plan, if you want to only include devices that have that service plan.
     *
     * @maps servicePlan
     */
    public function setServicePlan(?string $servicePlan): void
    {
        $this->servicePlan = $servicePlan;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['accountName']      = $this->accountName;
        $json['smsMessage']       = $this->smsMessage;
        if (isset($this->customFields)) {
            $json['customFields'] = $this->customFields;
        }
        if (isset($this->dataEncoding)) {
            $json['dataEncoding'] = $this->dataEncoding;
        }
        if (isset($this->deviceIds)) {
            $json['deviceIds']    = $this->deviceIds;
        }
        if (isset($this->groupName)) {
            $json['groupName']    = $this->groupName;
        }
        if (isset($this->servicePlan)) {
            $json['servicePlan']  = $this->servicePlan;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
