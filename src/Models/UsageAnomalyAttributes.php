<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * The details of the UsageAnomaly trigger.
 */
class UsageAnomalyAttributes implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $accountNames;

    /**
     * @var string|null
     */
    private $deviceGroup;

    /**
     * @var bool|null
     */
    private $includeAbnormal;

    /**
     * @var bool|null
     */
    private $includeVeryAbnormal;

    /**
     * @var bool|null
     */
    private $includeUnderExpectedUsage;

    /**
     * @var bool|null
     */
    private $includeOverExpectedUsage;

    /**
     * Returns Account Names.
     * The Verizon billing account associated with the anomaly triggers for this trigger to be active for
     * devices in those accounts. An account name is usually numeric, and must include any leading zeros.
     */
    public function getAccountNames(): ?string
    {
        return $this->accountNames;
    }

    /**
     * Sets Account Names.
     * The Verizon billing account associated with the anomaly triggers for this trigger to be active for
     * devices in those accounts. An account name is usually numeric, and must include any leading zeros.
     *
     * @maps accountNames
     */
    public function setAccountNames(?string $accountNames): void
    {
        $this->accountNames = $accountNames;
    }

    /**
     * Returns Device Group.
     * The names of device groups associated with the anomaly triggers for this trigger to be active for
     * devices in those groups.
     */
    public function getDeviceGroup(): ?string
    {
        return $this->deviceGroup;
    }

    /**
     * Sets Device Group.
     * The names of device groups associated with the anomaly triggers for this trigger to be active for
     * devices in those groups.
     *
     * @maps deviceGroup
     */
    public function setDeviceGroup(?string $deviceGroup): void
    {
        $this->deviceGroup = $deviceGroup;
    }

    /**
     * Returns Include Abnormal.
     * Whether or not to include anomalies classified as 'abnormal'.<br />true<br />false<br
     * />Classification is set as part of ThingSpace Intelligence anomaly detection settings.
     */
    public function getIncludeAbnormal(): ?bool
    {
        return $this->includeAbnormal;
    }

    /**
     * Sets Include Abnormal.
     * Whether or not to include anomalies classified as 'abnormal'.<br />true<br />false<br
     * />Classification is set as part of ThingSpace Intelligence anomaly detection settings.
     *
     * @maps includeAbnormal
     */
    public function setIncludeAbnormal(?bool $includeAbnormal): void
    {
        $this->includeAbnormal = $includeAbnormal;
    }

    /**
     * Returns Include Very Abnormal.
     * Whether or not to include anomalies classified as 'very abnormal'.<br />true<br />false<br
     * />Classification is set as part of ThingSpace Intelligence anomaly detection settings.
     */
    public function getIncludeVeryAbnormal(): ?bool
    {
        return $this->includeVeryAbnormal;
    }

    /**
     * Sets Include Very Abnormal.
     * Whether or not to include anomalies classified as 'very abnormal'.<br />true<br />false<br
     * />Classification is set as part of ThingSpace Intelligence anomaly detection settings.
     *
     * @maps includeVeryAbnormal
     */
    public function setIncludeVeryAbnormal(?bool $includeVeryAbnormal): void
    {
        $this->includeVeryAbnormal = $includeVeryAbnormal;
    }

    /**
     * Returns Include Under Expected Usage.
     * Whether or not to include anomalies that are directionally under the expected usage.<br />true<br
     * />false.
     */
    public function getIncludeUnderExpectedUsage(): ?bool
    {
        return $this->includeUnderExpectedUsage;
    }

    /**
     * Sets Include Under Expected Usage.
     * Whether or not to include anomalies that are directionally under the expected usage.<br />true<br
     * />false.
     *
     * @maps includeUnderExpectedUsage
     */
    public function setIncludeUnderExpectedUsage(?bool $includeUnderExpectedUsage): void
    {
        $this->includeUnderExpectedUsage = $includeUnderExpectedUsage;
    }

    /**
     * Returns Include Over Expected Usage.
     * Whether or not to include anomalies that are directionally over the expected usage. <br />true<br
     * />false.
     */
    public function getIncludeOverExpectedUsage(): ?bool
    {
        return $this->includeOverExpectedUsage;
    }

    /**
     * Sets Include Over Expected Usage.
     * Whether or not to include anomalies that are directionally over the expected usage. <br />true<br
     * />false.
     *
     * @maps includeOverExpectedUsage
     */
    public function setIncludeOverExpectedUsage(?bool $includeOverExpectedUsage): void
    {
        $this->includeOverExpectedUsage = $includeOverExpectedUsage;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountNames)) {
            $json['accountNames']              = $this->accountNames;
        }
        if (isset($this->deviceGroup)) {
            $json['deviceGroup']               = $this->deviceGroup;
        }
        if (isset($this->includeAbnormal)) {
            $json['includeAbnormal']           = $this->includeAbnormal;
        }
        if (isset($this->includeVeryAbnormal)) {
            $json['includeVeryAbnormal']       = $this->includeVeryAbnormal;
        }
        if (isset($this->includeUnderExpectedUsage)) {
            $json['includeUnderExpectedUsage'] = $this->includeUnderExpectedUsage;
        }
        if (isset($this->includeOverExpectedUsage)) {
            $json['includeOverExpectedUsage']  = $this->includeOverExpectedUsage;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
