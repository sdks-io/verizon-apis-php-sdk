<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Information representing a certain geographical or logical area where MEC resources and services are
 * provided.
 */
class Region implements \JsonSerializable
{
    /**
     * @var array
     */
    private $regionId = [];

    /**
     * @var array
     */
    private $name = [];

    /**
     * @var array
     */
    private $countryCode = [];

    /**
     * @var array
     */
    private $metro = [];

    /**
     * @var array
     */
    private $area = [];

    /**
     * Returns Region Id.
     * The unique identifier of the region.
     */
    public function getRegionId(): ?string
    {
        if (count($this->regionId) == 0) {
            return null;
        }
        return $this->regionId['value'];
    }

    /**
     * Sets Region Id.
     * The unique identifier of the region.
     *
     * @maps regionId
     */
    public function setRegionId(?string $regionId): void
    {
        $this->regionId['value'] = $regionId;
    }

    /**
     * Unsets Region Id.
     * The unique identifier of the region.
     */
    public function unsetRegionId(): void
    {
        $this->regionId = [];
    }

    /**
     * Returns Name.
     * A relevant and identifiable region name.
     */
    public function getName(): ?string
    {
        if (count($this->name) == 0) {
            return null;
        }
        return $this->name['value'];
    }

    /**
     * Sets Name.
     * A relevant and identifiable region name.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name['value'] = $name;
    }

    /**
     * Unsets Name.
     * A relevant and identifiable region name.
     */
    public function unsetName(): void
    {
        $this->name = [];
    }

    /**
     * Returns Country Code.
     * A two-character alpha code for a country, based on ISO 3166-1 alpha-2. This is future functionality,
     * so the value returned is 'null'.
     */
    public function getCountryCode(): ?string
    {
        if (count($this->countryCode) == 0) {
            return null;
        }
        return $this->countryCode['value'];
    }

    /**
     * Sets Country Code.
     * A two-character alpha code for a country, based on ISO 3166-1 alpha-2. This is future functionality,
     * so the value returned is 'null'.
     *
     * @maps countryCode
     */
    public function setCountryCode(?string $countryCode): void
    {
        $this->countryCode['value'] = $countryCode;
    }

    /**
     * Unsets Country Code.
     * A two-character alpha code for a country, based on ISO 3166-1 alpha-2. This is future functionality,
     * so the value returned is 'null'.
     */
    public function unsetCountryCode(): void
    {
        $this->countryCode = [];
    }

    /**
     * Returns Metro.
     * The metropolitan area or 'City' value.  This is future functionality, so the value returned is
     * 'null'.
     */
    public function getMetro(): ?string
    {
        if (count($this->metro) == 0) {
            return null;
        }
        return $this->metro['value'];
    }

    /**
     * Sets Metro.
     * The metropolitan area or 'City' value.  This is future functionality, so the value returned is
     * 'null'.
     *
     * @maps metro
     */
    public function setMetro(?string $metro): void
    {
        $this->metro['value'] = $metro;
    }

    /**
     * Unsets Metro.
     * The metropolitan area or 'City' value.  This is future functionality, so the value returned is
     * 'null'.
     */
    public function unsetMetro(): void
    {
        $this->metro = [];
    }

    /**
     * Returns Area.
     * This is a sub-set of 'City' and is similar to 'Zone'. This is future functionality, so the value
     * returned is 'null'.
     */
    public function getArea(): ?string
    {
        if (count($this->area) == 0) {
            return null;
        }
        return $this->area['value'];
    }

    /**
     * Sets Area.
     * This is a sub-set of 'City' and is similar to 'Zone'. This is future functionality, so the value
     * returned is 'null'.
     *
     * @maps area
     */
    public function setArea(?string $area): void
    {
        $this->area['value'] = $area;
    }

    /**
     * Unsets Area.
     * This is a sub-set of 'City' and is similar to 'Zone'. This is future functionality, so the value
     * returned is 'null'.
     */
    public function unsetArea(): void
    {
        $this->area = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->regionId)) {
            $json['regionId']    = $this->regionId['value'];
        }
        if (!empty($this->name)) {
            $json['name']        = $this->name['value'];
        }
        if (!empty($this->countryCode)) {
            $json['countryCode'] = $this->countryCode['value'];
        }
        if (!empty($this->metro)) {
            $json['metro']       = $this->metro['value'];
        }
        if (!empty($this->area)) {
            $json['area']        = $this->area['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
