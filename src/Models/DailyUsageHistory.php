<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

class DailyUsageHistory implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $bytesUsed;

    /**
     * @var ExtendedAttribute[]|null
     */
    private $extendedAttributes;

    /**
     * @var string|null
     */
    private $servicePlan;

    /**
     * @var string|null
     */
    private $smsUsed;

    /**
     * @var string|null
     */
    private $source;

    /**
     * @var string|null
     */
    private $timestamp;

    /**
     * Returns Bytes Used.
     * the total data usage recorded in Bytes
     */
    public function getBytesUsed(): ?string
    {
        return $this->bytesUsed;
    }

    /**
     * Sets Bytes Used.
     * the total data usage recorded in Bytes
     *
     * @maps bytesUsed
     */
    public function setBytesUsed(?string $bytesUsed): void
    {
        $this->bytesUsed = $bytesUsed;
    }

    /**
     * Returns Extended Attributes.
     *
     * @return ExtendedAttribute[]|null
     */
    public function getExtendedAttributes(): ?array
    {
        return $this->extendedAttributes;
    }

    /**
     * Sets Extended Attributes.
     *
     * @maps extendedAttributes
     *
     * @param ExtendedAttribute[]|null $extendedAttributes
     */
    public function setExtendedAttributes(?array $extendedAttributes): void
    {
        $this->extendedAttributes = $extendedAttributes;
    }

    /**
     * Returns Service Plan.
     */
    public function getServicePlan(): ?string
    {
        return $this->servicePlan;
    }

    /**
     * Sets Service Plan.
     *
     * @maps servicePlan
     */
    public function setServicePlan(?string $servicePlan): void
    {
        $this->servicePlan = $servicePlan;
    }

    /**
     * Returns Sms Used.
     * The total number of SMS messages from and to the device
     */
    public function getSmsUsed(): ?string
    {
        return $this->smsUsed;
    }

    /**
     * Sets Sms Used.
     * The total number of SMS messages from and to the device
     *
     * @maps smsUsed
     */
    public function setSmsUsed(?string $smsUsed): void
    {
        $this->smsUsed = $smsUsed;
    }

    /**
     * Returns Source.
     * Where the collected data is being gathered from
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
     * Sets Source.
     * Where the collected data is being gathered from
     *
     * @maps source
     */
    public function setSource(?string $source): void
    {
        $this->source = $source;
    }

    /**
     * Returns Timestamp.
     * Timestamp of when the retrieved record was completed ($datetime)
     */
    public function getTimestamp(): ?string
    {
        return $this->timestamp;
    }

    /**
     * Sets Timestamp.
     * Timestamp of when the retrieved record was completed ($datetime)
     *
     * @maps timestamp
     */
    public function setTimestamp(?string $timestamp): void
    {
        $this->timestamp = $timestamp;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->bytesUsed)) {
            $json['bytesUsed']          = $this->bytesUsed;
        }
        if (isset($this->extendedAttributes)) {
            $json['extendedAttributes'] = $this->extendedAttributes;
        }
        if (isset($this->servicePlan)) {
            $json['servicePlan']        = $this->servicePlan;
        }
        if (isset($this->smsUsed)) {
            $json['smsUsed']            = $this->smsUsed;
        }
        if (isset($this->source)) {
            $json['source']             = $this->source;
        }
        if (isset($this->timestamp)) {
            $json['timestamp']          = $this->timestamp;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
