<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Device information.
 */
class V3AccountDevice implements \JsonSerializable
{
    /**
     * @var string
     */
    private $deviceId;

    /**
     * @var string
     */
    private $mdn;

    /**
     * @var string
     */
    private $model;

    /**
     * @var string
     */
    private $make;

    /**
     * @var string
     */
    private $firmware;

    /**
     * @var bool
     */
    private $fotaEligible;

    /**
     * @var string
     */
    private $status;

    /**
     * @var bool
     */
    private $licenseAssigned;

    /**
     * @var string
     */
    private $protocol;

    /**
     * @var V3SoftwareInfo[]
     */
    private $softwareList;

    /**
     * @var V3SoftwareInfo[]|null
     */
    private $fileList;

    /**
     * @var string|null
     */
    private $createTime;

    /**
     * @var string|null
     */
    private $upgradeTime;

    /**
     * @var string|null
     */
    private $updateTime;

    /**
     * @var string|null
     */
    private $refreshTime;

    /**
     * @param string $deviceId
     * @param string $mdn
     * @param string $model
     * @param string $make
     * @param string $firmware
     * @param bool $fotaEligible
     * @param string $status
     * @param bool $licenseAssigned
     * @param string $protocol
     * @param V3SoftwareInfo[] $softwareList
     */
    public function __construct(
        string $deviceId,
        string $mdn,
        string $model,
        string $make,
        string $firmware,
        bool $fotaEligible,
        string $status,
        bool $licenseAssigned,
        string $protocol,
        array $softwareList
    ) {
        $this->deviceId = $deviceId;
        $this->mdn = $mdn;
        $this->model = $model;
        $this->make = $make;
        $this->firmware = $firmware;
        $this->fotaEligible = $fotaEligible;
        $this->status = $status;
        $this->licenseAssigned = $licenseAssigned;
        $this->protocol = $protocol;
        $this->softwareList = $softwareList;
    }

    /**
     * Returns Device Id.
     * Device identifier.
     */
    public function getDeviceId(): string
    {
        return $this->deviceId;
    }

    /**
     * Sets Device Id.
     * Device identifier.
     *
     * @required
     * @maps deviceId
     */
    public function setDeviceId(string $deviceId): void
    {
        $this->deviceId = $deviceId;
    }

    /**
     * Returns Mdn.
     * MDN.
     */
    public function getMdn(): string
    {
        return $this->mdn;
    }

    /**
     * Sets Mdn.
     * MDN.
     *
     * @required
     * @maps mdn
     */
    public function setMdn(string $mdn): void
    {
        $this->mdn = $mdn;
    }

    /**
     * Returns Model.
     * Device model.
     */
    public function getModel(): string
    {
        return $this->model;
    }

    /**
     * Sets Model.
     * Device model.
     *
     * @required
     * @maps model
     */
    public function setModel(string $model): void
    {
        $this->model = $model;
    }

    /**
     * Returns Make.
     * Device make.
     */
    public function getMake(): string
    {
        return $this->make;
    }

    /**
     * Sets Make.
     * Device make.
     *
     * @required
     * @maps make
     */
    public function setMake(string $make): void
    {
        $this->make = $make;
    }

    /**
     * Returns Firmware.
     * Device firmware version.
     */
    public function getFirmware(): string
    {
        return $this->firmware;
    }

    /**
     * Sets Firmware.
     * Device firmware version.
     *
     * @required
     * @maps firmware
     */
    public function setFirmware(string $firmware): void
    {
        $this->firmware = $firmware;
    }

    /**
     * Returns Fota Eligible.
     * Value=true if the device software can be upgraded over the air using the Software Management
     * Services API.
     */
    public function getFotaEligible(): bool
    {
        return $this->fotaEligible;
    }

    /**
     * Sets Fota Eligible.
     * Value=true if the device software can be upgraded over the air using the Software Management
     * Services API.
     *
     * @required
     * @maps fotaEligible
     */
    public function setFotaEligible(bool $fotaEligible): void
    {
        $this->fotaEligible = $fotaEligible;
    }

    /**
     * Returns Status.
     * Device status.
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Device status.
     *
     * @required
     * @maps status
     */
    public function setStatus(string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns License Assigned.
     * License assigned device.
     */
    public function getLicenseAssigned(): bool
    {
        return $this->licenseAssigned;
    }

    /**
     * Sets License Assigned.
     * License assigned device.
     *
     * @required
     * @maps licenseAssigned
     */
    public function setLicenseAssigned(bool $licenseAssigned): void
    {
        $this->licenseAssigned = $licenseAssigned;
    }

    /**
     * Returns Protocol.
     * Firmware protocol. Valid values include: LWM2M, OMADM, HTTP or NONE.
     */
    public function getProtocol(): string
    {
        return $this->protocol;
    }

    /**
     * Sets Protocol.
     * Firmware protocol. Valid values include: LWM2M, OMADM, HTTP or NONE.
     *
     * @required
     * @maps protocol
     */
    public function setProtocol(string $protocol): void
    {
        $this->protocol = $protocol;
    }

    /**
     * Returns Software List.
     * List of sofware.
     *
     * @return V3SoftwareInfo[]
     */
    public function getSoftwareList(): array
    {
        return $this->softwareList;
    }

    /**
     * Sets Software List.
     * List of sofware.
     *
     * @required
     * @maps softwareList
     *
     * @param V3SoftwareInfo[] $softwareList
     */
    public function setSoftwareList(array $softwareList): void
    {
        $this->softwareList = $softwareList;
    }

    /**
     * Returns File List.
     * List of files.
     *
     * @return V3SoftwareInfo[]|null
     */
    public function getFileList(): ?array
    {
        return $this->fileList;
    }

    /**
     * Sets File List.
     * List of files.
     *
     * @maps fileList
     *
     * @param V3SoftwareInfo[]|null $fileList
     */
    public function setFileList(?array $fileList): void
    {
        $this->fileList = $fileList;
    }

    /**
     * Returns Create Time.
     * The date and time of when the device is created.
     */
    public function getCreateTime(): ?string
    {
        return $this->createTime;
    }

    /**
     * Sets Create Time.
     * The date and time of when the device is created.
     *
     * @maps createTime
     */
    public function setCreateTime(?string $createTime): void
    {
        $this->createTime = $createTime;
    }

    /**
     * Returns Upgrade Time.
     * The date and time of when the device firmware or software is updated.
     */
    public function getUpgradeTime(): ?string
    {
        return $this->upgradeTime;
    }

    /**
     * Sets Upgrade Time.
     * The date and time of when the device firmware or software is updated.
     *
     * @maps upgradeTime
     */
    public function setUpgradeTime(?string $upgradeTime): void
    {
        $this->upgradeTime = $upgradeTime;
    }

    /**
     * Returns Update Time.
     * The date and time of when the device is updated.
     */
    public function getUpdateTime(): ?string
    {
        return $this->updateTime;
    }

    /**
     * Sets Update Time.
     * The date and time of when the device is updated.
     *
     * @maps updateTime
     */
    public function setUpdateTime(?string $updateTime): void
    {
        $this->updateTime = $updateTime;
    }

    /**
     * Returns Refresh Time.
     * The date and time of when the device is refreshed.
     */
    public function getRefreshTime(): ?string
    {
        return $this->refreshTime;
    }

    /**
     * Sets Refresh Time.
     * The date and time of when the device is refreshed.
     *
     * @maps refreshTime
     */
    public function setRefreshTime(?string $refreshTime): void
    {
        $this->refreshTime = $refreshTime;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['deviceId']        = $this->deviceId;
        $json['mdn']             = $this->mdn;
        $json['model']           = $this->model;
        $json['make']            = $this->make;
        $json['firmware']        = $this->firmware;
        $json['fotaEligible']    = $this->fotaEligible;
        $json['status']          = $this->status;
        $json['licenseAssigned'] = $this->licenseAssigned;
        $json['protocol']        = $this->protocol;
        $json['softwareList']    = $this->softwareList;
        if (isset($this->fileList)) {
            $json['fileList']    = $this->fileList;
        }
        if (isset($this->createTime)) {
            $json['createTime']  = $this->createTime;
        }
        if (isset($this->upgradeTime)) {
            $json['upgradeTime'] = $this->upgradeTime;
        }
        if (isset($this->updateTime)) {
            $json['updateTime']  = $this->updateTime;
        }
        if (isset($this->refreshTime)) {
            $json['refreshTime'] = $this->refreshTime;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
