<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

class DeploymentLocation implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $ern;

    /**
     * @var DeploymentLocationCluster|null
     */
    private $cluster;

    /**
     * @var DeploymentLocationNamespace|null
     */
    private $namespace;

    /**
     * Returns Ern.
     * Edge Resource Number.
     */
    public function getErn(): ?string
    {
        return $this->ern;
    }

    /**
     * Sets Ern.
     * Edge Resource Number.
     *
     * @maps ern
     */
    public function setErn(?string $ern): void
    {
        $this->ern = $ern;
    }

    /**
     * Returns Cluster.
     */
    public function getCluster(): ?DeploymentLocationCluster
    {
        return $this->cluster;
    }

    /**
     * Sets Cluster.
     *
     * @maps cluster
     */
    public function setCluster(?DeploymentLocationCluster $cluster): void
    {
        $this->cluster = $cluster;
    }

    /**
     * Returns Namespace.
     */
    public function getNamespace(): ?DeploymentLocationNamespace
    {
        return $this->namespace;
    }

    /**
     * Sets Namespace.
     *
     * @maps namespace
     */
    public function setNamespace(?DeploymentLocationNamespace $namespace): void
    {
        $this->namespace = $namespace;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->ern)) {
            $json['ern']       = $this->ern;
        }
        if (isset($this->cluster)) {
            $json['cluster']   = $this->cluster;
        }
        if (isset($this->namespace)) {
            $json['namespace'] = $this->namespace;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
