<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Request for getting an aggregated session report.
 */
class AggregateSessionReportRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $accountNumber;

    /**
     * @var string|null
     */
    private $startDate;

    /**
     * @var string|null
     */
    private $endDate;

    /**
     * @var string[]
     */
    private $imei;

    /**
     * @var array
     */
    private $deviceGroup = [];

    /**
     * @var array
     */
    private $deviceLabel = [];

    /**
     * @var array
     */
    private $dataPlan = [];

    /**
     * @var string|null
     */
    private $noSessionFlag;

    /**
     * @param string $accountNumber
     * @param string[] $imei
     */
    public function __construct(string $accountNumber, array $imei)
    {
        $this->accountNumber = $accountNumber;
        $this->imei = $imei;
    }

    /**
     * Returns Account Number.
     * The unique identifier for the account.
     */
    public function getAccountNumber(): string
    {
        return $this->accountNumber;
    }

    /**
     * Sets Account Number.
     * The unique identifier for the account.
     *
     * @required
     * @maps accountNumber
     */
    public function setAccountNumber(string $accountNumber): void
    {
        $this->accountNumber = $accountNumber;
    }

    /**
     * Returns Start Date.
     * Start date of session to include. If not specified  information will be shown from the earliest
     * available (180 days). Can be either date in ISO 8601 format or predefined constants.
     */
    public function getStartDate(): ?string
    {
        return $this->startDate;
    }

    /**
     * Sets Start Date.
     * Start date of session to include. If not specified  information will be shown from the earliest
     * available (180 days). Can be either date in ISO 8601 format or predefined constants.
     *
     * @maps startDate
     */
    public function setStartDate(?string $startDate): void
    {
        $this->startDate = $startDate;
    }

    /**
     * Returns End Date.
     * End date of session to include. If not specified  information will be shown to the latest available.
     * Can be either date in ISO 8601 format or predefined constants.
     */
    public function getEndDate(): ?string
    {
        return $this->endDate;
    }

    /**
     * Sets End Date.
     * End date of session to include. If not specified  information will be shown to the latest available.
     * Can be either date in ISO 8601 format or predefined constants.
     *
     * @maps endDate
     */
    public function setEndDate(?string $endDate): void
    {
        $this->endDate = $endDate;
    }

    /**
     * Returns Imei.
     * Devices for which return usage info. Could be 0, 1 or more. In case of 0 will return all devices
     * belonging to customer (except of filtered by other parameters).
     *
     * @return string[]
     */
    public function getImei(): array
    {
        return $this->imei;
    }

    /**
     * Sets Imei.
     * Devices for which return usage info. Could be 0, 1 or more. In case of 0 will return all devices
     * belonging to customer (except of filtered by other parameters).
     *
     * @required
     * @maps imei
     *
     * @param string[] $imei
     */
    public function setImei(array $imei): void
    {
        $this->imei = $imei;
    }

    /**
     * Returns Device Group.
     * User defined group name the devices are a member of.
     */
    public function getDeviceGroup(): ?string
    {
        if (count($this->deviceGroup) == 0) {
            return null;
        }
        return $this->deviceGroup['value'];
    }

    /**
     * Sets Device Group.
     * User defined group name the devices are a member of.
     *
     * @maps deviceGroup
     */
    public function setDeviceGroup(?string $deviceGroup): void
    {
        $this->deviceGroup['value'] = $deviceGroup;
    }

    /**
     * Unsets Device Group.
     * User defined group name the devices are a member of.
     */
    public function unsetDeviceGroup(): void
    {
        $this->deviceGroup = [];
    }

    /**
     * Returns Device Label.
     * Optional filter parameter.
     */
    public function getDeviceLabel(): ?string
    {
        if (count($this->deviceLabel) == 0) {
            return null;
        }
        return $this->deviceLabel['value'];
    }

    /**
     * Sets Device Label.
     * Optional filter parameter.
     *
     * @maps deviceLabel
     */
    public function setDeviceLabel(?string $deviceLabel): void
    {
        $this->deviceLabel['value'] = $deviceLabel;
    }

    /**
     * Unsets Device Label.
     * Optional filter parameter.
     */
    public function unsetDeviceLabel(): void
    {
        $this->deviceLabel = [];
    }

    /**
     * Returns Data Plan.
     * The data plan the devices beign queried belong to.
     */
    public function getDataPlan(): ?string
    {
        if (count($this->dataPlan) == 0) {
            return null;
        }
        return $this->dataPlan['value'];
    }

    /**
     * Sets Data Plan.
     * The data plan the devices beign queried belong to.
     *
     * @maps dataPlan
     */
    public function setDataPlan(?string $dataPlan): void
    {
        $this->dataPlan['value'] = $dataPlan;
    }

    /**
     * Unsets Data Plan.
     * The data plan the devices beign queried belong to.
     */
    public function unsetDataPlan(): void
    {
        $this->dataPlan = [];
    }

    /**
     * Returns No Session Flag.
     * Optional filter parameter which return only devices with no sessions.
     */
    public function getNoSessionFlag(): ?string
    {
        return $this->noSessionFlag;
    }

    /**
     * Sets No Session Flag.
     * Optional filter parameter which return only devices with no sessions.
     *
     * @maps noSessionFlag
     */
    public function setNoSessionFlag(?string $noSessionFlag): void
    {
        $this->noSessionFlag = $noSessionFlag;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['accountNumber']     = $this->accountNumber;
        if (isset($this->startDate)) {
            $json['startDate']     = $this->startDate;
        }
        if (isset($this->endDate)) {
            $json['endDate']       = $this->endDate;
        }
        $json['imei']              = $this->imei;
        if (!empty($this->deviceGroup)) {
            $json['deviceGroup']   = $this->deviceGroup['value'];
        }
        if (!empty($this->deviceLabel)) {
            $json['deviceLabel']   = $this->deviceLabel['value'];
        }
        if (!empty($this->dataPlan)) {
            $json['dataPlan']      = $this->dataPlan['value'];
        }
        if (isset($this->noSessionFlag)) {
            $json['noSessionFlag'] = $this->noSessionFlag;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
