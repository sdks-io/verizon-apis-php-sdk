<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Array of upgrade objects with the specified status.
 */
class FirmwareUpgrade implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string|null
     */
    private $accountName;

    /**
     * @var string|null
     */
    private $firmwareName;

    /**
     * @var string|null
     */
    private $firmwareTo;

    /**
     * @var string|null
     */
    private $startDate;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var FirmwareUpgradeDeviceListItem[]|null
     */
    private $deviceList;

    /**
     * Returns Id.
     * The unique identifier for this upgrade.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The unique identifier for this upgrade.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Account Name.
     * Account identifier in "##########-#####".
     */
    public function getAccountName(): ?string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * Account identifier in "##########-#####".
     *
     * @maps accountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Firmware Name.
     * The name of the firmware image that will be used for the upgrade.
     */
    public function getFirmwareName(): ?string
    {
        return $this->firmwareName;
    }

    /**
     * Sets Firmware Name.
     * The name of the firmware image that will be used for the upgrade.
     *
     * @maps firmwareName
     */
    public function setFirmwareName(?string $firmwareName): void
    {
        $this->firmwareName = $firmwareName;
    }

    /**
     * Returns Firmware To.
     * The name of the firmware version that will be on the devices after a successful upgrade.
     */
    public function getFirmwareTo(): ?string
    {
        return $this->firmwareTo;
    }

    /**
     * Sets Firmware To.
     * The name of the firmware version that will be on the devices after a successful upgrade.
     *
     * @maps firmwareTo
     */
    public function setFirmwareTo(?string $firmwareTo): void
    {
        $this->firmwareTo = $firmwareTo;
    }

    /**
     * Returns Start Date.
     * The intended start date for the upgrade.
     */
    public function getStartDate(): ?string
    {
        return $this->startDate;
    }

    /**
     * Sets Start Date.
     * The intended start date for the upgrade.
     *
     * @maps startDate
     */
    public function setStartDate(?string $startDate): void
    {
        $this->startDate = $startDate;
    }

    /**
     * Returns Status.
     * The current status of the upgrade.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * The current status of the upgrade.
     *
     * @maps status
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Device List.
     * A JSON object for each device that was included in the upgrade, showing the device IMEI, the status
     * of the upgrade, and additional information about the status.
     *
     * @return FirmwareUpgradeDeviceListItem[]|null
     */
    public function getDeviceList(): ?array
    {
        return $this->deviceList;
    }

    /**
     * Sets Device List.
     * A JSON object for each device that was included in the upgrade, showing the device IMEI, the status
     * of the upgrade, and additional information about the status.
     *
     * @maps deviceList
     *
     * @param FirmwareUpgradeDeviceListItem[]|null $deviceList
     */
    public function setDeviceList(?array $deviceList): void
    {
        $this->deviceList = $deviceList;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']           = $this->id;
        }
        if (isset($this->accountName)) {
            $json['accountName']  = $this->accountName;
        }
        if (isset($this->firmwareName)) {
            $json['firmwareName'] = $this->firmwareName;
        }
        if (isset($this->firmwareTo)) {
            $json['firmwareTo']   = $this->firmwareTo;
        }
        if (isset($this->startDate)) {
            $json['startDate']    = $this->startDate;
        }
        if (isset($this->status)) {
            $json['status']       = $this->status;
        }
        if (isset($this->deviceList)) {
            $json['deviceList']   = $this->deviceList;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
