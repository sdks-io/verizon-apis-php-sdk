<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

class Cloud implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $provider;

    /**
     * @var string|null
     */
    private $distribution;

    /**
     * @var CommonConfiguration|null
     */
    private $commonConfig;

    /**
     * @var ClusterConfiguration|null
     */
    private $clusterConfig;

    /**
     * @var NodeConfiguration|null
     */
    private $nodeConfig;

    /**
     * @var NodeConfiguration[]|null
     */
    private $nodeConfigs;

    /**
     * @var AdvanceConfiguration|null
     */
    private $advanceConfig;

    /**
     * Returns Provider.
     * Cloud provider where you plan to provision and operate your Kubernetes cluster.
     */
    public function getProvider(): ?string
    {
        return $this->provider;
    }

    /**
     * Sets Provider.
     * Cloud provider where you plan to provision and operate your Kubernetes cluster.
     *
     * @maps provider
     * @factory \VerizonLib\Models\CloudProviderEnum::checkValue
     */
    public function setProvider(?string $provider): void
    {
        $this->provider = $provider;
    }

    /**
     * Returns Distribution.
     * Supported Kubernetes distribution for the selected cloud provider.
     */
    public function getDistribution(): ?string
    {
        return $this->distribution;
    }

    /**
     * Sets Distribution.
     * Supported Kubernetes distribution for the selected cloud provider.
     *
     * @maps distribution
     * @factory \VerizonLib\Models\CloudDestributionEnum::checkValue
     */
    public function setDistribution(?string $distribution): void
    {
        $this->distribution = $distribution;
    }

    /**
     * Returns Common Config.
     */
    public function getCommonConfig(): ?CommonConfiguration
    {
        return $this->commonConfig;
    }

    /**
     * Sets Common Config.
     *
     * @maps commonConfig
     */
    public function setCommonConfig(?CommonConfiguration $commonConfig): void
    {
        $this->commonConfig = $commonConfig;
    }

    /**
     * Returns Cluster Config.
     */
    public function getClusterConfig(): ?ClusterConfiguration
    {
        return $this->clusterConfig;
    }

    /**
     * Sets Cluster Config.
     *
     * @maps clusterConfig
     */
    public function setClusterConfig(?ClusterConfiguration $clusterConfig): void
    {
        $this->clusterConfig = $clusterConfig;
    }

    /**
     * Returns Node Config.
     */
    public function getNodeConfig(): ?NodeConfiguration
    {
        return $this->nodeConfig;
    }

    /**
     * Sets Node Config.
     *
     * @maps nodeConfig
     */
    public function setNodeConfig(?NodeConfiguration $nodeConfig): void
    {
        $this->nodeConfig = $nodeConfig;
    }

    /**
     * Returns Node Configs.
     *
     * @return NodeConfiguration[]|null
     */
    public function getNodeConfigs(): ?array
    {
        return $this->nodeConfigs;
    }

    /**
     * Sets Node Configs.
     *
     * @maps nodeConfigs
     *
     * @param NodeConfiguration[]|null $nodeConfigs
     */
    public function setNodeConfigs(?array $nodeConfigs): void
    {
        $this->nodeConfigs = $nodeConfigs;
    }

    /**
     * Returns Advance Config.
     */
    public function getAdvanceConfig(): ?AdvanceConfiguration
    {
        return $this->advanceConfig;
    }

    /**
     * Sets Advance Config.
     *
     * @maps advanceConfig
     */
    public function setAdvanceConfig(?AdvanceConfiguration $advanceConfig): void
    {
        $this->advanceConfig = $advanceConfig;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->provider)) {
            $json['provider']      = CloudProviderEnum::checkValue($this->provider);
        }
        if (isset($this->distribution)) {
            $json['distribution']  = CloudDestributionEnum::checkValue($this->distribution);
        }
        if (isset($this->commonConfig)) {
            $json['commonConfig']  = $this->commonConfig;
        }
        if (isset($this->clusterConfig)) {
            $json['clusterConfig'] = $this->clusterConfig;
        }
        if (isset($this->nodeConfig)) {
            $json['nodeConfig']    = $this->nodeConfig;
        }
        if (isset($this->nodeConfigs)) {
            $json['nodeConfigs']   = $this->nodeConfigs;
        }
        if (isset($this->advanceConfig)) {
            $json['advanceConfig'] = $this->advanceConfig;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
