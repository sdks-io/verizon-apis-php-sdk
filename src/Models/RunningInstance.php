<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Running instance of a service.
 */
class RunningInstance implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $instanceName;

    /**
     * @var string|null
     */
    private $instanceID;

    /**
     * @var string|null
     */
    private $cSP;

    /**
     * @var string|null
     */
    private $status;

    /**
     * Returns Instance Name.
     * Service instance name.
     */
    public function getInstanceName(): ?string
    {
        return $this->instanceName;
    }

    /**
     * Sets Instance Name.
     * Service instance name.
     *
     * @maps instanceName
     */
    public function setInstanceName(?string $instanceName): void
    {
        $this->instanceName = $instanceName;
    }

    /**
     * Returns Instance ID.
     * Service instance ID.
     */
    public function getInstanceID(): ?string
    {
        return $this->instanceID;
    }

    /**
     * Sets Instance ID.
     * Service instance ID.
     *
     * @maps instanceID
     */
    public function setInstanceID(?string $instanceID): void
    {
        $this->instanceID = $instanceID;
    }

    /**
     * Returns C SP.
     * Cloud Service Provider.
     */
    public function getCSP(): ?string
    {
        return $this->cSP;
    }

    /**
     * Sets C SP.
     * Cloud Service Provider.
     *
     * @maps CSP
     */
    public function setCSP(?string $cSP): void
    {
        $this->cSP = $cSP;
    }

    /**
     * Returns Status.
     * Can have any value as - DRAFT_INPROGRESS, DRAFT_COMPLETE, DESIGN_INPROGRESS, DESIGN_FAILED,
     * DESIGN_COMPLETED, VALIDATION_INPROGRESS,  VALIDATION_FAILED, VALIDATION_COMPLETED,
     * TESTING_INPROGRESS, TESTING_FAILED, TESTING_COMPLETED, READY_TO_USE_INPROGRESS, READY_TO_USE_FAILED,
     * READY_TO_USE_COMPLETED, READY_TO_PRIVATE_USE_INPROGRESS, READY_TO_PRIVATE_USE_FAILED,
     * READY_TO_PRIVATE_USE_COMPLETED,  PUBLISH_INPROGRESS,  PUBLISH_FAILED,  PUBLISH_COMPLETED,
     * CERTIFY_INPROGRESS,  CERTIFY_FAILED, CERTIFY_COMPLETED, DEPRECATE_INPROGRESS,  DEPRECATE_FAILED,
     * DEPRECATE_COMPLETED, MARKDELETE_INPROGRESS, MARKDELETE_FAILED, MARKDELETE_COMPLETED.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Can have any value as - DRAFT_INPROGRESS, DRAFT_COMPLETE, DESIGN_INPROGRESS, DESIGN_FAILED,
     * DESIGN_COMPLETED, VALIDATION_INPROGRESS,  VALIDATION_FAILED, VALIDATION_COMPLETED,
     * TESTING_INPROGRESS, TESTING_FAILED, TESTING_COMPLETED, READY_TO_USE_INPROGRESS, READY_TO_USE_FAILED,
     * READY_TO_USE_COMPLETED, READY_TO_PRIVATE_USE_INPROGRESS, READY_TO_PRIVATE_USE_FAILED,
     * READY_TO_PRIVATE_USE_COMPLETED,  PUBLISH_INPROGRESS,  PUBLISH_FAILED,  PUBLISH_COMPLETED,
     * CERTIFY_INPROGRESS,  CERTIFY_FAILED, CERTIFY_COMPLETED, DEPRECATE_INPROGRESS,  DEPRECATE_FAILED,
     * DEPRECATE_COMPLETED, MARKDELETE_INPROGRESS, MARKDELETE_FAILED, MARKDELETE_COMPLETED.
     *
     * @maps status
     * @factory \VerizonLib\Models\ServiceStatusEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->instanceName)) {
            $json['instanceName'] = $this->instanceName;
        }
        if (isset($this->instanceID)) {
            $json['instanceID']   = $this->instanceID;
        }
        if (isset($this->cSP)) {
            $json['CSP']          = $this->cSP;
        }
        if (isset($this->status)) {
            $json['status']       = ServiceStatusEnum::checkValue($this->status);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
