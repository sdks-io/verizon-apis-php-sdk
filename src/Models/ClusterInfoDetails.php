<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Details of the cluster information.
 */
class ClusterInfoDetails implements \JsonSerializable
{
    /**
     * @var string
     */
    private $clusterName;

    /**
     * @var string
     */
    private $namespace;

    /**
     * @param string $clusterName
     * @param string $namespace
     */
    public function __construct(string $clusterName, string $namespace)
    {
        $this->clusterName = $clusterName;
        $this->namespace = $namespace;
    }

    /**
     * Returns Cluster Name.
     * Name of the cluster to be used.
     */
    public function getClusterName(): string
    {
        return $this->clusterName;
    }

    /**
     * Sets Cluster Name.
     * Name of the cluster to be used.
     *
     * @required
     * @maps clusterName
     */
    public function setClusterName(string $clusterName): void
    {
        $this->clusterName = $clusterName;
    }

    /**
     * Returns Namespace.
     * Namespace name inside cluster.
     */
    public function getNamespace(): string
    {
        return $this->namespace;
    }

    /**
     * Sets Namespace.
     * Namespace name inside cluster.
     *
     * @required
     * @maps namespace
     */
    public function setNamespace(string $namespace): void
    {
        $this->namespace = $namespace;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['clusterName'] = $this->clusterName;
        $json['namespace']   = $this->namespace;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
