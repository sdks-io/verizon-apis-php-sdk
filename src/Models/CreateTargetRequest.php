<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Details of the target that you want to create.
 */
class CreateTargetRequest implements \JsonSerializable
{
    /**
     * @var AccountIdentifier|null
     */
    private $accountidentifier;

    /**
     * @var string|null
     */
    private $billingaccountid;

    /**
     * @var string|null
     */
    private $kind;

    /**
     * @var string|null
     */
    private $address;

    /**
     * @var string|null
     */
    private $addressscheme;

    /**
     * @var CreateTargetRequestFields|null
     */
    private $fields;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $externalid;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $region;

    /**
     * @var string|null
     */
    private $key1;

    /**
     * @var TargetAuthentication|null
     */
    private $oauth;

    /**
     * Returns Accountidentifier.
     * The ID of the authenticating billing account, in the format `{"billingaccountid":"1234567890-
     * 12345"}`.
     */
    public function getAccountidentifier(): ?AccountIdentifier
    {
        return $this->accountidentifier;
    }

    /**
     * Sets Accountidentifier.
     * The ID of the authenticating billing account, in the format `{"billingaccountid":"1234567890-
     * 12345"}`.
     *
     * @maps accountidentifier
     */
    public function setAccountidentifier(?AccountIdentifier $accountidentifier): void
    {
        $this->accountidentifier = $accountidentifier;
    }

    /**
     * Returns Billingaccountid.
     * The ID of the authenticating billing account.
     */
    public function getBillingaccountid(): ?string
    {
        return $this->billingaccountid;
    }

    /**
     * Sets Billingaccountid.
     * The ID of the authenticating billing account.
     *
     * @maps billingaccountid
     */
    public function setBillingaccountid(?string $billingaccountid): void
    {
        $this->billingaccountid = $billingaccountid;
    }

    /**
     * Returns Kind.
     * Identifies the resource kind. Targets are ts.target.
     */
    public function getKind(): ?string
    {
        return $this->kind;
    }

    /**
     * Sets Kind.
     * Identifies the resource kind. Targets are ts.target.
     *
     * @maps kind
     */
    public function setKind(?string $kind): void
    {
        $this->kind = $kind;
    }

    /**
     * Returns Address.
     * The endpoint for notifications or data streams. The format depends on the selected `addressscheme`.
     * <br />`streamrest` requires a `host:port` value <br />`streamawsiot` requres a valid ARN.
     */
    public function getAddress(): ?string
    {
        return $this->address;
    }

    /**
     * Sets Address.
     * The endpoint for notifications or data streams. The format depends on the selected `addressscheme`.
     * <br />`streamrest` requires a `host:port` value <br />`streamawsiot` requres a valid ARN.
     *
     * @maps address
     */
    public function setAddress(?string $address): void
    {
        $this->address = $address;
    }

    /**
     * Returns Addressscheme.
     * The transport format. Valid values are: <br />streamawsiot - streamed data to an AWS account <br
     * />streamrest - streamed REST data to a defined endpoint.
     */
    public function getAddressscheme(): ?string
    {
        return $this->addressscheme;
    }

    /**
     * Sets Addressscheme.
     * The transport format. Valid values are: <br />streamawsiot - streamed data to an AWS account <br
     * />streamrest - streamed REST data to a defined endpoint.
     *
     * @maps addressscheme
     */
    public function setAddressscheme(?string $addressscheme): void
    {
        $this->addressscheme = $addressscheme;
    }

    /**
     * Returns Fields.
     */
    public function getFields(): ?CreateTargetRequestFields
    {
        return $this->fields;
    }

    /**
     * Sets Fields.
     *
     * @maps fields
     */
    public function setFields(?CreateTargetRequestFields $fields): void
    {
        $this->fields = $fields;
    }

    /**
     * Returns Description.
     * Descriptive information about the target.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Descriptive information about the target.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Externalid.
     * Security identification string created by a POST /targets/actions/newextid request.
     */
    public function getExternalid(): ?string
    {
        return $this->externalid;
    }

    /**
     * Sets Externalid.
     * Security identification string created by a POST /targets/actions/newextid request.
     *
     * @maps externalid
     */
    public function setExternalid(?string $externalid): void
    {
        $this->externalid = $externalid;
    }

    /**
     * Returns Name.
     * Name of the target.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Name of the target.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Region.
     * AWS region value.
     */
    public function getRegion(): ?string
    {
        return $this->region;
    }

    /**
     * Sets Region.
     * AWS region value.
     *
     * @maps region
     */
    public function setRegion(?string $region): void
    {
        $this->region = $region;
    }

    /**
     * Returns Key 1.
     * OAuth 2.0 bearer token.
     */
    public function getKey1(): ?string
    {
        return $this->key1;
    }

    /**
     * Sets Key 1.
     * OAuth 2.0 bearer token.
     *
     * @maps key1
     */
    public function setKey1(?string $key1): void
    {
        $this->key1 = $key1;
    }

    /**
     * Returns Oauth.
     * OAuth 2 token and refresh token for TS to stream events to Target.
     */
    public function getOauth(): ?TargetAuthentication
    {
        return $this->oauth;
    }

    /**
     * Sets Oauth.
     * OAuth 2 token and refresh token for TS to stream events to Target.
     *
     * @maps oauth
     */
    public function setOauth(?TargetAuthentication $oauth): void
    {
        $this->oauth = $oauth;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountidentifier)) {
            $json['accountidentifier'] = $this->accountidentifier;
        }
        if (isset($this->billingaccountid)) {
            $json['billingaccountid']  = $this->billingaccountid;
        }
        if (isset($this->kind)) {
            $json['kind']              = $this->kind;
        }
        if (isset($this->address)) {
            $json['address']           = $this->address;
        }
        if (isset($this->addressscheme)) {
            $json['addressscheme']     = $this->addressscheme;
        }
        if (isset($this->fields)) {
            $json['fields']            = $this->fields;
        }
        if (isset($this->description)) {
            $json['description']       = $this->description;
        }
        if (isset($this->externalid)) {
            $json['externalid']        = $this->externalid;
        }
        if (isset($this->name)) {
            $json['name']              = $this->name;
        }
        if (isset($this->region)) {
            $json['region']            = $this->region;
        }
        if (isset($this->key1)) {
            $json['key1']              = $this->key1;
        }
        if (isset($this->oauth)) {
            $json['oauth']             = $this->oauth;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
