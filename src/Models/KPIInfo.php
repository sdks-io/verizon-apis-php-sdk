<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * KPI Info Object
 */
class KPIInfo implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $value;

    /**
     * @var string|null
     */
    private $nodeName;

    /**
     * @var string|null
     */
    private $nodeType;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $unit;

    /**
     * @var string|null
     */
    private $category;

    /**
     * @var string|null
     */
    private $timeOfLastUpdate;

    /**
     * Returns Name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Value.
     */
    public function getValue(): ?string
    {
        return $this->value;
    }

    /**
     * Sets Value.
     *
     * @maps value
     */
    public function setValue(?string $value): void
    {
        $this->value = $value;
    }

    /**
     * Returns Node Name.
     */
    public function getNodeName(): ?string
    {
        return $this->nodeName;
    }

    /**
     * Sets Node Name.
     *
     * @maps nodeName
     */
    public function setNodeName(?string $nodeName): void
    {
        $this->nodeName = $nodeName;
    }

    /**
     * Returns Node Type.
     */
    public function getNodeType(): ?string
    {
        return $this->nodeType;
    }

    /**
     * Sets Node Type.
     *
     * @maps nodeType
     */
    public function setNodeType(?string $nodeType): void
    {
        $this->nodeType = $nodeType;
    }

    /**
     * Returns Description.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Unit.
     */
    public function getUnit(): ?string
    {
        return $this->unit;
    }

    /**
     * Sets Unit.
     *
     * @maps unit
     */
    public function setUnit(?string $unit): void
    {
        $this->unit = $unit;
    }

    /**
     * Returns Category.
     */
    public function getCategory(): ?string
    {
        return $this->category;
    }

    /**
     * Sets Category.
     *
     * @maps category
     */
    public function setCategory(?string $category): void
    {
        $this->category = $category;
    }

    /**
     * Returns Time of Last Update.
     */
    public function getTimeOfLastUpdate(): ?string
    {
        return $this->timeOfLastUpdate;
    }

    /**
     * Sets Time of Last Update.
     *
     * @maps timeOfLastUpdate
     */
    public function setTimeOfLastUpdate(?string $timeOfLastUpdate): void
    {
        $this->timeOfLastUpdate = $timeOfLastUpdate;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->name)) {
            $json['name']             = $this->name;
        }
        if (isset($this->value)) {
            $json['value']            = $this->value;
        }
        if (isset($this->nodeName)) {
            $json['nodeName']         = $this->nodeName;
        }
        if (isset($this->nodeType)) {
            $json['nodeType']         = $this->nodeType;
        }
        if (isset($this->description)) {
            $json['description']      = $this->description;
        }
        if (isset($this->unit)) {
            $json['unit']             = $this->unit;
        }
        if (isset($this->category)) {
            $json['category']         = $this->category;
        }
        if (isset($this->timeOfLastUpdate)) {
            $json['timeOfLastUpdate'] = $this->timeOfLastUpdate;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
