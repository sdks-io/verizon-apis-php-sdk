<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Request to list device aggregate usage.
 */
class DeviceAggregateUsageListRequest implements \JsonSerializable
{
    /**
     * @var DeviceId[]|null
     */
    private $deviceIds;

    /**
     * @var string|null
     */
    private $accountName;

    /**
     * @var string|null
     */
    private $groupName;

    /**
     * @var string|null
     */
    private $startTime;

    /**
     * @var string|null
     */
    private $endTime;

    /**
     * Returns Device Ids.
     * One or more devices for which you want aggregate data, specified by device ID.
     *
     * @return DeviceId[]|null
     */
    public function getDeviceIds(): ?array
    {
        return $this->deviceIds;
    }

    /**
     * Sets Device Ids.
     * One or more devices for which you want aggregate data, specified by device ID.
     *
     * @maps deviceIds
     *
     * @param DeviceId[]|null $deviceIds
     */
    public function setDeviceIds(?array $deviceIds): void
    {
        $this->deviceIds = $deviceIds;
    }

    /**
     * Returns Account Name.
     * The name of a billing account.
     */
    public function getAccountName(): ?string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * The name of a billing account.
     *
     * @maps accountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Group Name.
     * The name of a device group, if you want to only include devices in that group.
     */
    public function getGroupName(): ?string
    {
        return $this->groupName;
    }

    /**
     * Sets Group Name.
     * The name of a device group, if you want to only include devices in that group.
     *
     * @maps groupName
     */
    public function setGroupName(?string $groupName): void
    {
        $this->groupName = $groupName;
    }

    /**
     * Returns Start Time.
     * The beginning of the reporting period. The startTime cannot be more than 6 months before the current
     * date.
     */
    public function getStartTime(): ?string
    {
        return $this->startTime;
    }

    /**
     * Sets Start Time.
     * The beginning of the reporting period. The startTime cannot be more than 6 months before the current
     * date.
     *
     * @maps startTime
     */
    public function setStartTime(?string $startTime): void
    {
        $this->startTime = $startTime;
    }

    /**
     * Returns End Time.
     * The end of the reporting period. The endTime date must be within on month of the startTime date.
     */
    public function getEndTime(): ?string
    {
        return $this->endTime;
    }

    /**
     * Sets End Time.
     * The end of the reporting period. The endTime date must be within on month of the startTime date.
     *
     * @maps endTime
     */
    public function setEndTime(?string $endTime): void
    {
        $this->endTime = $endTime;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->deviceIds)) {
            $json['deviceIds']   = $this->deviceIds;
        }
        if (isset($this->accountName)) {
            $json['accountName'] = $this->accountName;
        }
        if (isset($this->groupName)) {
            $json['groupName']   = $this->groupName;
        }
        if (isset($this->startTime)) {
            $json['startTime']   = $this->startTime;
        }
        if (isset($this->endTime)) {
            $json['endTime']     = $this->endTime;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
