<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

class NodeStatus implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $state;

    /**
     * @var StatusConditionItem[]|null
     */
    private $conditions;

    /**
     * @var NodeStatusInfo|null
     */
    private $nodeInfo;

    /**
     * @var NodeStatusCapacity|null
     */
    private $capacity;

    /**
     * @var NodeStatusAllocatable|null
     */
    private $allocatable;

    /**
     * @var NodeStatusAllocated|null
     */
    private $allocated;

    /**
     * @var IP[]|null
     */
    private $ips;

    /**
     * Returns State.
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * Sets State.
     *
     * @maps state
     */
    public function setState(?string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Conditions.
     *
     * @return StatusConditionItem[]|null
     */
    public function getConditions(): ?array
    {
        return $this->conditions;
    }

    /**
     * Sets Conditions.
     *
     * @maps conditions
     *
     * @param StatusConditionItem[]|null $conditions
     */
    public function setConditions(?array $conditions): void
    {
        $this->conditions = $conditions;
    }

    /**
     * Returns Node Info.
     */
    public function getNodeInfo(): ?NodeStatusInfo
    {
        return $this->nodeInfo;
    }

    /**
     * Sets Node Info.
     *
     * @maps nodeInfo
     */
    public function setNodeInfo(?NodeStatusInfo $nodeInfo): void
    {
        $this->nodeInfo = $nodeInfo;
    }

    /**
     * Returns Capacity.
     */
    public function getCapacity(): ?NodeStatusCapacity
    {
        return $this->capacity;
    }

    /**
     * Sets Capacity.
     *
     * @maps capacity
     */
    public function setCapacity(?NodeStatusCapacity $capacity): void
    {
        $this->capacity = $capacity;
    }

    /**
     * Returns Allocatable.
     */
    public function getAllocatable(): ?NodeStatusAllocatable
    {
        return $this->allocatable;
    }

    /**
     * Sets Allocatable.
     *
     * @maps allocatable
     */
    public function setAllocatable(?NodeStatusAllocatable $allocatable): void
    {
        $this->allocatable = $allocatable;
    }

    /**
     * Returns Allocated.
     */
    public function getAllocated(): ?NodeStatusAllocated
    {
        return $this->allocated;
    }

    /**
     * Sets Allocated.
     *
     * @maps allocated
     */
    public function setAllocated(?NodeStatusAllocated $allocated): void
    {
        $this->allocated = $allocated;
    }

    /**
     * Returns Ips.
     *
     * @return IP[]|null
     */
    public function getIps(): ?array
    {
        return $this->ips;
    }

    /**
     * Sets Ips.
     *
     * @maps ips
     *
     * @param IP[]|null $ips
     */
    public function setIps(?array $ips): void
    {
        $this->ips = $ips;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->state)) {
            $json['state']       = $this->state;
        }
        if (isset($this->conditions)) {
            $json['conditions']  = $this->conditions;
        }
        if (isset($this->nodeInfo)) {
            $json['nodeInfo']    = $this->nodeInfo;
        }
        if (isset($this->capacity)) {
            $json['capacity']    = $this->capacity;
        }
        if (isset($this->allocatable)) {
            $json['allocatable'] = $this->allocatable;
        }
        if (isset($this->allocated)) {
            $json['allocated']   = $this->allocated;
        }
        if (isset($this->ips)) {
            $json['ips']         = $this->ips;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
