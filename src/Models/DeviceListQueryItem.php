<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * The list of devices in the account.
 */
class DeviceListQueryItem implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $deviceId;

    /**
     * @var string|null
     */
    private $mdn;

    /**
     * @var string|null
     */
    private $model;

    /**
     * @var string|null
     */
    private $make;

    /**
     * @var string|null
     */
    private $firmware;

    /**
     * @var bool|null
     */
    private $fotaEligible;

    /**
     * @var bool|null
     */
    private $licenseAssigned;

    /**
     * @var string|null
     */
    private $upgradeTime;

    /**
     * Returns Device Id.
     * Device IMEI.
     */
    public function getDeviceId(): ?string
    {
        return $this->deviceId;
    }

    /**
     * Sets Device Id.
     * Device IMEI.
     *
     * @maps deviceId
     */
    public function setDeviceId(?string $deviceId): void
    {
        $this->deviceId = $deviceId;
    }

    /**
     * Returns Mdn.
     * The MDN (phone number) of the device.
     */
    public function getMdn(): ?string
    {
        return $this->mdn;
    }

    /**
     * Sets Mdn.
     * The MDN (phone number) of the device.
     *
     * @maps mdn
     */
    public function setMdn(?string $mdn): void
    {
        $this->mdn = $mdn;
    }

    /**
     * Returns Model.
     * The device model name.
     */
    public function getModel(): ?string
    {
        return $this->model;
    }

    /**
     * Sets Model.
     * The device model name.
     *
     * @maps model
     */
    public function setModel(?string $model): void
    {
        $this->model = $model;
    }

    /**
     * Returns Make.
     * The device make.
     */
    public function getMake(): ?string
    {
        return $this->make;
    }

    /**
     * Sets Make.
     * The device make.
     *
     * @maps make
     */
    public function setMake(?string $make): void
    {
        $this->make = $make;
    }

    /**
     * Returns Firmware.
     * The name of the firmware image currently installed on the device.
     */
    public function getFirmware(): ?string
    {
        return $this->firmware;
    }

    /**
     * Sets Firmware.
     * The name of the firmware image currently installed on the device.
     *
     * @maps firmware
     */
    public function setFirmware(?string $firmware): void
    {
        $this->firmware = $firmware;
    }

    /**
     * Returns Fota Eligible.
     * True if the device firmware can be upgraded over the air using the Software Management Services API.
     */
    public function getFotaEligible(): ?bool
    {
        return $this->fotaEligible;
    }

    /**
     * Sets Fota Eligible.
     * True if the device firmware can be upgraded over the air using the Software Management Services API.
     *
     * @maps fotaEligible
     */
    public function setFotaEligible(?bool $fotaEligible): void
    {
        $this->fotaEligible = $fotaEligible;
    }

    /**
     * Returns License Assigned.
     * True if an MRC license has been assigned to this device.
     */
    public function getLicenseAssigned(): ?bool
    {
        return $this->licenseAssigned;
    }

    /**
     * Sets License Assigned.
     * True if an MRC license has been assigned to this device.
     *
     * @maps licenseAssigned
     */
    public function setLicenseAssigned(?bool $licenseAssigned): void
    {
        $this->licenseAssigned = $licenseAssigned;
    }

    /**
     * Returns Upgrade Time.
     * The date and time that the device firmware was last upgraded. If a device has never been upgraded,
     * the upgradeTime will be 01/01/1900 0:0:0.
     */
    public function getUpgradeTime(): ?string
    {
        return $this->upgradeTime;
    }

    /**
     * Sets Upgrade Time.
     * The date and time that the device firmware was last upgraded. If a device has never been upgraded,
     * the upgradeTime will be 01/01/1900 0:0:0.
     *
     * @maps upgradeTime
     */
    public function setUpgradeTime(?string $upgradeTime): void
    {
        $this->upgradeTime = $upgradeTime;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->deviceId)) {
            $json['deviceId']        = $this->deviceId;
        }
        if (isset($this->mdn)) {
            $json['mdn']             = $this->mdn;
        }
        if (isset($this->model)) {
            $json['model']           = $this->model;
        }
        if (isset($this->make)) {
            $json['make']            = $this->make;
        }
        if (isset($this->firmware)) {
            $json['firmware']        = $this->firmware;
        }
        if (isset($this->fotaEligible)) {
            $json['fotaEligible']    = $this->fotaEligible;
        }
        if (isset($this->licenseAssigned)) {
            $json['licenseAssigned'] = $this->licenseAssigned;
        }
        if (isset($this->upgradeTime)) {
            $json['upgradeTime']     = $this->upgradeTime;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
