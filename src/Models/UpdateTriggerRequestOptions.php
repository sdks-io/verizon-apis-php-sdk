<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

class UpdateTriggerRequestOptions implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $triggerId;

    /**
     * @var string|null
     */
    private $triggerName;

    /**
     * @var string|null
     */
    private $triggerCategory;

    /**
     * @var string|null
     */
    private $accountName;

    /**
     * @var AnomalyTriggerRequest|null
     */
    private $anomalyTriggerRequest;

    /**
     * @var Notification|null
     */
    private $notification;

    /**
     * @var bool|null
     */
    private $active;

    /**
     * Returns Trigger Id.
     * Trigger ID.
     */
    public function getTriggerId(): ?string
    {
        return $this->triggerId;
    }

    /**
     * Sets Trigger Id.
     * Trigger ID.
     *
     * @maps triggerId
     */
    public function setTriggerId(?string $triggerId): void
    {
        $this->triggerId = $triggerId;
    }

    /**
     * Returns Trigger Name.
     * Trigger name.
     */
    public function getTriggerName(): ?string
    {
        return $this->triggerName;
    }

    /**
     * Sets Trigger Name.
     * Trigger name.
     *
     * @maps triggerName
     */
    public function setTriggerName(?string $triggerName): void
    {
        $this->triggerName = $triggerName;
    }

    /**
     * Returns Trigger Category.
     * This is the value to use in the request body to detect anomalous behaivior. The values in this table
     * will only be relevant when this parameter is set to this value.
     */
    public function getTriggerCategory(): ?string
    {
        return $this->triggerCategory;
    }

    /**
     * Sets Trigger Category.
     * This is the value to use in the request body to detect anomalous behaivior. The values in this table
     * will only be relevant when this parameter is set to this value.
     *
     * @maps triggerCategory
     */
    public function setTriggerCategory(?string $triggerCategory): void
    {
        $this->triggerCategory = $triggerCategory;
    }

    /**
     * Returns Account Name.
     * Account name.
     */
    public function getAccountName(): ?string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * Account name.
     *
     * @maps accountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Anomaly Trigger Request.
     * The details of the UsageAnomaly trigger.
     */
    public function getAnomalyTriggerRequest(): ?AnomalyTriggerRequest
    {
        return $this->anomalyTriggerRequest;
    }

    /**
     * Sets Anomaly Trigger Request.
     * The details of the UsageAnomaly trigger.
     *
     * @maps anomalyTriggerRequest
     */
    public function setAnomalyTriggerRequest(?AnomalyTriggerRequest $anomalyTriggerRequest): void
    {
        $this->anomalyTriggerRequest = $anomalyTriggerRequest;
    }

    /**
     * Returns Notification.
     * The notification details of the trigger.
     */
    public function getNotification(): ?Notification
    {
        return $this->notification;
    }

    /**
     * Sets Notification.
     * The notification details of the trigger.
     *
     * @maps notification
     */
    public function setNotification(?Notification $notification): void
    {
        $this->notification = $notification;
    }

    /**
     * Returns Active.
     * Indicates anomaly detection is active<br />True - Anomaly detection is active.<br />False - Anomaly
     * detection is not active.
     */
    public function getActive(): ?bool
    {
        return $this->active;
    }

    /**
     * Sets Active.
     * Indicates anomaly detection is active<br />True - Anomaly detection is active.<br />False - Anomaly
     * detection is not active.
     *
     * @maps active
     */
    public function setActive(?bool $active): void
    {
        $this->active = $active;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->triggerId)) {
            $json['triggerId']             = $this->triggerId;
        }
        if (isset($this->triggerName)) {
            $json['triggerName']           = $this->triggerName;
        }
        if (isset($this->triggerCategory)) {
            $json['triggerCategory']       = $this->triggerCategory;
        }
        if (isset($this->accountName)) {
            $json['accountName']           = $this->accountName;
        }
        if (isset($this->anomalyTriggerRequest)) {
            $json['anomalyTriggerRequest'] = $this->anomalyTriggerRequest;
        }
        if (isset($this->notification)) {
            $json['notification']          = $this->notification;
        }
        if (isset($this->active)) {
            $json['active']                = $this->active;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
