<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Trigger details.
 */
class TriggerType2 implements \JsonSerializable
{
    /**
     * @var UsageAnomalyAttributes|null
     */
    private $anomalyattributes;

    /**
     * @var Notification|null
     */
    private $notification;

    /**
     * Returns Anomalyattributes.
     * The details of the UsageAnomaly trigger.
     */
    public function getAnomalyattributes(): ?UsageAnomalyAttributes
    {
        return $this->anomalyattributes;
    }

    /**
     * Sets Anomalyattributes.
     * The details of the UsageAnomaly trigger.
     *
     * @maps anomalyattributes
     */
    public function setAnomalyattributes(?UsageAnomalyAttributes $anomalyattributes): void
    {
        $this->anomalyattributes = $anomalyattributes;
    }

    /**
     * Returns Notification.
     * The notification details of the trigger.
     */
    public function getNotification(): ?Notification
    {
        return $this->notification;
    }

    /**
     * Sets Notification.
     * The notification details of the trigger.
     *
     * @maps notification
     */
    public function setNotification(?Notification $notification): void
    {
        $this->notification = $notification;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->anomalyattributes)) {
            $json['anomalyattributes'] = $this->anomalyattributes;
        }
        if (isset($this->notification)) {
            $json['notification']      = $this->notification;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
