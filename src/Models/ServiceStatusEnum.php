<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

/**
 * Current status of the service.
 */
class ServiceStatusEnum
{
    public const DRAFT_INPROGRESS = 'DRAFT_INPROGRESS';

    public const DRAFT_COMPLETE = 'DRAFT_COMPLETE';

    public const DESIGN_INPROGRESS = 'DESIGN_INPROGRESS';

    public const DESIGN_FAILED = 'DESIGN_FAILED';

    public const DESIGN_COMPLETED = 'DESIGN_COMPLETED';

    public const VALIDATION_INPROGRESS = 'VALIDATION_INPROGRESS';

    public const VALIDATION_FAILED = 'VALIDATION_FAILED';

    public const VALIDATION_COMPLETED = 'VALIDATION_COMPLETED';

    public const TESTING_INPROGRESS = 'TESTING_INPROGRESS';

    public const TESTING_FAILED = 'TESTING_FAILED';

    public const TESTING_COMPLETED = 'TESTING_COMPLETED';

    public const READY_TO_USE_INPROGRESS = 'READY_TO_USE_INPROGRESS';

    public const READY_TO_USE_FAILED = 'READY_TO_USE_FAILED';

    public const READY_TO_USE_COMPLETED = 'READY_TO_USE_COMPLETED';

    public const READY_TO_PRIVATE_USE_INPROGRESS = 'READY_TO_PRIVATE_USE_INPROGRESS';

    public const READY_TO_PRIVATE_USE_FAILED = 'READY_TO_PRIVATE_USE_FAILED';

    public const READY_TO_PRIVATE_USE_COMPLETED = 'READY_TO_PRIVATE_USE_COMPLETED';

    public const PUBLISH_INPROGRESS = 'PUBLISH_INPROGRESS';

    public const PUBLISH_FAILED = 'PUBLISH_FAILED';

    public const PUBLISH_COMPLETED = 'PUBLISH_COMPLETED';

    public const CERTIFY_INPROGRESS = 'CERTIFY_INPROGRESS';

    public const CERTIFY_FAILED = 'CERTIFY_FAILED';

    public const CERTIFY_COMPLETED = 'CERTIFY_COMPLETED';

    public const DEPRECATE_INPROGRESS = 'DEPRECATE_INPROGRESS';

    public const DEPRECATE_FAILED = 'DEPRECATE_FAILED';

    public const DEPRECATE_COMPLETED = 'DEPRECATE_COMPLETED';

    public const MARKDELETE_INPROGRESS = 'MARKDELETE_INPROGRESS';

    public const MARKDELETE_FAILED = 'MARKDELETE_FAILED';

    public const MARKDELETE_COMPLETED = 'MARKDELETE_COMPLETED';

    private const _ALL_VALUES = [
        self::DRAFT_INPROGRESS,
        self::DRAFT_COMPLETE,
        self::DESIGN_INPROGRESS,
        self::DESIGN_FAILED,
        self::DESIGN_COMPLETED,
        self::VALIDATION_INPROGRESS,
        self::VALIDATION_FAILED,
        self::VALIDATION_COMPLETED,
        self::TESTING_INPROGRESS,
        self::TESTING_FAILED,
        self::TESTING_COMPLETED,
        self::READY_TO_USE_INPROGRESS,
        self::READY_TO_USE_FAILED,
        self::READY_TO_USE_COMPLETED,
        self::READY_TO_PRIVATE_USE_INPROGRESS,
        self::READY_TO_PRIVATE_USE_FAILED,
        self::READY_TO_PRIVATE_USE_COMPLETED,
        self::PUBLISH_INPROGRESS,
        self::PUBLISH_FAILED,
        self::PUBLISH_COMPLETED,
        self::CERTIFY_INPROGRESS,
        self::CERTIFY_FAILED,
        self::CERTIFY_COMPLETED,
        self::DEPRECATE_INPROGRESS,
        self::DEPRECATE_FAILED,
        self::DEPRECATE_COMPLETED,
        self::MARKDELETE_INPROGRESS,
        self::MARKDELETE_FAILED,
        self::MARKDELETE_COMPLETED
    ];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for ServiceStatusEnum.");
    }
}
