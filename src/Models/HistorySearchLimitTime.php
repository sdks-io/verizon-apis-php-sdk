<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\Utils\DateTimeHelper;

/**
 * The time period for which a request should retrieve data, beginning with the limitTime.startOn and
 * proceeding with the limitTime.duration.
 */
class HistorySearchLimitTime implements \JsonSerializable
{
    /**
     * @var \DateTime|null
     */
    private $startOn;

    /**
     * @var NumericalData|null
     */
    private $duration;

    /**
     * Returns Start On.
     * The starting date-time for this request.
     */
    public function getStartOn(): ?\DateTime
    {
        return $this->startOn;
    }

    /**
     * Sets Start On.
     * The starting date-time for this request.
     *
     * @maps startOn
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setStartOn(?\DateTime $startOn): void
    {
        $this->startOn = $startOn;
    }

    /**
     * Returns Duration.
     * Describes value and unit of time.
     */
    public function getDuration(): ?NumericalData
    {
        return $this->duration;
    }

    /**
     * Sets Duration.
     * Describes value and unit of time.
     *
     * @maps duration
     */
    public function setDuration(?NumericalData $duration): void
    {
        $this->duration = $duration;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->startOn)) {
            $json['startOn']  = DateTimeHelper::toRfc3339DateTime($this->startOn);
        }
        if (isset($this->duration)) {
            $json['duration'] = $this->duration;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
