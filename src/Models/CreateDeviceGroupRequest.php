<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Create request for a new device group and optionally add devices to the group.
 */
class CreateDeviceGroupRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $accountName;

    /**
     * @var string
     */
    private $groupDescription;

    /**
     * @var string
     */
    private $groupName;

    /**
     * @var DeviceId[]|null
     */
    private $devicesToAdd;

    /**
     * @param string $accountName
     * @param string $groupDescription
     * @param string $groupName
     */
    public function __construct(string $accountName, string $groupDescription, string $groupName)
    {
        $this->accountName = $accountName;
        $this->groupDescription = $groupDescription;
        $this->groupName = $groupName;
    }

    /**
     * Returns Account Name.
     * The Verizon billing account that the device group will belong to. An account name is usually numeric,
     * and must include any leading zeros.
     */
    public function getAccountName(): string
    {
        return $this->accountName;
    }

    /**
     * Sets Account Name.
     * The Verizon billing account that the device group will belong to. An account name is usually numeric,
     * and must include any leading zeros.
     *
     * @required
     * @maps accountName
     */
    public function setAccountName(string $accountName): void
    {
        $this->accountName = $accountName;
    }

    /**
     * Returns Group Description.
     * A description for the device group.
     */
    public function getGroupDescription(): string
    {
        return $this->groupDescription;
    }

    /**
     * Sets Group Description.
     * A description for the device group.
     *
     * @required
     * @maps groupDescription
     */
    public function setGroupDescription(string $groupDescription): void
    {
        $this->groupDescription = $groupDescription;
    }

    /**
     * Returns Group Name.
     * The name for the new device group. This name must be unique within the specified account.
     */
    public function getGroupName(): string
    {
        return $this->groupName;
    }

    /**
     * Sets Group Name.
     * The name for the new device group. This name must be unique within the specified account.
     *
     * @required
     * @maps groupName
     */
    public function setGroupName(string $groupName): void
    {
        $this->groupName = $groupName;
    }

    /**
     * Returns Devices to Add.
     * Zero or more devices to add to the device group. You can use POST /devices/actions/list to get a
     * list of all devices in the account.
     *
     * @return DeviceId[]|null
     */
    public function getDevicesToAdd(): ?array
    {
        return $this->devicesToAdd;
    }

    /**
     * Sets Devices to Add.
     * Zero or more devices to add to the device group. You can use POST /devices/actions/list to get a
     * list of all devices in the account.
     *
     * @maps devicesToAdd
     *
     * @param DeviceId[]|null $devicesToAdd
     */
    public function setDevicesToAdd(?array $devicesToAdd): void
    {
        $this->devicesToAdd = $devicesToAdd;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['accountName']      = $this->accountName;
        $json['groupDescription'] = $this->groupDescription;
        $json['groupName']        = $this->groupName;
        if (isset($this->devicesToAdd)) {
            $json['devicesToAdd'] = $this->devicesToAdd;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
