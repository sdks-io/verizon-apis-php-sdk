<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Location information for up to 1,000 devices.
 */
class LocationReport implements \JsonSerializable
{
    /**
     * @var Location[]|null
     */
    private $devLocationList;

    /**
     * @var bool|null
     */
    private $hasMoreData;

    /**
     * @var string|null
     */
    private $startIndex;

    /**
     * @var int|null
     */
    private $totalCount;

    /**
     * @var string|null
     */
    private $txid;

    /**
     * Returns Dev Location List.
     * Device location information.
     *
     * @return Location[]|null
     */
    public function getDevLocationList(): ?array
    {
        return $this->devLocationList;
    }

    /**
     * Sets Dev Location List.
     * Device location information.
     *
     * @maps devLocationList
     *
     * @param Location[]|null $devLocationList
     */
    public function setDevLocationList(?array $devLocationList): void
    {
        $this->devLocationList = $devLocationList;
    }

    /**
     * Returns Has More Data.
     * True if there are more device locations to retrieve.
     */
    public function getHasMoreData(): ?bool
    {
        return $this->hasMoreData;
    }

    /**
     * Sets Has More Data.
     * True if there are more device locations to retrieve.
     *
     * @maps hasMoreData
     */
    public function setHasMoreData(?bool $hasMoreData): void
    {
        $this->hasMoreData = $hasMoreData;
    }

    /**
     * Returns Start Index.
     * The zero-based number of the first record to return. Set startIndex=0 for the first request. If
     * there are more than 1,000 devices to be returned (hasMoreData=true), set startIndex=1000 for the
     * second request, 2000 for the third request, etc.
     */
    public function getStartIndex(): ?string
    {
        return $this->startIndex;
    }

    /**
     * Sets Start Index.
     * The zero-based number of the first record to return. Set startIndex=0 for the first request. If
     * there are more than 1,000 devices to be returned (hasMoreData=true), set startIndex=1000 for the
     * second request, 2000 for the third request, etc.
     *
     * @maps startIndex
     */
    public function setStartIndex(?string $startIndex): void
    {
        $this->startIndex = $startIndex;
    }

    /**
     * Returns Total Count.
     * The total number of devices in the original request and in the report.
     */
    public function getTotalCount(): ?int
    {
        return $this->totalCount;
    }

    /**
     * Sets Total Count.
     * The total number of devices in the original request and in the report.
     *
     * @maps totalCount
     */
    public function setTotalCount(?int $totalCount): void
    {
        $this->totalCount = $totalCount;
    }

    /**
     * Returns Txid.
     * The transaction ID of the report.
     */
    public function getTxid(): ?string
    {
        return $this->txid;
    }

    /**
     * Sets Txid.
     * The transaction ID of the report.
     *
     * @maps txid
     */
    public function setTxid(?string $txid): void
    {
        $this->txid = $txid;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->devLocationList)) {
            $json['devLocationList'] = $this->devLocationList;
        }
        if (isset($this->hasMoreData)) {
            $json['hasMoreData']     = $this->hasMoreData;
        }
        if (isset($this->startIndex)) {
            $json['startIndex']      = $this->startIndex;
        }
        if (isset($this->totalCount)) {
            $json['totalCount']      = $this->totalCount;
        }
        if (isset($this->txid)) {
            $json['txid']            = $this->txid;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
