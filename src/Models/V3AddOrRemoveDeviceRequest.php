<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * Devices to add or remove from existing software upgrade information.
 */
class V3AddOrRemoveDeviceRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $type;

    /**
     * @var string[]
     */
    private $deviceList;

    /**
     * @param string $type
     * @param string[] $deviceList
     */
    public function __construct(string $type, array $deviceList)
    {
        $this->type = $type;
        $this->deviceList = $deviceList;
    }

    /**
     * Returns Type.
     * Operation either 'append' or 'remove'
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Operation either 'append' or 'remove'
     *
     * @required
     * @maps Type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Device List.
     * Device IMEI list.
     *
     * @return string[]
     */
    public function getDeviceList(): array
    {
        return $this->deviceList;
    }

    /**
     * Sets Device List.
     * Device IMEI list.
     *
     * @required
     * @maps deviceList
     *
     * @param string[] $deviceList
     */
    public function setDeviceList(array $deviceList): void
    {
        $this->deviceList = $deviceList;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['Type']       = $this->type;
        $json['deviceList'] = $this->deviceList;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
