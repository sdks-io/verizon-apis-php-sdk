<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * 5G Edge platform used for deployment of a service. The ern of each platform contains the name of the
 * matching AWS Wavelength zone that can be used when deploying.
 */
class MECPlatformResource implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $ern;

    /**
     * @var array
     */
    private $zone = [];

    /**
     * @var string|null
     */
    private $region;

    /**
     * @var string|null
     */
    private $status = MECPlatformStatusEnum::UNKNOWN;

    /**
     * @var array|null
     */
    private $properties;

    /**
     * Returns Ern.
     * Edge Resource Name. A string identifier for a set of edge resources.
     */
    public function getErn(): ?string
    {
        return $this->ern;
    }

    /**
     * Sets Ern.
     * Edge Resource Name. A string identifier for a set of edge resources.
     *
     * @maps ern
     */
    public function setErn(?string $ern): void
    {
        $this->ern = $ern;
    }

    /**
     * Returns Zone.
     * Unique identifier representing a zone. *Note:* This will have a null value as a placeholder.
     */
    public function getZone(): ?string
    {
        if (count($this->zone) == 0) {
            return null;
        }
        return $this->zone['value'];
    }

    /**
     * Sets Zone.
     * Unique identifier representing a zone. *Note:* This will have a null value as a placeholder.
     *
     * @maps zone
     */
    public function setZone(?string $zone): void
    {
        $this->zone['value'] = $zone;
    }

    /**
     * Unsets Zone.
     * Unique identifier representing a zone. *Note:* This will have a null value as a placeholder.
     */
    public function unsetZone(): void
    {
        $this->zone = [];
    }

    /**
     * Returns Region.
     * MEC region name. Current valid values are US_WEST_2 and US_EAST_1.
     */
    public function getRegion(): ?string
    {
        return $this->region;
    }

    /**
     * Sets Region.
     * MEC region name. Current valid values are US_WEST_2 and US_EAST_1.
     *
     * @maps region
     */
    public function setRegion(?string $region): void
    {
        $this->region = $region;
    }

    /**
     * Returns Status.
     * Status of the MEC Platform (default is 'unknown')
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Status of the MEC Platform (default is 'unknown')
     *
     * @maps status
     * @factory \VerizonLib\Models\MECPlatformStatusEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Properties.
     */
    public function getProperties(): ?array
    {
        return $this->properties;
    }

    /**
     * Sets Properties.
     *
     * @maps properties
     */
    public function setProperties(?array $properties): void
    {
        $this->properties = $properties;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->ern)) {
            $json['ern']        = $this->ern;
        }
        if (!empty($this->zone)) {
            $json['zone']       = $this->zone['value'];
        }
        if (isset($this->region)) {
            $json['region']     = $this->region;
        }
        if (isset($this->status)) {
            $json['status']     = MECPlatformStatusEnum::checkValue($this->status);
        }
        if (isset($this->properties)) {
            $json['properties'] = $this->properties;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
