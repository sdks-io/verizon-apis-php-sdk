<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models\Builders;

use Core\Utils\CoreHelper;
use VerizonLib\Models\EdgeServiceOnboardingResult;
use VerizonLib\Models\ObservabilityTemplate;
use VerizonLib\Models\Service;
use VerizonLib\Models\ServiceError;
use VerizonLib\Models\ServiceHandlerId;
use VerizonLib\Models\ServiceResource;
use VerizonLib\Models\ServiceSwaggerSpecId;

/**
 * Builder for model Service
 *
 * @see Service
 */
class ServiceBuilder
{
    /**
     * @var Service
     */
    private $instance;

    private function __construct(Service $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new service Builder object.
     */
    public static function init(string $name, string $version): self
    {
        return new self(new Service($name, $version));
    }

    /**
     * Sets id field.
     */
    public function id(?string $value): self
    {
        $this->instance->setId($value);
        return $this;
    }

    /**
     * Sets description field.
     */
    public function description(?string $value): self
    {
        $this->instance->setDescription($value);
        return $this;
    }

    /**
     * Unsets description field.
     */
    public function unsetDescription(): self
    {
        $this->instance->unsetDescription();
        return $this;
    }

    /**
     * Sets metadata field.
     */
    public function metadata(?array $value): self
    {
        $this->instance->setMetadata($value);
        return $this;
    }

    /**
     * Sets tags field.
     */
    public function tags(?array $value): self
    {
        $this->instance->setTags($value);
        return $this;
    }

    /**
     * Sets categories field.
     */
    public function categories(?array $value): self
    {
        $this->instance->setCategories($value);
        return $this;
    }

    /**
     * Unsets categories field.
     */
    public function unsetCategories(): self
    {
        $this->instance->unsetCategories();
        return $this;
    }

    /**
     * Sets is favourite field.
     */
    public function isFavourite(?bool $value): self
    {
        $this->instance->setIsFavourite($value);
        return $this;
    }

    /**
     * Sets is deleted field.
     */
    public function isDeleted(?bool $value): self
    {
        $this->instance->setIsDeleted($value);
        return $this;
    }

    /**
     * Sets compatibility field.
     */
    public function compatibility(?array $value): self
    {
        $this->instance->setCompatibility($value);
        return $this;
    }

    /**
     * Sets resource field.
     */
    public function resource(?ServiceResource $value): self
    {
        $this->instance->setResource($value);
        return $this;
    }

    /**
     * Sets created date field.
     */
    public function createdDate(?\DateTime $value): self
    {
        $this->instance->setCreatedDate($value);
        return $this;
    }

    /**
     * Sets last modified date field.
     */
    public function lastModifiedDate(?\DateTime $value): self
    {
        $this->instance->setLastModifiedDate($value);
        return $this;
    }

    /**
     * Sets created by field.
     */
    public function createdBy(?string $value): self
    {
        $this->instance->setCreatedBy($value);
        return $this;
    }

    /**
     * Sets last modified by field.
     */
    public function lastModifiedBy(?string $value): self
    {
        $this->instance->setLastModifiedBy($value);
        return $this;
    }

    /**
     * Sets error field.
     */
    public function error(?ServiceError $value): self
    {
        $this->instance->setError($value);
        return $this;
    }

    /**
     * Sets error response field.
     */
    public function errorResponse(?EdgeServiceOnboardingResult $value): self
    {
        $this->instance->setErrorResponse($value);
        return $this;
    }

    /**
     * Sets state field.
     */
    public function state(?string $value): self
    {
        $this->instance->setState($value);
        return $this;
    }

    /**
     * Sets status field.
     */
    public function status(?string $value): self
    {
        $this->instance->setStatus($value);
        return $this;
    }

    /**
     * Sets type field.
     */
    public function type(?string $value): self
    {
        $this->instance->setType($value);
        return $this;
    }

    /**
     * Sets service handler id field.
     */
    public function serviceHandlerId(?ServiceHandlerId $value): self
    {
        $this->instance->setServiceHandlerId($value);
        return $this;
    }

    /**
     * Sets observability template field.
     */
    public function observabilityTemplate(?ObservabilityTemplate $value): self
    {
        $this->instance->setObservabilityTemplate($value);
        return $this;
    }

    /**
     * Sets service swagger spec id field.
     */
    public function serviceSwaggerSpecId(?ServiceSwaggerSpecId $value): self
    {
        $this->instance->setServiceSwaggerSpecId($value);
        return $this;
    }

    /**
     * Sets workflows field.
     */
    public function workflows(?array $value): self
    {
        $this->instance->setWorkflows($value);
        return $this;
    }

    /**
     * Sets workloads field.
     */
    public function workloads(?array $value): self
    {
        $this->instance->setWorkloads($value);
        return $this;
    }

    /**
     * Sets dependencies field.
     */
    public function dependencies(?array $value): self
    {
        $this->instance->setDependencies($value);
        return $this;
    }

    /**
     * Sets boundaries field.
     */
    public function boundaries(?array $value): self
    {
        $this->instance->setBoundaries($value);
        return $this;
    }

    /**
     * Unsets boundaries field.
     */
    public function unsetBoundaries(): self
    {
        $this->instance->unsetBoundaries();
        return $this;
    }

    /**
     * Initializes a new service object.
     */
    public function build(): Service
    {
        return CoreHelper::clone($this->instance);
    }
}
