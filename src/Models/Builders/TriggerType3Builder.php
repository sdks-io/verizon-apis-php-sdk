<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models\Builders;

use Core\Utils\CoreHelper;
use VerizonLib\Models\AnomalyTriggerRequest;
use VerizonLib\Models\Notification;
use VerizonLib\Models\TriggerType3;

/**
 * Builder for model TriggerType3
 *
 * @see TriggerType3
 */
class TriggerType3Builder
{
    /**
     * @var TriggerType3
     */
    private $instance;

    private function __construct(TriggerType3 $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new trigger type 3 Builder object.
     */
    public static function init(): self
    {
        return new self(new TriggerType3());
    }

    /**
     * Sets trigger id field.
     */
    public function triggerId(?string $value): self
    {
        $this->instance->setTriggerId($value);
        return $this;
    }

    /**
     * Sets trigger name field.
     */
    public function triggerName(?string $value): self
    {
        $this->instance->setTriggerName($value);
        return $this;
    }

    /**
     * Sets trigger category field.
     */
    public function triggerCategory(?string $value): self
    {
        $this->instance->setTriggerCategory($value);
        return $this;
    }

    /**
     * Sets account name field.
     */
    public function accountName(?string $value): self
    {
        $this->instance->setAccountName($value);
        return $this;
    }

    /**
     * Sets anomaly trigger request field.
     */
    public function anomalyTriggerRequest(?AnomalyTriggerRequest $value): self
    {
        $this->instance->setAnomalyTriggerRequest($value);
        return $this;
    }

    /**
     * Sets notification field.
     */
    public function notification(?Notification $value): self
    {
        $this->instance->setNotification($value);
        return $this;
    }

    /**
     * Initializes a new trigger type 3 object.
     */
    public function build(): TriggerType3
    {
        return CoreHelper::clone($this->instance);
    }
}
