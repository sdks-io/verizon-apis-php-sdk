<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\Utils\DateTimeHelper;

/**
 * Device logging information.
 */
class DeviceLog implements \JsonSerializable
{
    /**
     * @var string
     */
    private $deviceId;

    /**
     * @var \DateTime
     */
    private $logTime;

    /**
     * @var string
     */
    private $logType;

    /**
     * @var string
     */
    private $eventLog;

    /**
     * @var string
     */
    private $binaryLogFileBase64;

    /**
     * @var string
     */
    private $binaryLogFilename;

    /**
     * @param string $deviceId
     * @param \DateTime $logTime
     * @param string $logType
     * @param string $eventLog
     * @param string $binaryLogFileBase64
     * @param string $binaryLogFilename
     */
    public function __construct(
        string $deviceId,
        \DateTime $logTime,
        string $logType,
        string $eventLog,
        string $binaryLogFileBase64,
        string $binaryLogFilename
    ) {
        $this->deviceId = $deviceId;
        $this->logTime = $logTime;
        $this->logType = $logType;
        $this->eventLog = $eventLog;
        $this->binaryLogFileBase64 = $binaryLogFileBase64;
        $this->binaryLogFilename = $binaryLogFilename;
    }

    /**
     * Returns Device Id.
     * Device IMEI.
     */
    public function getDeviceId(): string
    {
        return $this->deviceId;
    }

    /**
     * Sets Device Id.
     * Device IMEI.
     *
     * @required
     * @maps deviceId
     */
    public function setDeviceId(string $deviceId): void
    {
        $this->deviceId = $deviceId;
    }

    /**
     * Returns Log Time.
     * Time of log.
     */
    public function getLogTime(): \DateTime
    {
        return $this->logTime;
    }

    /**
     * Sets Log Time.
     * Time of log.
     *
     * @required
     * @maps logTime
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLogTime(\DateTime $logTime): void
    {
        $this->logTime = $logTime;
    }

    /**
     * Returns Log Type.
     * Log type (one of SoftwareUpdate, Event, UserNotification, AgentService, Wireless, WirelessWeb,
     * MobileBroadbandModem, WindowsMDM).
     */
    public function getLogType(): string
    {
        return $this->logType;
    }

    /**
     * Sets Log Type.
     * Log type (one of SoftwareUpdate, Event, UserNotification, AgentService, Wireless, WirelessWeb,
     * MobileBroadbandModem, WindowsMDM).
     *
     * @required
     * @maps logType
     */
    public function setLogType(string $logType): void
    {
        $this->logType = $logType;
    }

    /**
     * Returns Event Log.
     * Event log.
     */
    public function getEventLog(): string
    {
        return $this->eventLog;
    }

    /**
     * Sets Event Log.
     * Event log.
     *
     * @required
     * @maps eventLog
     */
    public function setEventLog(string $eventLog): void
    {
        $this->eventLog = $eventLog;
    }

    /**
     * Returns Binary Log File Base 64.
     * Base64-encoded contents of binary log file.
     */
    public function getBinaryLogFileBase64(): string
    {
        return $this->binaryLogFileBase64;
    }

    /**
     * Sets Binary Log File Base 64.
     * Base64-encoded contents of binary log file.
     *
     * @required
     * @maps binaryLogFileBase64
     */
    public function setBinaryLogFileBase64(string $binaryLogFileBase64): void
    {
        $this->binaryLogFileBase64 = $binaryLogFileBase64;
    }

    /**
     * Returns Binary Log Filename.
     * File name of binary log file.
     */
    public function getBinaryLogFilename(): string
    {
        return $this->binaryLogFilename;
    }

    /**
     * Sets Binary Log Filename.
     * File name of binary log file.
     *
     * @required
     * @maps binaryLogFilename
     */
    public function setBinaryLogFilename(string $binaryLogFilename): void
    {
        $this->binaryLogFilename = $binaryLogFilename;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['deviceId']            = $this->deviceId;
        $json['logTime']             = DateTimeHelper::toRfc3339DateTime($this->logTime);
        $json['logType']             = $this->logType;
        $json['eventLog']            = $this->eventLog;
        $json['binaryLogFileBase64'] = $this->binaryLogFileBase64;
        $json['binaryLogFilename']   = $this->binaryLogFilename;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
