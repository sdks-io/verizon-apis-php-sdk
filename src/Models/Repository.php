<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;
use VerizonLib\Utils\DateTimeHelper;

/**
 * Users can create a repository to maintain service artifacts. Repository would be either a Git or
 * HELM repository.
 */
class Repository implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string
     */
    private $name;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var string|null
     */
    private $tag;

    /**
     * @var string|null
     */
    private $endpoint;

    /**
     * @var string|null
     */
    private $reacheability;

    /**
     * @var string|null
     */
    private $cACertificate;

    /**
     * @var array
     */
    private $agents = [];

    /**
     * @var bool|null
     */
    private $sslDisabled;

    /**
     * @var bool|null
     */
    private $isValidated;

    /**
     * @var string|null
     */
    private $validationStatus;

    /**
     * @var string|null
     */
    private $credentialsType;

    /**
     * @var RepositoryCredential|null
     */
    private $credentials;

    /**
     * @var string|null
     */
    private $sshKey;

    /**
     * @var \DateTime|null
     */
    private $lastValidatedDate;

    /**
     * @var \DateTime|null
     */
    private $createdDate;

    /**
     * @var \DateTime|null
     */
    private $lastModifiedDate;

    /**
     * @var string|null
     */
    private $createdBy;

    /**
     * @var string|null
     */
    private $updatedBy;

    /**
     * @var bool|null
     */
    private $isDeleted;

    /**
     * @param string $name
     */
    public function __construct(string $name)
    {
        $this->name = $name;
    }

    /**
     * Returns Id.
     * System generated unique identifier to identify repository uniquely.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * System generated unique identifier to identify repository uniquely.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Name.
     * Name of the repository to be created.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Name of the repository to be created.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Description.
     * Description of the repository being created.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Description of the repository being created.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Type.
     * Type for the repository which can be Git or Helm.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Type for the repository which can be Git or Helm.
     *
     * @maps type
     * @factory \VerizonLib\Models\EdgeServiceRepositoryTypeEnum::checkValue
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Tag.
     * Attribute which can be used to tag a repository.
     */
    public function getTag(): ?string
    {
        return $this->tag;
    }

    /**
     * Sets Tag.
     * Attribute which can be used to tag a repository.
     *
     * @maps tag
     */
    public function setTag(?string $tag): void
    {
        $this->tag = $tag;
    }

    /**
     * Returns Endpoint.
     * Endpoint URL for the repository from where resources needs to be fetched.
     */
    public function getEndpoint(): ?string
    {
        return $this->endpoint;
    }

    /**
     * Sets Endpoint.
     * Endpoint URL for the repository from where resources needs to be fetched.
     *
     * @maps endpoint
     */
    public function setEndpoint(?string $endpoint): void
    {
        $this->endpoint = $endpoint;
    }

    /**
     * Returns Reacheability.
     * Reachability can be of two types, Internet and Private Network.
     */
    public function getReacheability(): ?string
    {
        return $this->reacheability;
    }

    /**
     * Sets Reacheability.
     * Reachability can be of two types, Internet and Private Network.
     *
     * @maps reacheability
     * @factory \VerizonLib\Models\RepositoryReacheabilityEnum::checkValue
     */
    public function setReacheability(?string $reacheability): void
    {
        $this->reacheability = $reacheability;
    }

    /**
     * Returns C a Certificate.
     * Required if your repository uses a private certificate authencation.Please provide ur CA certificat
     * in PEM format.
     */
    public function getCACertificate(): ?string
    {
        return $this->cACertificate;
    }

    /**
     * Sets C a Certificate.
     * Required if your repository uses a private certificate authencation.Please provide ur CA certificat
     * in PEM format.
     *
     * @maps CACertificate
     */
    public function setCACertificate(?string $cACertificate): void
    {
        $this->cACertificate = $cACertificate;
    }

    /**
     * Returns Agents.
     * This attribute can be used to specify GITOps Agent to fetch details from private repository.
     *
     * @return string[]|null
     */
    public function getAgents(): ?array
    {
        if (count($this->agents) == 0) {
            return null;
        }
        return $this->agents['value'];
    }

    /**
     * Sets Agents.
     * This attribute can be used to specify GITOps Agent to fetch details from private repository.
     *
     * @maps Agents
     *
     * @param string[]|null $agents
     */
    public function setAgents(?array $agents): void
    {
        $this->agents['value'] = $agents;
    }

    /**
     * Unsets Agents.
     * This attribute can be used to specify GITOps Agent to fetch details from private repository.
     */
    public function unsetAgents(): void
    {
        $this->agents = [];
    }

    /**
     * Returns Ssl Disabled.
     * Boolean value to check the SSL certification.
     */
    public function getSslDisabled(): ?bool
    {
        return $this->sslDisabled;
    }

    /**
     * Sets Ssl Disabled.
     * Boolean value to check the SSL certification.
     *
     * @maps sslDisabled
     */
    public function setSslDisabled(?bool $sslDisabled): void
    {
        $this->sslDisabled = $sslDisabled;
    }

    /**
     * Returns Is Validated.
     * True if CSP is validated using provided credential, false otherwise.
     */
    public function getIsValidated(): ?bool
    {
        return $this->isValidated;
    }

    /**
     * Sets Is Validated.
     * True if CSP is validated using provided credential, false otherwise.
     *
     * @maps isValidated
     */
    public function setIsValidated(?bool $isValidated): void
    {
        $this->isValidated = $isValidated;
    }

    /**
     * Returns Validation Status.
     * Status when the repository is validated eg: CREDENTIAL_VALIDATION_SUCCESS.
     */
    public function getValidationStatus(): ?string
    {
        return $this->validationStatus;
    }

    /**
     * Sets Validation Status.
     * Status when the repository is validated eg: CREDENTIAL_VALIDATION_SUCCESS.
     *
     * @maps validationStatus
     */
    public function setValidationStatus(?string $validationStatus): void
    {
        $this->validationStatus = $validationStatus;
    }

    /**
     * Returns Credentials Type.
     * Credentials can be of two types, UserPassCredentials and SSHCredentials.
     */
    public function getCredentialsType(): ?string
    {
        return $this->credentialsType;
    }

    /**
     * Sets Credentials Type.
     * Credentials can be of two types, UserPassCredentials and SSHCredentials.
     *
     * @maps credentialsType
     * @factory \VerizonLib\Models\RepositoryCredentialTypeEnum::checkValue
     */
    public function setCredentialsType(?string $credentialsType): void
    {
        $this->credentialsType = $credentialsType;
    }

    /**
     * Returns Credentials.
     * Credentials of a repository.
     */
    public function getCredentials(): ?RepositoryCredential
    {
        return $this->credentials;
    }

    /**
     * Sets Credentials.
     * Credentials of a repository.
     *
     * @maps credentials
     */
    public function setCredentials(?RepositoryCredential $credentials): void
    {
        $this->credentials = $credentials;
    }

    /**
     * Returns Ssh Key.
     * SSH Private Key in PEM format.
     */
    public function getSshKey(): ?string
    {
        return $this->sshKey;
    }

    /**
     * Sets Ssh Key.
     * SSH Private Key in PEM format.
     *
     * @maps sshKey
     */
    public function setSshKey(?string $sshKey): void
    {
        $this->sshKey = $sshKey;
    }

    /**
     * Returns Last Validated Date.
     * Time when the repository was validated.
     */
    public function getLastValidatedDate(): ?\DateTime
    {
        return $this->lastValidatedDate;
    }

    /**
     * Sets Last Validated Date.
     * Time when the repository was validated.
     *
     * @maps lastValidatedDate
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLastValidatedDate(?\DateTime $lastValidatedDate): void
    {
        $this->lastValidatedDate = $lastValidatedDate;
    }

    /**
     * Returns Created Date.
     * Date when the repository was created.
     */
    public function getCreatedDate(): ?\DateTime
    {
        return $this->createdDate;
    }

    /**
     * Sets Created Date.
     * Date when the repository was created.
     *
     * @maps createdDate
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedDate(?\DateTime $createdDate): void
    {
        $this->createdDate = $createdDate;
    }

    /**
     * Returns Last Modified Date.
     * Date when the repository was updated.
     */
    public function getLastModifiedDate(): ?\DateTime
    {
        return $this->lastModifiedDate;
    }

    /**
     * Sets Last Modified Date.
     * Date when the repository was updated.
     *
     * @maps lastModifiedDate
     * @factory \VerizonLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLastModifiedDate(?\DateTime $lastModifiedDate): void
    {
        $this->lastModifiedDate = $lastModifiedDate;
    }

    /**
     * Returns Created By.
     * User information by whom the repository was created.
     */
    public function getCreatedBy(): ?string
    {
        return $this->createdBy;
    }

    /**
     * Sets Created By.
     * User information by whom the repository was created.
     *
     * @maps createdBy
     */
    public function setCreatedBy(?string $createdBy): void
    {
        $this->createdBy = $createdBy;
    }

    /**
     * Returns Updated By.
     * User information by whom the repository was updated.
     */
    public function getUpdatedBy(): ?string
    {
        return $this->updatedBy;
    }

    /**
     * Sets Updated By.
     * User information by whom the repository was updated.
     *
     * @maps updatedBy
     */
    public function setUpdatedBy(?string $updatedBy): void
    {
        $this->updatedBy = $updatedBy;
    }

    /**
     * Returns Is Deleted.
     * When it will be soft deleted, status will be changed.
     */
    public function getIsDeleted(): ?bool
    {
        return $this->isDeleted;
    }

    /**
     * Sets Is Deleted.
     * When it will be soft deleted, status will be changed.
     *
     * @maps isDeleted
     */
    public function setIsDeleted(?bool $isDeleted): void
    {
        $this->isDeleted = $isDeleted;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']                = $this->id;
        }
        $json['name']                  = $this->name;
        if (isset($this->description)) {
            $json['description']       = $this->description;
        }
        if (isset($this->type)) {
            $json['type']              = EdgeServiceRepositoryTypeEnum::checkValue($this->type);
        }
        if (isset($this->tag)) {
            $json['tag']               = $this->tag;
        }
        if (isset($this->endpoint)) {
            $json['endpoint']          = $this->endpoint;
        }
        if (isset($this->reacheability)) {
            $json['reacheability']     = RepositoryReacheabilityEnum::checkValue($this->reacheability);
        }
        if (isset($this->cACertificate)) {
            $json['CACertificate']     = $this->cACertificate;
        }
        if (!empty($this->agents)) {
            $json['Agents']            = $this->agents['value'];
        }
        if (isset($this->sslDisabled)) {
            $json['sslDisabled']       = $this->sslDisabled;
        }
        if (isset($this->isValidated)) {
            $json['isValidated']       = $this->isValidated;
        }
        if (isset($this->validationStatus)) {
            $json['validationStatus']  = $this->validationStatus;
        }
        if (isset($this->credentialsType)) {
            $json['credentialsType']   = RepositoryCredentialTypeEnum::checkValue($this->credentialsType);
        }
        if (isset($this->credentials)) {
            $json['credentials']       = $this->credentials;
        }
        if (isset($this->sshKey)) {
            $json['sshKey']            = $this->sshKey;
        }
        if (isset($this->lastValidatedDate)) {
            $json['lastValidatedDate'] = DateTimeHelper::toRfc3339DateTime($this->lastValidatedDate);
        }
        if (isset($this->createdDate)) {
            $json['createdDate']       = DateTimeHelper::toRfc3339DateTime($this->createdDate);
        }
        if (isset($this->lastModifiedDate)) {
            $json['lastModifiedDate']  = DateTimeHelper::toRfc3339DateTime($this->lastModifiedDate);
        }
        if (isset($this->createdBy)) {
            $json['createdBy']         = $this->createdBy;
        }
        if (isset($this->updatedBy)) {
            $json['updatedBy']         = $this->updatedBy;
        }
        if (isset($this->isDeleted)) {
            $json['isDeleted']         = $this->isDeleted;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
