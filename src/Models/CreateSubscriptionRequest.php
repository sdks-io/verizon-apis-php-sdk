<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Models;

use stdClass;

/**
 * The details of the subscription that you want to create.
 */
class CreateSubscriptionRequest implements \JsonSerializable
{
    /**
     * @var AccountIdentifier|null
     */
    private $accountidentifier;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var bool|null
     */
    private $disabled;

    /**
     * @var string|null
     */
    private $email;

    /**
     * @var string|null
     */
    private $filter;

    /**
     * @var string|null
     */
    private $billingaccountid;

    /**
     * @var string|null
     */
    private $streamkind;

    /**
     * @var string|null
     */
    private $targetid;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var bool|null
     */
    private $allowaggregation;

    /**
     * Returns Accountidentifier.
     * The ID of the authenticating billing account, in the format `{"billingaccountid":"1234567890-
     * 12345"}`.
     */
    public function getAccountidentifier(): ?AccountIdentifier
    {
        return $this->accountidentifier;
    }

    /**
     * Sets Accountidentifier.
     * The ID of the authenticating billing account, in the format `{"billingaccountid":"1234567890-
     * 12345"}`.
     *
     * @maps accountidentifier
     */
    public function setAccountidentifier(?AccountIdentifier $accountidentifier): void
    {
        $this->accountidentifier = $accountidentifier;
    }

    /**
     * Returns Description.
     * Descriptive information about the subscription.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Descriptive information about the subscription.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Disabled.
     * Enable or disable the subscription. A disabled subscription will not send any data.
     */
    public function getDisabled(): ?bool
    {
        return $this->disabled;
    }

    /**
     * Sets Disabled.
     * Enable or disable the subscription. A disabled subscription will not send any data.
     *
     * @maps disabled
     */
    public function setDisabled(?bool $disabled): void
    {
        $this->disabled = $disabled;
    }

    /**
     * Returns Email.
     * The address to which any error reports should be delivered.
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Sets Email.
     * The address to which any error reports should be delivered.
     *
     * @maps email
     */
    public function setEmail(?string $email): void
    {
        $this->email = $email;
    }

    /**
     * Returns Filter.
     * String containing a $filter object with a property and value to filter out non-matching events.
     */
    public function getFilter(): ?string
    {
        return $this->filter;
    }

    /**
     * Sets Filter.
     * String containing a $filter object with a property and value to filter out non-matching events.
     *
     * @maps filter
     */
    public function setFilter(?string $filter): void
    {
        $this->filter = $filter;
    }

    /**
     * Returns Billingaccountid.
     */
    public function getBillingaccountid(): ?string
    {
        return $this->billingaccountid;
    }

    /**
     * Sets Billingaccountid.
     *
     * @maps billingaccountid
     */
    public function setBillingaccountid(?string $billingaccountid): void
    {
        $this->billingaccountid = $billingaccountid;
    }

    /**
     * Returns Streamkind.
     * The type of event data to send via this subscription. This will be `ts.event` in most cases. Other
     * event types are `ts.event.diagnostics` for device diagnostic data, `ts.event.configuration` for
     * device configuration events, or `ts.event.security`. Note that the device ThingSpace client must
     * support sending specific event types for anything other than `ts.event`.
     */
    public function getStreamkind(): ?string
    {
        return $this->streamkind;
    }

    /**
     * Sets Streamkind.
     * The type of event data to send via this subscription. This will be `ts.event` in most cases. Other
     * event types are `ts.event.diagnostics` for device diagnostic data, `ts.event.configuration` for
     * device configuration events, or `ts.event.security`. Note that the device ThingSpace client must
     * support sending specific event types for anything other than `ts.event`.
     *
     * @maps streamkind
     */
    public function setStreamkind(?string $streamkind): void
    {
        $this->streamkind = $streamkind;
    }

    /**
     * Returns Targetid.
     * The ID of the target resource to be used when dispatching events. The corresponding target should
     * have a “stream” addressscheme.
     */
    public function getTargetid(): ?string
    {
        return $this->targetid;
    }

    /**
     * Sets Targetid.
     * The ID of the target resource to be used when dispatching events. The corresponding target should
     * have a “stream” addressscheme.
     *
     * @maps targetid
     */
    public function setTargetid(?string $targetid): void
    {
        $this->targetid = $targetid;
    }

    /**
     * Returns Name.
     * Name of the subscription.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Name of the subscription.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Allowaggregation.
     * Setting this value to `false` prevents the data returned from being aggregated and makes the data
     * easier to parse.
     */
    public function getAllowaggregation(): ?bool
    {
        return $this->allowaggregation;
    }

    /**
     * Sets Allowaggregation.
     * Setting this value to `false` prevents the data returned from being aggregated and makes the data
     * easier to parse.
     *
     * @maps allowaggregation
     */
    public function setAllowaggregation(?bool $allowaggregation): void
    {
        $this->allowaggregation = $allowaggregation;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountidentifier)) {
            $json['accountidentifier'] = $this->accountidentifier;
        }
        if (isset($this->description)) {
            $json['description']       = $this->description;
        }
        if (isset($this->disabled)) {
            $json['disabled']          = $this->disabled;
        }
        if (isset($this->email)) {
            $json['email']             = $this->email;
        }
        if (isset($this->filter)) {
            $json['filter']            = $this->filter;
        }
        if (isset($this->billingaccountid)) {
            $json['billingaccountid']  = $this->billingaccountid;
        }
        if (isset($this->streamkind)) {
            $json['streamkind']        = $this->streamkind;
        }
        if (isset($this->targetid)) {
            $json['targetid']          = $this->targetid;
        }
        if (isset($this->name)) {
            $json['name']              = $this->name;
        }
        if (isset($this->allowaggregation)) {
            $json['allowaggregation']  = $this->allowaggregation;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
