<?php

declare(strict_types=1);

/*
 * VerizonThingSpaceQualityOfServiceAPIEndpointsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonThingSpaceQualityOfServiceAPIEndpointsLib;

use Core\ClientBuilder;
use Core\Request\Parameters\HeaderParam;
use Core\Utils\CoreHelper;
use Unirest\Configuration;
use Unirest\HttpClient;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Authentication\ThingspaceOauthCredentials;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Authentication\ThingspaceOauthCredentialsBuilder;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Authentication\ThingspaceOauthManager;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Authentication\VzM2mSessionTokenCredentials;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Authentication\VzM2mSessionTokenCredentialsBuilder;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Authentication\VzM2mSessionTokenManager;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Controllers\ExclusionsController;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Controllers\OAuthAuthorizationController;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Controllers\ThingSpaceQualityOfServiceAPIActionsController;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Utils\CompatibilityConverter;

class VerizonThingSpaceQualityOfServiceAPIEndpointsClient implements ConfigurationInterface
{
    private $thingSpaceQualityOfServiceAPIActions;

    private $exclusions;

    private $oAuthAuthorization;

    private $thingspaceOauthManager;

    private $vzM2mSessionTokenManager;

    private $config;

    private $client;

    /**
     * @see VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder::init()
     * @see VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder::build()
     *
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        $this->config = array_merge(ConfigurationDefaults::_ALL, CoreHelper::clone($config));
        $this->thingspaceOauthManager = new ThingspaceOauthManager($this->config);
        $this->vzM2mSessionTokenManager = new VzM2mSessionTokenManager($this->config);
        $this->client = ClientBuilder::init(new HttpClient(Configuration::init($this)))
            ->converter(new CompatibilityConverter())
            ->jsonHelper(ApiHelper::getJsonHelper())
            ->apiCallback($this->config['httpCallback'] ?? null)
            ->userAgent('APIMATIC 3.0')
            ->globalConfig($this->getGlobalConfiguration())
            ->serverUrls(self::ENVIRONMENT_MAP[$this->getEnvironment()], Server::THINGSPACE)
            ->authManagers([
                'thingspace_oauth' => $this->thingspaceOauthManager,
                'vz-m2m-session_token' => $this->vzM2mSessionTokenManager
            ])
            ->build();
        $this->thingspaceOauthManager->setClient($this->client);
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder instance
     */
    public function toBuilder(): VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder
    {
        $builder = VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder::init()
            ->timeout($this->getTimeout())
            ->enableRetries($this->shouldEnableRetries())
            ->numberOfRetries($this->getNumberOfRetries())
            ->retryInterval($this->getRetryInterval())
            ->backOffFactor($this->getBackOffFactor())
            ->maximumRetryWaitTime($this->getMaximumRetryWaitTime())
            ->retryOnTimeout($this->shouldRetryOnTimeout())
            ->httpStatusCodesToRetry($this->getHttpStatusCodesToRetry())
            ->httpMethodsToRetry($this->getHttpMethodsToRetry())
            ->vZM2MToken2($this->getVZM2MToken2())
            ->environment($this->getEnvironment())
            ->httpCallback($this->config['httpCallback'] ?? null);

        $thingspaceOauth = $this->getThingspaceOauthCredentialsBuilder();
        if ($thingspaceOauth != null) {
            $builder->thingspaceOauthCredentials($thingspaceOauth);
        }

        $vzM2mSessionToken = $this->getVzM2mSessionTokenCredentialsBuilder();
        if ($vzM2mSessionToken != null) {
            $builder->vzM2mSessionTokenCredentials($vzM2mSessionToken);
        }
        return $builder;
    }

    public function getTimeout(): int
    {
        return $this->config['timeout'] ?? ConfigurationDefaults::TIMEOUT;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->config['enableRetries'] ?? ConfigurationDefaults::ENABLE_RETRIES;
    }

    public function getNumberOfRetries(): int
    {
        return $this->config['numberOfRetries'] ?? ConfigurationDefaults::NUMBER_OF_RETRIES;
    }

    public function getRetryInterval(): float
    {
        return $this->config['retryInterval'] ?? ConfigurationDefaults::RETRY_INTERVAL;
    }

    public function getBackOffFactor(): float
    {
        return $this->config['backOffFactor'] ?? ConfigurationDefaults::BACK_OFF_FACTOR;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->config['maximumRetryWaitTime'] ?? ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->config['retryOnTimeout'] ?? ConfigurationDefaults::RETRY_ON_TIMEOUT;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->config['httpStatusCodesToRetry'] ?? ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->config['httpMethodsToRetry'] ?? ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    }

    public function getVZM2MToken2(): string
    {
        return $this->config['vZM2MToken2'] ?? ConfigurationDefaults::VZ_M2_M_TOKEN_2;
    }

    public function getEnvironment(): string
    {
        return $this->config['environment'] ?? ConfigurationDefaults::ENVIRONMENT;
    }

    public function getThingspaceOauthCredentials(): ThingspaceOauthCredentials
    {
        return $this->thingspaceOauthManager;
    }

    public function getThingspaceOauthCredentialsBuilder(): ?ThingspaceOauthCredentialsBuilder
    {
        if (
            empty($this->thingspaceOauthManager->getOAuthClientId()) &&
            empty($this->thingspaceOauthManager->getOAuthClientSecret())
        ) {
            return null;
        }
        return ThingspaceOauthCredentialsBuilder::init(
            $this->thingspaceOauthManager->getOAuthClientId(),
            $this->thingspaceOauthManager->getOAuthClientSecret()
        )->oAuthToken($this->thingspaceOauthManager->getOAuthToken());
    }

    public function getVzM2mSessionTokenCredentials(): VzM2mSessionTokenCredentials
    {
        return $this->vzM2mSessionTokenManager;
    }

    public function getVzM2mSessionTokenCredentialsBuilder(): ?VzM2mSessionTokenCredentialsBuilder
    {
        if (empty($this->vzM2mSessionTokenManager->getVZM2MToken())) {
            return null;
        }
        return VzM2mSessionTokenCredentialsBuilder::init($this->vzM2mSessionTokenManager->getVZM2MToken());
    }

    /**
     * Get the client configuration as an associative array
     *
     * @see VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder::getConfiguration()
     */
    public function getConfiguration(): array
    {
        return $this->toBuilder()->getConfiguration();
    }

    /**
     * Clone this client and override given configuration options
     *
     * @see VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder::build()
     */
    public function withConfiguration(array $config): self
    {
        return new self(array_merge($this->config, $config));
    }

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::THINGSPACE): string
    {
        return $this->client->getGlobalRequest($server)->getQueryUrl();
    }

    /**
     * Returns Thing Space Quality of Service API Actions Controller
     */
    public function getThingSpaceQualityOfServiceAPIActionsController(): ThingSpaceQualityOfServiceAPIActionsController
    {
        if ($this->thingSpaceQualityOfServiceAPIActions == null) {
            $this->thingSpaceQualityOfServiceAPIActions = new ThingSpaceQualityOfServiceAPIActionsController(
                $this->client
            );
        }
        return $this->thingSpaceQualityOfServiceAPIActions;
    }

    /**
     * Returns Exclusions Controller
     */
    public function getExclusionsController(): ExclusionsController
    {
        if ($this->exclusions == null) {
            $this->exclusions = new ExclusionsController($this->client);
        }
        return $this->exclusions;
    }

    /**
     * Returns O Auth Authorization Controller
     */
    public function getOAuthAuthorizationController(): OAuthAuthorizationController
    {
        if ($this->oAuthAuthorization == null) {
            $this->oAuthAuthorization = new OAuthAuthorizationController($this->client);
        }
        return $this->oAuthAuthorization;
    }

    /**
     * Get the defined global configurations
     */
    private function getGlobalConfiguration(): array
    {
        return [HeaderParam::init('VZ-M2M-Token', $this->getVZM2MToken2())];
    }

    /**
     * A map of all base urls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::OAUTH_SERVER => 'https://thingspace.verizon.com/api/ts/v1',
            Server::THINGSPACE => 'https://thingspace.verizon.com/api'
        ],
        Environment::STAGING => [
            Server::OAUTH_SERVER => 'https://staging.thingspace.verizon.com/api/ts/v1',
            Server::THINGSPACE => 'https://staging.thingspace.verizon.com/api'
        ]
    ];
}
