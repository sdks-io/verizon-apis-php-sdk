<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\HyperPreciseLocationResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\AggregatedReportCallbackResult;
use VerizonLib\Models\AggregateSessionReport;
use VerizonLib\Models\AggregateSessionReportRequest;
use VerizonLib\Models\SessionReport;
use VerizonLib\Models\SessionReportRequest;
use VerizonLib\Server;

class DeviceReportsController extends BaseController
{
    /**
     * Calculate aggregated report per day with number of sessions and usage information. User will receive
     * synchronous response for specified list of devices (Max 10) and date range (Max 180 days).
     *
     * @param AggregateSessionReportRequest $body Aggregated report request.
     *
     * @return ApiResponse Response from the API call
     */
    public function calculateAggregatedReportSynchronous(AggregateSessionReportRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/report/aggregate')
            ->server(Server::HYPER_PRECISE_LOCATION)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request.', HyperPreciseLocationResultException::class))
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'Unauthorized request. Access token is missing or invalid.',
                    HyperPreciseLocationResultException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Forbidden request.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('Bad request. Not found.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '409',
                ErrorType::init('Bad request. Conflict state.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', HyperPreciseLocationResultException::class)
            )
            ->type(AggregateSessionReport::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Calculate aggregated report per day with number of sessions and usage information. User will receive
     * an asynchronous callback for the specified list of devices (Max 10000) and date range (Max 180 days).
     *
     * @param AggregateSessionReportRequest $body Aggregated session report request.
     *
     * @return ApiResponse Response from the API call
     */
    public function calculateAggregatedReportAsynchronous(AggregateSessionReportRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/report/async/aggregate')
            ->server(Server::HYPER_PRECISE_LOCATION)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request.', HyperPreciseLocationResultException::class))
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'Unauthorized request. Access token is missing or invalid.',
                    HyperPreciseLocationResultException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Forbidden request.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('Bad request. Not found.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '409',
                ErrorType::init('Bad request. Conflict state.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', HyperPreciseLocationResultException::class)
            )
            ->type(AggregatedReportCallbackResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Detailed report of session duration and number of bytes transferred per day.
     *
     * @param SessionReportRequest $body Request for sessions report.
     *
     * @return ApiResponse Response from the API call
     */
    public function getSessionsReport(SessionReportRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/report/sessions')
            ->server(Server::HYPER_PRECISE_LOCATION)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request.', HyperPreciseLocationResultException::class))
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'Unauthorized request. Access token is missing or invalid.',
                    HyperPreciseLocationResultException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Forbidden request.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('Bad request. Not found.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '409',
                ErrorType::init('Bad request. Conflict state.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', HyperPreciseLocationResultException::class)
            )
            ->type(SessionReport::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
