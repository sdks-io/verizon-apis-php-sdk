<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\EdgeServiceOnboardingResultErrorException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\CSPProfile;
use VerizonLib\Models\CSPProfileData;
use VerizonLib\Models\EdgeServiceOnboardingDeleteResult;
use VerizonLib\Server;

class CSPProfilesController extends BaseController
{
    /**
     * Create a new cloud credential within user's organization.
     *
     * @param string $accountName User account name.
     * @param CSPProfile $body
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function createCloudCredential(
        string $accountName,
        CSPProfile $body,
        ?string $correlationId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/cspProfiles/')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('403', ErrorType::init('Forbidden.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '429',
                ErrorType::init('Too many requests.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('0', ErrorType::init('Forbidden.', EdgeServiceOnboardingResultErrorException::class))
            ->type(CSPProfile::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Remove a cloud credential from user's organization.
     *
     * @param string $accountName User account name.
     * @param string $id CSP Profile Id.
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function removeCloudCredential(string $accountName, string $id, ?string $correlationId = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/v1/cspProfiles/{id}')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('id', $id),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('404', ErrorType::init('Not Found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(EdgeServiceOnboardingDeleteResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch available cloud credentials within user's organization.
     *
     * @param string $accountName User account name.
     * @param string|null $correlationId
     * @param string|null $q Use the coloumn (:) character to separate multiple query params eg
     *        type=AWS:awsCspProfile.credType=ACCESS_KEY,ROLE_ARN:state=UNVERIFIED,VERIFIED.
     * @param int|null $limit Number of items to return.
     * @param int|null $offSet Id of the last respose value in the previous list.
     *
     * @return ApiResponse Response from the API call
     */
    public function fetchCloudCredentialDetails(
        string $accountName,
        ?string $correlationId = null,
        ?string $q = null,
        ?int $limit = null,
        ?int $offSet = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/cspProfiles/')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                HeaderParam::init('correlationId', $correlationId),
                QueryParam::init('q', $q),
                QueryParam::init('limit', $limit),
                QueryParam::init('offSet', $offSet)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('403', ErrorType::init('Forbidden.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '429',
                ErrorType::init('Too many requests.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('0', ErrorType::init('Forbidden.', EdgeServiceOnboardingResultErrorException::class))
            ->type(CSPProfileData::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
