<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\FotaV1ResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\FotaV1SuccessResult;
use VerizonLib\Models\V1LicensesAssignedRemovedRequest;
use VerizonLib\Models\V1LicensesAssignedRemovedResult;
use VerizonLib\Models\V1ListOfLicensesToRemove;
use VerizonLib\Models\V1ListOfLicensesToRemoveRequest;
use VerizonLib\Models\V1ListOfLicensesToRemoveResult;
use VerizonLib\Server;

class SoftwareManagementLicensesV1Controller extends BaseController
{
    /**
     * Assigns licenses to a specified list of devices so that firmware upgrades can be scheduled for those
     * devices.
     *
     * @deprecated
     *
     * @param string $account Account identifier in "##########-#####".
     * @param V1LicensesAssignedRemovedRequest $body IMEIs of the devices to assign licenses to.
     *
     * @return ApiResponse Response from the API call
     */
    public function assignLicensesToDevices(string $account, V1LicensesAssignedRemovedRequest $body): ApiResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated.', E_USER_DEPRECATED);

        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/licenses/{account}/assign')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(V1LicensesAssignedRemovedResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Remove unused licenses from device.
     *
     * @deprecated
     *
     * @param string $account Account identifier in "##########-#####".
     * @param V1LicensesAssignedRemovedRequest $body IMEIs of the devices to remove licenses from.
     *
     * @return ApiResponse Response from the API call
     */
    public function removeLicensesFromDevices(string $account, V1LicensesAssignedRemovedRequest $body): ApiResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated.', E_USER_DEPRECATED);

        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/licenses/{account}/remove')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(V1LicensesAssignedRemovedResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a list of devices from which licenses will be removed if the number of MRC licenses becomes
     * less than the number of assigned licenses.
     *
     * @deprecated
     *
     * @param string $account Account identifier in "##########-#####".
     * @param V1ListOfLicensesToRemoveRequest $body Cancellation candidate device list.
     *
     * @return ApiResponse Response from the API call
     */
    public function createListOfLicensesToRemove(string $account, V1ListOfLicensesToRemoveRequest $body): ApiResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated.', E_USER_DEPRECATED);

        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/licenses/{account}/cancel')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(V1ListOfLicensesToRemoveResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Deletes the entire list of cancellation candidate devices.
     *
     * @deprecated
     *
     * @param string $account Account identifier in "##########-#####".
     *
     * @return ApiResponse Response from the API call
     */
    public function deleteListOfLicensesToRemove(string $account): ApiResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated.', E_USER_DEPRECATED);

        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/licenses/{account}/cancel')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(FotaV1SuccessResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns a list of devices from which licenses will be removed if the number of MRC licenses becomes
     * less than the number of assigned licenses.
     *
     * @deprecated
     *
     * @param string $account Account identifier in "##########-#####".
     * @param string $startIndex The zero-based number of the first record to return. Set
     *        startIndex=0 for the first request. If there are more than 1,000 devices in the
     *        response, set startIndex=1000 for the second request, 2000 for the third request,
     *        etc.
     *
     * @return ApiResponse Response from the API call
     */
    public function listLicensesToRemove(string $account, string $startIndex): ApiResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated.', E_USER_DEPRECATED);

        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/licenses/{account}/cancel/index/{startIndex}')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('startIndex', $startIndex));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(V1ListOfLicensesToRemove::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
