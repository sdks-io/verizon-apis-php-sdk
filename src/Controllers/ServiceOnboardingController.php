<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\EdgeServiceOnboardingResultErrorException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\CategoryTypeEnum;
use VerizonLib\Models\ClusterInfoDetails;
use VerizonLib\Models\CurrentStatus;
use VerizonLib\Models\EdgeServiceOnboardingDeleteResult;
use VerizonLib\Models\Service;
use VerizonLib\Models\ServiceFile;
use VerizonLib\Models\ServiceManagementResult;
use VerizonLib\Models\Services;
use VerizonLib\Models\SortDirectionEnum;
use VerizonLib\Server;
use VerizonLib\Utils\FileWrapper;

class ServiceOnboardingController extends BaseController
{
    /**
     * Fetch all organizational services in the platform.
     *
     * @param string $accountName User account name.
     * @param string|null $correlationId
     * @param string|null $name Name of the service whose information needs to be fetched.
     * @param string|null $q Use the comma (:) character to separate multiple values eg
     *        type=myService:workloads.packageType=Helm,YAML:state=DRAFTED,VALIDATION_COMPLETED.
     * @param int|null $limit Number of items to return.
     * @param int|null $offSet Id of the last respose value in the previous list.
     * @param string|null $sortKey Sorts the response by an attribute. Default is createdDate.
     * @param string|null $sortDir Sorts the response. Use asc for ascending or desc for descending
     *        order. The default is desc.
     * @param bool|null $detailsFlag Default as true. If it is true, then it will return all
     *        details.
     *
     * @return ApiResponse Response from the API call
     */
    public function listServices(
        string $accountName,
        ?string $correlationId = null,
        ?string $name = null,
        ?string $q = null,
        ?int $limit = null,
        ?int $offSet = null,
        ?string $sortKey = 'createdDate',
        ?string $sortDir = null,
        ?bool $detailsFlag = true
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/services')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                HeaderParam::init('correlationId', $correlationId),
                QueryParam::init('name', $name),
                QueryParam::init('q', $q),
                QueryParam::init('limit', $limit),
                QueryParam::init('offSet', $offSet),
                QueryParam::init('sortKey', $sortKey),
                QueryParam::init('sortDir', $sortDir)->serializeBy([SortDirectionEnum::class, 'checkValue']),
                QueryParam::init('detailsFlag', $detailsFlag)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('404', ErrorType::init('Not Found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(Services::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new service within user's organization.
     *
     * @param string $accountName User account name.
     * @param Service $body
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function registerService(string $accountName, Service $body, ?string $correlationId = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/services')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('403', ErrorType::init('Forbidden.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '415',
                ErrorType::init('Unsupported media type.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '429',
                ErrorType::init('Too many requests.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(Service::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Upload workload payload/package in the MEC platform.
     *
     * @param string $accountName User account name.
     * @param string $serviceName Service name to which the file is going to be associated.
     * @param string $version Version of the service being used.
     * @param string $categoryType Type of the file being uploaded.
     * @param string $categoryName `workloadName` used in the service while creation.
     * @param FileWrapper $payload Payload/file which is to be uploaded should be provided in
     *        formData.
     * @param string|null $correlationId
     * @param string|null $categoryVersion It is mandatory for only service file, not mandatory for
     *        workload and workflow file.
     *
     * @return ApiResponse Response from the API call
     */
    public function uploadServiceWorkloadFile(
        string $accountName,
        string $serviceName,
        string $version,
        string $categoryType,
        string $categoryName,
        FileWrapper $payload,
        ?string $correlationId = null,
        ?string $categoryVersion = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/v1/files/{serviceName}/{version}/uploadAndValidate'
        )
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('serviceName', $serviceName),
                TemplateParam::init('version', $version),
                QueryParam::init('categoryType', $categoryType)->serializeBy([CategoryTypeEnum::class, 'checkValue']),
                QueryParam::init('categoryName', $categoryName),
                FormParam::init('payload', $payload),
                HeaderParam::init('correlationId', $correlationId),
                QueryParam::init('categoryVersion', $categoryVersion)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(ServiceFile::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch a service details within user's organization using service name and version.
     *
     * @param string $accountName User account name.
     * @param string $serviceName Name of the service whose information needs to be fetched.
     * @param string $version Version of service whose information needs to be fetched.
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function listServiceDetails(
        string $accountName,
        string $serviceName,
        string $version,
        ?string $correlationId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/services/{serviceName}/{version}')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('serviceName', $serviceName),
                TemplateParam::init('version', $version),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('404', ErrorType::init('Not Found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '0',
                ErrorType::init('Unexpected error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(Service::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Initiate testing of a service in sandbox environment per claim based on service's compatibility(s).
     *
     * @param string $accountName User account name.
     * @param string $serviceId An id of the service created e.g. UUID.
     * @param string $claimId Id of the claim created e.g. UUID.
     * @param ClusterInfoDetails $body
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function startServiceClaimSandBoxTesting(
        string $accountName,
        string $serviceId,
        string $claimId,
        ClusterInfoDetails $body,
        ?string $correlationId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::PUT,
            '/v1/services/{serviceId}/claims/{claimId}/sandBoxStart'
        )
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('serviceId', $serviceId),
                TemplateParam::init('claimId', $claimId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '0',
                ErrorType::init('Unexpected error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(ServiceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Remove a service from user's organization.
     *
     * @param string $accountName User account name.
     * @param string $serviceName Name of the service which is about to be deleted.
     * @param string $version Version of the service which is about to be deleted.
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function removeService(
        string $accountName,
        string $serviceName,
        string $version,
        ?string $correlationId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/v1/services/{serviceName}/{version}')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('serviceName', $serviceName),
                TemplateParam::init('version', $version),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(EdgeServiceOnboardingDeleteResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Start service certification process. On successful completion of this process, service's status will
     * change to certified.
     *
     * @param string $accountName User account name.
     * @param string $serviceName Name of the service e.g. any sub string of serviceName.
     * @param string $version Version of service which is to be certified.
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function stopServiceTesting(
        string $accountName,
        string $serviceName,
        string $version,
        ?string $correlationId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/v1/services/{serviceName}/{version}/certify')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('serviceName', $serviceName),
                TemplateParam::init('version', $version),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '0',
                ErrorType::init('Unexpected error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(ServiceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Start the process to change a service's status to "Ready to Use". On success, service's status will
     * be changed to "Ready to Use". Only a ready to use service can be deployed in production environment.
     *
     * @param string $accountName User account name.
     * @param string $serviceName Name of the service e.g. any sub string of serviceName.
     * @param string $version Version of the service which is already certified and is ready for
     *        public use.
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function markServiceAsReadyForPublicUse(
        string $accountName,
        string $serviceName,
        string $version,
        ?string $correlationId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::PUT,
            '/v1/services/{serviceName}/{version}/readyToPublicUse'
        )
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('serviceName', $serviceName),
                TemplateParam::init('version', $version),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '0',
                ErrorType::init('Unexpected error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(ServiceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Start service onboarding process to kick off service artifact validation and making the service
     * ready for sandbox testing. On successful completion of this process system will generate claims for
     * each selected cloud provider using which user can start sandbox testing.
     *
     * @param string $accountName User account name.
     * @param string $serviceName Name of the service which is to be onboarded.
     * @param string $version Version of service which is to be onboarded.
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function startServiceOnboarding(
        string $accountName,
        string $serviceName,
        string $version,
        ?string $correlationId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::PUT,
            '/v1/services/{serviceName}/{version}/startOnboarding'
        )
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('serviceName', $serviceName),
                TemplateParam::init('version', $version),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('403', ErrorType::init('Forbidden.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '415',
                ErrorType::init('Unsupported media type.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '429',
                ErrorType::init('Too many requests.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(ServiceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Check current status of job for a service using job ID.
     *
     * @param string $accountName User account name.
     * @param string $jobId Auto-generated Id of the job.
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function getServiceJobStatus(string $accountName, string $jobId, ?string $correlationId = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/services/{jobId}/status')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('jobId', $jobId),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(CurrentStatus::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Start publishing a service. On successful completion, service's status can be marked as Publish.
     *
     * @param string $accountName User account name.
     * @param string $serviceName Name of the service e.g. any sub string of serviceName.
     * @param string $version Version of service which is to be published.
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function startServicePublishing(
        string $accountName,
        string $serviceName,
        string $version,
        ?string $correlationId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/v1/services/{serviceName}/{version}/publish')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('serviceName', $serviceName),
                TemplateParam::init('version', $version),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '0',
                ErrorType::init('Unexpected error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(ServiceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
