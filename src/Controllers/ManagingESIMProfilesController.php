<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\GIORestErrorResponseException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\DeviceProfileRequest;
use VerizonLib\Models\GIODeactivateDeviceProfileRequest;
use VerizonLib\Models\GIOProfileRequest;
use VerizonLib\Models\GIORequestResponse;
use VerizonLib\Server;

class ManagingESIMProfilesController extends BaseController
{
    /**
     * Activate a device with either a lead or local profile.
     *
     * @param GIOProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function activateADeviceProfile(GIOProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/activate')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GIORestErrorResponseException::class))
            ->type(GIORequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Enable a device lead or local profile.
     *
     * @param DeviceProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function enableADeviceProfile(DeviceProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/enable')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GIORestErrorResponseException::class))
            ->type(GIORequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Deactivate the lead or local profile. **Note:** to reactivate the profile, use the **Activate**
     * endpoint above.
     *
     * @param GIODeactivateDeviceProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function deactivateADeviceProfile(GIODeactivateDeviceProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/deactivate')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GIORestErrorResponseException::class))
            ->type(GIORequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Enable the Global IoT Orchestration device profile for download.
     *
     * @param DeviceProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function enableADeviceProfileForDownload(DeviceProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/m2m/v1/devices/profile/actions/download_enable'
        )
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GIORestErrorResponseException::class))
            ->type(GIORequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Download a Global IoT Orchestration device profile.
     *
     * @param DeviceProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function downloadADeviceProfile(DeviceProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/download')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GIORestErrorResponseException::class))
            ->type(GIORequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete a device profile for Global IoT Orchestration. **Note:** the profile must be deactivated
     * first!
     *
     * @param DeviceProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function deleteADeviceProfile(DeviceProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/delete')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GIORestErrorResponseException::class))
            ->type(GIORequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
