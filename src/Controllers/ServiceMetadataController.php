<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\EdgeServiceOnboardingResultErrorException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\Category;
use VerizonLib\Models\Tag;
use VerizonLib\Server;

class ServiceMetadataController extends BaseController
{
    /**
     * Create a new Tag within user's organization.
     *
     * @param string $accountName User account name.
     * @param Tag[] $body
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function createServiceTag(string $accountName, array $body, ?string $correlationId = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/tag/')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '415',
                ErrorType::init('Unsupported media type.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(Tag::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new category within user's organization.
     *
     * @param string $accountName User account name.
     * @param Category[] $body
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function createServiceCategory(string $accountName, array $body, ?string $correlationId = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/category')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(Category::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
