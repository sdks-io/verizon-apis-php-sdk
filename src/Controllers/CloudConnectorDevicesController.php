<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\ChangeConfigurationRequest;
use VerizonLib\Models\ChangeConfigurationResponse;
use VerizonLib\Models\FindDeviceByPropertyResponseList;
use VerizonLib\Models\QuerySubscriptionRequest;
use VerizonLib\Models\RemoveDeviceRequest;
use VerizonLib\Models\SearchDeviceByPropertyResponseList;
use VerizonLib\Models\SearchDeviceEventHistoryRequest;
use VerizonLib\Models\SearchDeviceEventHistoryResponseList;
use VerizonLib\Models\SearchSensorHistoryRequest;
use VerizonLib\Models\SearchSensorHistoryResponseList;
use VerizonLib\Server;

class CloudConnectorDevicesController extends BaseController
{
    /**
     * Change configuration values on a device, such as setting how often a device records and reports
     * sensor readings.
     *
     * @param ChangeConfigurationRequest $body The request body changes configuration values on a
     *        device.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateDevicesConfigurationValue(ChangeConfigurationRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/devices/configuration/actions/set')
            ->server(Server::CLOUD_CONNECTOR)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(ChangeConfigurationResponse::class)->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Find devices by property values. Returns an array of all matching device resources.
     *
     * @param QuerySubscriptionRequest $body The request body specifies fields and values to match.
     *
     * @return ApiResponse Response from the API call
     */
    public function findDeviceByPropertyValues(QuerySubscriptionRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/devices/actions/query')
            ->server(Server::CLOUD_CONNECTOR)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(FindDeviceByPropertyResponseList::class)->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Search for devices by property values. Returns an array of all matching device resources.
     *
     * @param QuerySubscriptionRequest $body The request body specifies fields and values to match.
     *
     * @return ApiResponse Response from the API call
     */
    public function searchDevicesResourcesByPropertyValues(QuerySubscriptionRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/devices/actions/search')
            ->server(Server::CLOUD_CONNECTOR)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(SearchDeviceByPropertyResponseList::class)->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Search device event history to find events that match criteria.Sensor readings, configuration
     * changes, and other device data are all stored as events.
     *
     * @param SearchDeviceEventHistoryRequest $body The device identifier and fields to match in the
     *        search.
     *
     * @return ApiResponse Response from the API call
     */
    public function searchDeviceEventHistory(SearchDeviceEventHistoryRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/devices/fields/actions/history/search')
            ->server(Server::CLOUD_CONNECTOR)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->type(SearchDeviceEventHistoryResponseList::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns the readings of a specified sensor, with the most recent reading first. Sensor readings are
     * stored as events; this request an array of events.
     *
     * @param string $fieldname The name of the sensor.
     * @param SearchSensorHistoryRequest $body The device identifier and fields to match in the
     *        search.
     *
     * @return ApiResponse Response from the API call
     */
    public function searchSensorReadings(string $fieldname, SearchSensorHistoryRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/devices/fields/{fieldname}/actions/history')
            ->server(Server::CLOUD_CONNECTOR)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('fieldname', $fieldname),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()->type(SearchSensorHistoryResponseList::class)->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Remove a device from a ThingSpace account.
     *
     * @param RemoveDeviceRequest $body The request body identifies the device to delete.
     *
     * @return ApiResponse Response from the API call
     */
    public function deleteDeviceFromAccount(RemoveDeviceRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/devices/actions/delete')
            ->server(Server::CLOUD_CONNECTOR)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
