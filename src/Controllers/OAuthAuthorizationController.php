<?php

declare(strict_types=1);

/*
 * VerizonThingSpaceQualityOfServiceAPIEndpointsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Controllers;

use Core\Request\Parameters\AdditionalFormParams;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Exceptions\ApiException;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Exceptions\OAuthProviderException;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Models\OAuthToken;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Server;

class OAuthAuthorizationController extends BaseController
{
    /**
     * Create a new OAuth 2 token.
     *
     * @param string $authorization Authorization header in Basic auth format
     * @param string|null $scope Requested scopes as a space-delimited list.
     * @param array|null $fieldParameters Additional optional form parameters are supported by this
     *        endpoint
     *
     * @return OAuthToken Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function requestTokenThingspaceOauth(
        string $authorization,
        ?string $scope = null,
        array $fieldParameters = null
    ): OAuthToken {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/oauth2/token')
            ->server(Server::OAUTH_SERVER)
            ->parameters(
                FormParam::init('grant_type', 'client_credentials'),
                HeaderParam::init('Authorization', $authorization),
                FormParam::init('scope', $scope),
                AdditionalFormParams::init($fieldParameters)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('OAuth 2 provider returned an error.', OAuthProviderException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'OAuth 2 provider says client authentication failed.',
                    OAuthProviderException::class
                )
            )
            ->type(OAuthToken::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
