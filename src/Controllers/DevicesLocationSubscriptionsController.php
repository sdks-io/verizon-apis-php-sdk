<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\DeviceLocationResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\BillUsageRequest;
use VerizonLib\Models\DeviceLocationSubscription;
use VerizonLib\Server;

class DevicesLocationSubscriptionsController extends BaseController
{
    /**
     * This subscriptions endpoint retrieves an account's current location subscription status.
     *
     * @param string $account Account identifier in "##########-#####".
     *
     * @return ApiResponse Response from the API call
     */
    public function getLocationServiceSubscriptionStatus(string $account): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/subscriptions/{account}')
            ->server(Server::DEVICE_LOCATION)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', DeviceLocationResultException::class))
            ->type(DeviceLocationSubscription::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows user to search for billable usage for accounts based on the provided date range.
     *
     * @param BillUsageRequest $body Request to obtain billable usage for accounts.
     *
     * @return ApiResponse Response from the API call
     */
    public function getLocationServiceUsage(BillUsageRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/usage')
            ->server(Server::DEVICE_LOCATION)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', '*/*'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', DeviceLocationResultException::class))
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
