<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\IntelligenceResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\AnomalyDetectionRequest;
use VerizonLib\Models\AnomalyDetectionSettings;
use VerizonLib\Models\IntelligenceSuccessResult;
use VerizonLib\Server;

class AnomalySettingsController extends BaseController
{
    /**
     * Uses the subscribed account ID to activate anomaly detection and set threshold values.
     *
     * @param AnomalyDetectionRequest $body Request to activate anomaly detection.
     *
     * @return ApiResponse Response from the API call
     */
    public function activateAnomalyDetection(AnomalyDetectionRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/intelligence/anomaly/settings')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('An error occurred.', IntelligenceResultException::class))
            ->type(IntelligenceSuccessResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieves the current anomaly detection settings for an account.
     *
     * @param string $accountName The name of the subscribed account.
     *
     * @return ApiResponse Response from the API call
     */
    public function listAnomalyDetectionSettings(string $accountName): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/m2m/v1/intelligence/{accountName}/anomaly/settings'
        )->server(Server::THINGSPACE)->auth('oAuth2')->parameters(TemplateParam::init('accountName', $accountName));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('An error occurred.', IntelligenceResultException::class))
            ->type(AnomalyDetectionSettings::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Resets the thresholds to zero.
     *
     * @param string $accountName The name of the subscribed account.
     *
     * @return ApiResponse Response from the API call
     */
    public function resetAnomalyDetectionParameters(string $accountName): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::PUT,
            '/m2m/v1/intelligence/{accountName}/anomaly/settings/reset'
        )->server(Server::THINGSPACE)->auth('oAuth2')->parameters(TemplateParam::init('accountName', $accountName));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('An error occurred.', IntelligenceResultException::class))
            ->type(IntelligenceSuccessResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
