<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\DeviceLocationResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\DeviceLocationSuccessResult;
use VerizonLib\Models\UsageTriggerAddRequest;
use VerizonLib\Models\UsageTriggerResponse;
use VerizonLib\Models\UsageTriggerUpdateRequest;
use VerizonLib\Server;

class UsageTriggerManagementController extends BaseController
{
    /**
     * Create a new usage trigger, which will send an alert when the number of device location service
     * transactions reaches a specified percentage of the monthly subscription amount.
     *
     *
     * @param UsageTriggerAddRequest|null $body License assignment.
     *
     * @return ApiResponse Response from the API call
     */
    public function createNewTrigger(?UsageTriggerAddRequest $body = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/usage/triggers')
            ->server(Server::SUBSCRIPTION_SERVER)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error', DeviceLocationResultException::class))
            ->type(UsageTriggerResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update an existing usage trigger
     *
     *
     * @param string $triggerId Usage trigger ID
     * @param UsageTriggerUpdateRequest|null $body New trigger values
     *
     * @return ApiResponse Response from the API call
     */
    public function updateTrigger(string $triggerId, ?UsageTriggerUpdateRequest $body = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/usage/triggers/{triggerId}')
            ->server(Server::SUBSCRIPTION_SERVER)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('triggerId', $triggerId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error', DeviceLocationResultException::class))
            ->type(UsageTriggerResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * eletes the specified usage trigger from the given account
     *
     * @param string $accountName Account name
     * @param string $triggerId Usage trigger ID
     *
     * @return ApiResponse Response from the API call
     */
    public function deleteTrigger(string $accountName, string $triggerId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::DELETE,
            '/usage/accounts/{accountName}/triggers/{triggerId}'
        )
            ->server(Server::SUBSCRIPTION_SERVER)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('accountName', $accountName),
                TemplateParam::init('triggerId', $triggerId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error', DeviceLocationResultException::class))
            ->type(DeviceLocationSuccessResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
