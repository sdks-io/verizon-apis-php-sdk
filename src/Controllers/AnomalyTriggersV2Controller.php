<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\IntelligenceResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\AnomalyDetectionTrigger;
use VerizonLib\Models\AnomalyTriggerResult;
use VerizonLib\Models\CreateTriggerRequestOptions;
use VerizonLib\Models\IntelligenceSuccessResult;
use VerizonLib\Models\UpdateTriggerRequestOptions;
use VerizonLib\Server;

class AnomalyTriggersV2Controller extends BaseController
{
    /**
     * Creates the trigger to identify an anomaly.
     *
     * @param CreateTriggerRequestOptions[] $body Request to create an anomaly trigger.
     *
     * @return ApiResponse Response from the API call
     */
    public function createAnomalyDetectionTriggerV2(array $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v2/triggers')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('An error occurred.', IntelligenceResultException::class))
            ->type(AnomalyDetectionTrigger::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates an existing trigger using the account name.
     *
     * @param UpdateTriggerRequestOptions[] $body Request to update existing trigger.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateAnomalyDetectionTriggerV2(array $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/m2m/v2/triggers')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('An error occurred.', IntelligenceResultException::class))
            ->type(IntelligenceSuccessResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieves the values for a specific trigger ID.
     *
     * @param string $triggerId The trigger ID of a specific trigger.
     *
     * @return ApiResponse Response from the API call
     */
    public function listAnomalyDetectionTriggerSettingsV2(string $triggerId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/m2m/v2/triggers/{triggerId}')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('triggerId', $triggerId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('An error occurred.', IntelligenceResultException::class))
            ->type(AnomalyTriggerResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
