<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\HyperPreciseLocationResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\CallbackCreated;
use VerizonLib\Models\CallbackRegistered;
use VerizonLib\Models\HyperPreciseLocationCallback;
use VerizonLib\Server;

class HyperPreciseLocationCallbacksController extends BaseController
{
    /**
     * Find registered callback listener for account by account number.
     *
     * @param string $accountNumber A unique identifier for an account.
     *
     * @return ApiResponse Response from the API call
     */
    public function listRegisteredCallbacks(string $accountNumber): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/callbacks')
            ->server(Server::HYPER_PRECISE_LOCATION)
            ->auth('global')
            ->parameters(QueryParam::init('accountNumber', $accountNumber));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request.', HyperPreciseLocationResultException::class))
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'Unauthorized request. Access token is missing or invalid.',
                    HyperPreciseLocationResultException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Forbidden request.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('Bad request. Not found.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '409',
                ErrorType::init('Bad request. Conflict state.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', HyperPreciseLocationResultException::class)
            )
            ->type(CallbackCreated::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Registers a URL at which an account receives asynchronous responses and other messages from a
     * ThingSpace Platform callback service. The messages are REST messages. You are responsible for
     * creating and running a listening process on your server at that URL to receive and parse the
     * messages.
     *
     * @param string $accountNumber A unique identifier for an account.
     * @param HyperPreciseLocationCallback $body
     *
     * @return ApiResponse Response from the API call
     */
    public function registerCallback(string $accountNumber, HyperPreciseLocationCallback $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/callbacks')
            ->server(Server::HYPER_PRECISE_LOCATION)
            ->auth('global')
            ->parameters(
                QueryParam::init('accountNumber', $accountNumber),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request.', HyperPreciseLocationResultException::class))
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'Unauthorized request. Access token is missing or invalid.',
                    HyperPreciseLocationResultException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Forbidden request.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('Bad request. Not found.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '409',
                ErrorType::init('Bad request. Conflict state.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', HyperPreciseLocationResultException::class)
            )
            ->type(CallbackRegistered::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Stops ThingSpace from sending callback messages for the specified account and listener name.
     *
     * @param string $accountNumber A unique identifier for a account.
     * @param string $service The name of the callback service that will be deleted.
     *
     * @return ApiResponse Response from the API call
     */
    public function deregisterCallback(string $accountNumber, string $service): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/callbacks')
            ->server(Server::HYPER_PRECISE_LOCATION)
            ->auth('global')
            ->parameters(QueryParam::init('accountNumber', $accountNumber), QueryParam::init('service', $service));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request.', HyperPreciseLocationResultException::class))
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'Unauthorized request. Access token is missing or invalid.',
                    HyperPreciseLocationResultException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Forbidden request.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('Bad request. Not found.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '409',
                ErrorType::init('Bad request. Conflict state.', HyperPreciseLocationResultException::class)
            )
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', HyperPreciseLocationResultException::class)
            )
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
