<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\ConnectivityManagementResultException;
use VerizonLib\Exceptions\RestErrorResponseException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\AccountDeviceListRequest;
use VerizonLib\Models\AccountDeviceListResult;
use VerizonLib\Models\AddDevicesRequest;
use VerizonLib\Models\AddDevicesResult;
use VerizonLib\Models\AssociateLabelRequest;
use VerizonLib\Models\BilledusageListRequest;
use VerizonLib\Models\CarrierActionsRequest;
use VerizonLib\Models\CarrierActivateRequest;
use VerizonLib\Models\CarrierDeactivateRequest;
use VerizonLib\Models\ChangeDeviceIdRequest;
use VerizonLib\Models\CheckOrderStatusRequest;
use VerizonLib\Models\ConnectionHistoryResult;
use VerizonLib\Models\ContactInfoUpdateRequest;
use VerizonLib\Models\CustomFieldsUpdateRequest;
use VerizonLib\Models\DeleteDevicesRequest;
use VerizonLib\Models\DeleteDevicesResult;
use VerizonLib\Models\DeviceActivationRequest;
use VerizonLib\Models\DeviceAggregateUsageListRequest;
use VerizonLib\Models\DeviceConnectionListRequest;
use VerizonLib\Models\DeviceCostCenterRequest;
use VerizonLib\Models\DeviceExtendedDiagnosticsRequest;
use VerizonLib\Models\DeviceExtendedDiagnosticsResult;
use VerizonLib\Models\DeviceManagementResult;
use VerizonLib\Models\DeviceMismatchListRequest;
use VerizonLib\Models\DeviceMismatchListResult;
use VerizonLib\Models\DevicePrlListRequest;
use VerizonLib\Models\DeviceProvisioningHistoryListRequest;
use VerizonLib\Models\DeviceProvisioningHistoryListResult;
use VerizonLib\Models\DeviceSuspensionStatusRequest;
use VerizonLib\Models\DeviceUploadRequest;
use VerizonLib\Models\DeviceUsageListRequest;
use VerizonLib\Models\DeviceUsageListResult;
use VerizonLib\Models\GoToStateRequest;
use VerizonLib\Models\LabelsList;
use VerizonLib\Models\MoveDeviceRequest;
use VerizonLib\Models\RequestResponse;
use VerizonLib\Models\ServicePlanUpdateRequest;
use VerizonLib\Models\UploadsActivatesDeviceRequest;
use VerizonLib\Server;

class DeviceManagementController extends BaseController
{
    /**
     * If the devices do not already exist in the account, this API resource adds them before activation.
     *
     * @param CarrierActivateRequest $body Request for activating a service on devices.
     *
     * @return ApiResponse Response from the API call
     */
    public function activateServiceForDevices(CarrierActivateRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/actions/activate')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Use this API if you want to manage some device settings before you are ready to activate service for
     * the devices.
     *
     * @param AddDevicesRequest $body Devices to add.
     *
     * @return ApiResponse Response from the API call
     */
    public function addDevices(AddDevicesRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/actions/add')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(AddDevicesResult::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Sends a CarrierService callback message for each device in the request when the contact information
     * has been changed, or if there was a problem and the change could not be completed.
     *
     * @param ContactInfoUpdateRequest $body Request to update contact information for devices.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateDevicesContactInformation(ContactInfoUpdateRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/m2m/v1/devices/actions/contactinfo')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Sends a CarrierService callback message for each device in the request when the custom fields have
     * been changed, or if there was a problem and the change could not be completed.
     *
     * @param CustomFieldsUpdateRequest $body Request to update custom field of devices.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateDevicesCustomFields(CustomFieldsUpdateRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/m2m/v1/devices/actions/customFields')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Deactivating service for a device may result in an early termination fee (ETF) being charged to the
     * account, depending on the terms of the contract with Verizon. If your contract allows ETF waivers
     * and if you want to use one for a particular deactivation, set the etfWaiver value to True.
     *
     * @param CarrierDeactivateRequest $body Request to deactivate service for one or more devices.
     *
     * @return ApiResponse Response from the API call
     */
    public function deactivateServiceForDevices(CarrierDeactivateRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/actions/deactivate')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Use this API to remove unneeded devices from an account.
     *
     * @param DeleteDevicesRequest $body Devices to delete.
     *
     * @return ApiResponse Response from the API call
     */
    public function deleteDeactivatedDevices(DeleteDevicesRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/actions/delete')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeleteDevicesResult::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns information about a single device or information about all devices that match the given
     * parameters. Returned information includes device provisioning state, service plan, MDN, MIN, and IP
     * address.
     *
     * @param AccountDeviceListRequest $body Device information query.
     *
     * @return ApiResponse Response from the API call
     */
    public function listDevicesInformation(AccountDeviceListRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/actions/list')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(AccountDeviceListResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns a list of all 4G devices with an ICCID (SIM) that was not activated with the expected IMEI
     * (hardware) during a specified time frame.
     *
     * @param DeviceMismatchListRequest $body Request to list devices with mismatched IMEIs and
     *        ICCIDs.
     *
     * @return ApiResponse Response from the API call
     */
    public function listDevicesWithImeiIccidMismatch(DeviceMismatchListRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/actions/list/imeiiccidmismatch')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceMismatchListResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Move active devices from one billing account to another within a customer profile.
     *
     * @param MoveDeviceRequest $body Request to move devices between accounts.
     *
     * @return ApiResponse Response from the API call
     */
    public function moveDevicesWithinAccountsOfProfile(MoveDeviceRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/m2m/v1/devices/actions/move')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Changes the provisioning state of one or more devices to a specified customer-defined service and
     * state.
     *
     * @param GoToStateRequest $body Request to change device state to one defined by the user.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateDevicesState(GoToStateRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/m2m/v1/devices/actions/gotostate')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Changes the service plan for one or more devices.
     *
     * @param ServicePlanUpdateRequest $body Request to change device service plan.
     *
     * @return ApiResponse Response from the API call
     */
    public function changeDevicesServicePlan(ServicePlanUpdateRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/m2m/v1/devices/actions/plan')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Suspends service for one or more devices.
     *
     * @param CarrierActionsRequest $body Request to suspend service for one or more devices.
     *
     * @return ApiResponse Response from the API call
     */
    public function suspendServiceForDevices(CarrierActionsRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/actions/suspend')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Restores service to one or more suspended devices.
     *
     * @param CarrierActionsRequest $body Request to restore services of one or more suspended
     *        devices.
     *
     * @return ApiResponse Response from the API call
     */
    public function restoreServiceForSuspendedDevices(CarrierActionsRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/actions/restore')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Checks whether specified devices are registered by the manufacturer with the Verizon network and are
     * available to be activated.
     *
     * @param DeviceActivationRequest $body Request to check if devices can be activated or not.
     *
     * @return ApiResponse Response from the API call
     */
    public function checkDevicesAvailabilityForActivation(DeviceActivationRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/availability/actions/list')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Each response includes a maximum of 500 records. To obtain more records, you can call the API
     * multiple times, adjusting the earliest value each time to start where the previous request finished.
     *
     * @param DeviceConnectionListRequest $body Query to retrieve device connection history.
     *
     * @return ApiResponse Response from the API call
     */
    public function retrieveDeviceConnectionHistory(DeviceConnectionListRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/m2m/v1/devices/connections/actions/listHistory'
        )
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(ConnectionHistoryResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Changes or removes the CostCenterCode value or customer name and address (Primary Place of Use) for
     * one or more devices.
     *
     * @param DeviceCostCenterRequest $body Request to update cost center code value for one or more
     *        devices.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateDevicesCostCenterCode(DeviceCostCenterRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/m2m/v1/devices/costCenter')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns extended diagnostic information about a specified device, including connectivity,
     * provisioning, billing and location status.
     *
     * @param DeviceExtendedDiagnosticsRequest $body Request to query extended diagnostics
     *        information for a device.
     *
     * @return ApiResponse Response from the API call
     */
    public function getDeviceExtendedDiagnosticInformation(DeviceExtendedDiagnosticsRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/m2m/v1/devices/extendeddiagnostics/actions/list'
        )
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceExtendedDiagnosticsResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns the provisioning history of a specified device during a specified time period.
     *
     * @param DeviceProvisioningHistoryListRequest $body Query to obtain device provisioning
     *        history.
     *
     * @return ApiResponse Response from the API call
     */
    public function listDevicesProvisioningHistory(DeviceProvisioningHistoryListRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/history/actions/list')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceProvisioningHistoryListResult::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * 4G and GSM devices do not have a PRL.
     *
     * @param DevicePrlListRequest $body Request to query device PRL.
     *
     * @return ApiResponse Response from the API call
     */
    public function listCurrentDevicesPRLVersion(DevicePrlListRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/prl/actions/list')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns DeviceSuspensionStatus callback messages containing the current device state and information
     * on how many days a device has been suspended and can continue to be suspended.
     *
     * @param DeviceSuspensionStatusRequest $body Request to obtain service suspenstion status for a
     *        device.
     *
     * @return ApiResponse Response from the API call
     */
    public function getDeviceServiceSuspensionStatus(DeviceSuspensionStatusRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/suspension/status')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns the network data usage history of a device during a specified time period.
     *
     * @param DeviceUsageListRequest $body Request to obtain usage history for a specific device.
     *
     * @return ApiResponse Response from the API call
     */
    public function listDevicesUsageHistory(DeviceUsageListRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/usage/actions/list')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceUsageListResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * The information is returned in a callback response, so you must register a URL for DeviceUsage
     * callback messages using the POST /callbacks API.
     *
     * @param DeviceAggregateUsageListRequest $body A request to retrieve aggregated device usage
     *        history information.
     *
     * @return ApiResponse Response from the API call
     */
    public function retrieveAggregateDeviceUsageHistory(DeviceAggregateUsageListRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/usage/actions/list/aggregate')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Changes the identifier of a 3G or 4G device to match hardware changes made for a line of service.
     * Use this request to transfer the line of service and the MDN to new hardware, or to change the MDN.
     *
     * @param string $serviceType Identifier type.
     * @param ChangeDeviceIdRequest $body Request to update device id.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateDeviceId(string $serviceType, ChangeDeviceIdRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/m2m/v1/devices/{serviceType}/actions/deviceId')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('serviceType', $serviceType),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This corresponds to the M2M-MC SOAP interface, ```DeviceUploadService```.
     *
     * @param DeviceUploadRequest $body Device Upload Query
     *
     * @return ApiResponse Response from the API call
     */
    public function deviceUpload(DeviceUploadRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/actions/upload')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error Response', RestErrorResponseException::class))
            ->type(RequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Gets billed usage for for either multiple devices or an entire billing account.
     *
     * @param BilledusageListRequest $body Request to list devices with mismatched IMEIs and ICCIDs.
     *
     * @return ApiResponse Response from the API call
     */
    public function billedUsageInfo(BilledusageListRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/usage/actions/billedusage/list')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Allows you to associate your own usage segmentation label with a device.
     *
     * @param AssociateLabelRequest $body Request to associate a label to a device.
     *
     * @return ApiResponse Response from the API call
     */
    public function usageSegmentationLabelAssociation(AssociateLabelRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/m2m/v1/devices/actions/usagesegmentationlabels'
        )
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Allow customers to remove the associated label from a device.
     *
     * @param string $accountName The numeric name of the account.
     * @param LabelsList $labelList A list of the Label IDs to remove from the exclusion list.
     *
     * @return ApiResponse Response from the API call
     */
    public function usageSegmentationLabelDeletion(string $accountName, LabelsList $labelList): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::DELETE,
            '/m2m/v1/devices/actions/usagesegmentationlabels'
        )
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(QueryParam::init('accountName', $accountName), QueryParam::init('LabelList', $labelList));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Uploads and activates device identifiers and SKUs for new devices from OEMs to Verizon.
     *
     * @param UploadsActivatesDeviceRequest $body Request to Uploads and activates device.
     *
     * @return ApiResponse Response from the API call
     */
    public function activationOrderStatus(UploadsActivatesDeviceRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/actions/uploadactivate')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Checks the status of an activation order and lists where the order is in the provisioning process.
     *
     * @param CheckOrderStatusRequest $body The request body identifies the device and reporting
     *        period that you want included in the report.
     *
     * @return ApiResponse Response from the API call
     */
    public function uploadDeviceIdentifier(CheckOrderStatusRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/requests/status')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(DeviceManagementResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
