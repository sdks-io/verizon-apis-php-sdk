<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\ConnectivityManagementResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\LogInRequest;
use VerizonLib\Models\LogInResult;
use VerizonLib\Models\LogOutRequest;
use VerizonLib\Models\SessionResetPasswordRequest;
use VerizonLib\Models\SessionResetPasswordResult;
use VerizonLib\Server;

class SessionManagementController extends BaseController
{
    /**
     * Initiates a Connectivity Management session and returns a VZ-M2M session token that is required in
     * subsequent API requests.
     *
     * @param LogInRequest|null $body Request to initiate a session.
     *
     * @return ApiResponse Response from the API call
     */
    public function startConnectivityManagementSession(?LogInRequest $body = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/session/login')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(LogInResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Ends a Connectivity Management session.
     *
     * @return ApiResponse Response from the API call
     */
    public function endConnectivityManagementSession(): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/session/logout')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2');

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(LogOutRequest::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * The new password is effective immediately. Passwords do not expire, but Verizon recommends changing
     * your password every 90 days.
     *
     * @param SessionResetPasswordRequest $body Request with current password that needs to be
     *        reset.
     *
     * @return ApiResponse Response from the API call
     */
    public function resetConnectivityManagementPassword(SessionResetPasswordRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/m2m/v1/session/password/actions/reset')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(SessionResetPasswordResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
