<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\EdgeServiceLaunchResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\ServiceInstancesResult;
use VerizonLib\Models\ServiceInstancesResultSetItem;
use VerizonLib\Server;

class ServiceInstancesController extends BaseController
{
    /**
     * Retrieve information of a service instance.
     *
     * @param string $serviceInstanceId Unique Id of the service instance.
     * @param string $accountName User account name.
     * @param bool|null $cluster
     *
     * @return ApiResponse Response from the API call
     */
    public function retrieveServiceInstance(
        string $serviceInstanceId,
        string $accountName,
        ?bool $cluster = false
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/service/instances/{serviceInstanceId}')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                TemplateParam::init('serviceInstanceId', $serviceInstanceId),
                HeaderParam::init('AccountName', $accountName),
                QueryParam::init('cluster', $cluster)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn(
                '415',
                ErrorType::init('Unsupported media type.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn('0', ErrorType::init('Unexpected error.', EdgeServiceLaunchResultException::class))
            ->type(ServiceInstancesResultSetItem::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieve all instances for all services.
     *
     * @param string $accountName User account name.
     * @param string|null $offset
     * @param string|null $state
     * @param string|null $limit
     * @param string|null $searchbyname
     * @param string[]|null $listofstate
     *
     * @return ApiResponse Response from the API call
     */
    public function listServicesInstances(
        string $accountName,
        ?string $offset = null,
        ?string $state = null,
        ?string $limit = null,
        ?string $searchbyname = null,
        ?array $listofstate = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/service/instances')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                QueryParam::init('offset', $offset),
                QueryParam::init('state', $state),
                QueryParam::init('limit', $limit),
                QueryParam::init('searchbyname', $searchbyname),
                QueryParam::init('listofstate', $listofstate)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn(
                '415',
                ErrorType::init('Unsupported media type.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn('0', ErrorType::init('Unexpected error.', EdgeServiceLaunchResultException::class))
            ->type(ServiceInstancesResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
