<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\FotaV1ResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\CallbackServiceEnum;
use VerizonLib\Models\FotaV1CallbackRegistrationRequest;
use VerizonLib\Models\FotaV1CallbackRegistrationResult;
use VerizonLib\Models\FotaV1SuccessResult;
use VerizonLib\Models\RegisteredCallbacks;
use VerizonLib\Server;

class SoftwareManagementCallbacksV1Controller extends BaseController
{
    /**
     * Returns the name and endpoint URL of the callback listening services registered for a given account.
     *
     * @param string $account Account identifier in "##########-#####".
     *
     * @return ApiResponse Response from the API call
     */
    public function listRegisteredCallbacks(string $account): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/callbacks/{account}')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('global')
            ->parameters(TemplateParam::init('account', $account));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(RegisteredCallbacks::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Registers a URL to receive RESTful messages from a callback service when new firmware versions are
     * available and when upgrades start and finish.
     *
     * @param string $account Account identifier in "##########-#####".
     * @param FotaV1CallbackRegistrationRequest $body Callback details.
     *
     * @return ApiResponse Response from the API call
     */
    public function registerCallback(string $account, FotaV1CallbackRegistrationRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/callbacks/{account}')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('global')
            ->parameters(
                TemplateParam::init('account', $account),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(FotaV1CallbackRegistrationResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Deregisters the callback endpoint and stops ThingSpace from sending FOTA callback messages for the
     * specified account.
     *
     * @param string $account Account identifier in "##########-#####".
     * @param string $service Callback type. Must be 'Fota' for Software Management Services API.
     *
     * @return ApiResponse Response from the API call
     */
    public function deregisterCallback(string $account, string $service): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/callbacks/{account}/name/{service}')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('global')
            ->parameters(
                TemplateParam::init('account', $account),
                TemplateParam::init('service', $service)->serializeBy([CallbackServiceEnum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(FotaV1SuccessResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
