<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\FotaV1ResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\DeviceListQueryResult;
use VerizonLib\Models\DeviceUpgradeHistory;
use VerizonLib\Models\UpgradeListQueryResult;
use VerizonLib\Models\UpgradeStatusEnum;
use VerizonLib\Server;

class SoftwareManagementReportsV1Controller extends BaseController
{
    /**
     * Returns an array of all devices in the specified account. Each device object includes information
     * needed for managing firmware, including the device make and model, MDN and IMEI, and current
     * firmware version.
     *
     * @param string $account Account identifier in "##########-#####".
     * @param string $startIndex Only return devices with IMEIs larger than this value. Use 0 for
     *        the first request. If `hasMoreData`=true in the response, use the `lastSeenDeviceId`
     *        value from the response as the startIndex in the next request.
     *
     * @return ApiResponse Response from the API call
     */
    public function listAccountDevices(string $account, string $startIndex): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/devices/{account}/index/{startIndex}')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('startIndex', $startIndex));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(DeviceListQueryResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns a list of all upgrades with a specified status.
     *
     * @param string $account Account identifier in "##########-#####".
     * @param string $upgradeStatus The status of the upgrades that you want to retrieve.
     * @param string $startIndex The zero-based number of the first record to return. Set
     *        startIndex=0 for the first request. If `hasMoreFlag`=true in the response, use the
     *        `lastSeenUpgradeId` value from the response as the startIndex in the next request.
     *
     * @return ApiResponse Response from the API call
     */
    public function listUpgradesForSpecifiedStatus(
        string $account,
        string $upgradeStatus,
        string $startIndex
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/reports/{account}/status/{upgradeStatus}/index/{startIndex}'
        )
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                TemplateParam::init('upgradeStatus', $upgradeStatus)
                    ->serializeBy([UpgradeStatusEnum::class, 'checkValue']),
                TemplateParam::init('startIndex', $startIndex)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(UpgradeListQueryResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns the upgrade history of the specified device from the previous six months.
     *
     * @param string $account Account identifier in "##########-#####".
     * @param string $deviceId The IMEI of the device.
     *
     * @return ApiResponse Response from the API call
     */
    public function getDeviceFirmwareUpgradeHistory(string $account, string $deviceId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/reports/{account}/devices/{deviceId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('deviceId', $deviceId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(DeviceUpgradeHistory::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
