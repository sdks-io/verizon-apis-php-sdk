<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\FotaV3ResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\DeviceIMEI;
use VerizonLib\Models\DeviceListResult;
use VerizonLib\Models\DevicesProtocolEnum;
use VerizonLib\Models\V3AccountDeviceList;
use VerizonLib\Server;

class AccountDevicesController extends BaseController
{
    /**
     * Retrieve account device information such as reported firmware on the devices.
     *
     * @param string $acc Account identifier.
     * @param string|null $lastSeenDeviceId Last seen device identifier.
     * @param string|null $protocol Filter to retrieve a specific protocol type used.
     *
     * @return ApiResponse Response from the API call
     */
    public function getAccountDeviceInformation(
        string $acc,
        ?string $lastSeenDeviceId = null,
        ?string $protocol = DevicesProtocolEnum::LW_M2M
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/devices/{acc}')
            ->server(Server::SOFTWARE_MANAGEMENT_V3)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('acc', $acc),
                QueryParam::init('lastSeenDeviceId', $lastSeenDeviceId),
                QueryParam::init('protocol', $protocol)->serializeBy([DevicesProtocolEnum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV3ResultException::class))
            ->type(V3AccountDeviceList::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieve device information for a list of devices on an account.
     *
     * @param string $acc Account identifier.
     * @param DeviceIMEI $body Request device list information.
     *
     * @return ApiResponse Response from the API call
     */
    public function listAccountDevicesInformation(string $acc, DeviceIMEI $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/devices/{acc}')
            ->server(Server::SOFTWARE_MANAGEMENT_V3)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('acc', $acc),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV3ResultException::class))
            ->type(DeviceListResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
