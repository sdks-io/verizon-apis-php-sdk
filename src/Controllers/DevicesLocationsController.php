<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\DeviceLocationResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\AsynchronousLocationRequestResult;
use VerizonLib\Models\Location;
use VerizonLib\Models\LocationReport;
use VerizonLib\Models\LocationReportStatus;
use VerizonLib\Models\LocationRequest;
use VerizonLib\Models\SynchronousLocationRequestResult;
use VerizonLib\Models\TransactionID;
use VerizonLib\Server;

class DevicesLocationsController extends BaseController
{
    /**
     * This locations endpoint retrieves the locations for a list of devices.
     *
     * @param LocationRequest $body Request to obtain location of devices.
     *
     * @return ApiResponse Response from the API call
     */
    public function listDevicesLocationsSynchronous(LocationRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/locations')
            ->server(Server::DEVICE_LOCATION)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Unexpected error.', DeviceLocationResultException::class))
            ->type(Location::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Requests the current or cached location of up to 10,000 IoT or consumer devices (phones, tablets.
     * etc.). This request returns a synchronous transaction ID, and the location information for each
     * device is returned asynchronously as a DeviceLocation callback message.
     *
     * @param LocationRequest $body An asynchronous request to obtain locations of devices.
     *
     * @return ApiResponse Response from the API call
     */
    public function listDevicesLocationsAsynchronous(LocationRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/devicelocations')
            ->server(Server::DEVICE_LOCATION)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', '*/*'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Unexpected error.', DeviceLocationResultException::class))
            ->type(SynchronousLocationRequestResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Cancel a queued or unfinished device location request.
     *
     * @param string $accountName Account identifier in "##########-#####".
     * @param string $txid Transaction ID of the request to cancel, from the synchronous response to
     *        the original request.
     *
     * @return ApiResponse Response from the API call
     */
    public function cancelDeviceLocationRequest(string $accountName, string $txid): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/devicelocations/{txid}')
            ->server(Server::DEVICE_LOCATION)
            ->auth('oAuth2')
            ->parameters(QueryParam::init('accountName', $accountName), TemplateParam::init('txid', $txid));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Unexpected error.', DeviceLocationResultException::class))
            ->type(TransactionID::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Request an asynchronous device location report.
     *
     * @param LocationRequest $body Request for device location report.
     *
     * @return ApiResponse Response from the API call
     */
    public function createLocationReport(LocationRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/locationreports')
            ->server(Server::DEVICE_LOCATION)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', '*/*'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Unexpected error.', DeviceLocationResultException::class))
            ->type(AsynchronousLocationRequestResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Download a completed asynchronous device location report.
     *
     * @param string $account Account identifier in "##########-#####".
     * @param string $txid Transaction ID from POST /locationreports response.
     * @param int $startindex Zero-based number of the first record to return.
     *
     * @return ApiResponse Response from the API call
     */
    public function retrieveLocationReport(string $account, string $txid, int $startindex): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/locationreports/{account}/report/{txid}/index/{startindex}'
        )
            ->server(Server::DEVICE_LOCATION)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                TemplateParam::init('txid', $txid),
                TemplateParam::init('startindex', $startindex)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Unexpected error.', DeviceLocationResultException::class))
            ->type(LocationReport::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns the current status of a requested device location report.
     *
     * @param string $account Account identifier in "##########-#####".
     * @param string $txid Transaction ID of the report.
     *
     * @return ApiResponse Response from the API call
     */
    public function getLocationReportStatus(string $account, string $txid): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/locationreports/{account}/report/{txid}/status')
            ->server(Server::DEVICE_LOCATION)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('txid', $txid));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Unexpected error.', DeviceLocationResultException::class))
            ->type(LocationReportStatus::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Cancel a queued device location report.
     *
     * @param string $account Account identifier in "##########-#####".
     * @param string $txid Transaction ID of the report to cancel.
     *
     * @return ApiResponse Response from the API call
     */
    public function cancelQueuedLocationReportGeneration(string $account, string $txid): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/locationreports/{account}/report/{txid}')
            ->server(Server::DEVICE_LOCATION)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('txid', $txid));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Unexpected error.', DeviceLocationResultException::class))
            ->type(TransactionID::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
