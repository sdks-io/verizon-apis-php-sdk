<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\EdgeServiceLaunchResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\CreateServiceLaunchRequest;
use VerizonLib\Models\ServiceLaunchRequestResult;
use VerizonLib\Models\ServiceLaunchRequestsResult;
use VerizonLib\Server;

class ServiceLaunchRequestsController extends BaseController
{
    /**
     * Create a request for launching a service.
     *
     * @param string $accountName User account name.
     * @param string $userName
     * @param string|null $correlationId
     * @param CreateServiceLaunchRequest|null $body Request for launching a service.
     *
     * @return ApiResponse Response from the API call
     */
    public function createServiceLaunchRequest(
        string $accountName,
        string $userName,
        ?string $correlationId = null,
        ?CreateServiceLaunchRequest $body = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/service/launch/request')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                HeaderParam::init('userName', $userName),
                HeaderParam::init('Content-Type', '*/*'),
                HeaderParam::init('correlationId', $correlationId),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('HTTP 400 Bad Request.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('HTTP 401 Unauthorized.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn('404', ErrorType::init('HTTP 404 Not found.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeServiceLaunchResultException::class)
            )
            ->type(ServiceLaunchRequestResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get information related to a service launch request.
     *
     * @param string $accountName User account name.
     * @param string $userName
     * @param string|null $id Service launch request Id.
     * @param string|null $correlationId
     * @param string|null $name Service request name.
     * @param int|null $offset
     * @param int|null $limit
     *
     * @return ApiResponse Response from the API call
     */
    public function getServiceLaunchRequest(
        string $accountName,
        string $userName,
        ?string $id = null,
        ?string $correlationId = null,
        ?string $name = null,
        ?int $offset = null,
        ?int $limit = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/service/launch/request')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                HeaderParam::init('userName', $userName),
                QueryParam::init('id', $id),
                HeaderParam::init('correlationId', $correlationId),
                QueryParam::init('name', $name),
                QueryParam::init('offset', $offset),
                QueryParam::init('limit', $limit)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn('403', ErrorType::init('Forbidden.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn(
                '415',
                ErrorType::init('Unsupported media type.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn('429', ErrorType::init('Too many requests.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn('0', ErrorType::init('Unexpected error.', EdgeServiceLaunchResultException::class))
            ->type(ServiceLaunchRequestsResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows the user to submit a service request that describes the resource requirements
     * of a service. This API submit an object of the service request and moves it to STATE from “DRAFT”
     * to “INSTANTIATED” and triggers the launch flow.
     *
     * @param string $id A unique Id assigned to the request by system calling API.
     * @param string $accountName User account name.
     * @param string $userName
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function submitServiceLaunchRequest(
        string $id,
        string $accountName,
        string $userName,
        ?string $correlationId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/v1/service/launch/request/{id}/submit')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('AccountName', $accountName),
                HeaderParam::init('userName', $userName),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('HTTP 400 Bad Request.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('HTTP 401 Unauthorized.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn('412', ErrorType::init('Precondition Failed.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeServiceLaunchResultException::class)
            )
            ->type(ServiceLaunchRequestResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
