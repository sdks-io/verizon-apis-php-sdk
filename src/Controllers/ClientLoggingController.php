<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\FotaV2ResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\DeviceLog;
use VerizonLib\Models\DeviceLoggingRequest;
use VerizonLib\Models\DeviceLoggingStatus;
use VerizonLib\Server;

class ClientLoggingController extends BaseController
{
    /**
     * Returns an array of all devices in the specified account for which logging is enabled.
     *
     * @param string $account Account identifier.
     *
     * @return ApiResponse Response from the API call
     */
    public function listDevicesWithLoggingEnabled(string $account): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/logging/{account}/devices')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(DeviceLoggingStatus::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Each customer may have a maximum of 20 devices enabled for logging.
     *
     * @param string $account Account identifier.
     * @param DeviceLoggingRequest $body Device logging information.
     *
     * @return ApiResponse Response from the API call
     */
    public function enableLoggingForDevices(string $account, DeviceLoggingRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/logging/{account}/devices')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                HeaderParam::init('Content-Type', '*/*'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(DeviceLoggingStatus::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Turn logging off for a list of devices.
     *
     * @param string $account Account identifier.
     * @param string $deviceIds The list of device IDs.
     *
     * @return ApiResponse Response from the API call
     */
    public function disableLoggingForDevices(string $account, string $deviceIds): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/logging/{account}/devices')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), QueryParam::init('deviceIds', $deviceIds));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Enables logging for a specific device.
     *
     * @param string $account Account identifier.
     * @param string $deviceId Device IMEI identifier.
     *
     * @return ApiResponse Response from the API call
     */
    public function enableDeviceLogging(string $account, string $deviceId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/logging/{account}/devices/{deviceId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('deviceId', $deviceId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(DeviceLoggingStatus::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Disables logging for a specific device.
     *
     * @param string $account Account identifier.
     * @param string $deviceId Device IMEI identifier.
     *
     * @return ApiResponse Response from the API call
     */
    public function disableDeviceLogging(string $account, string $deviceId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/logging/{account}/devices/{deviceId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('deviceId', $deviceId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Gets logs for a specific device.
     *
     * @param string $account Account identifier.
     * @param string $deviceId Device IMEI identifier.
     *
     * @return ApiResponse Response from the API call
     */
    public function listDeviceLogs(string $account, string $deviceId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/logging/{account}/devices/{deviceId}/logs')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('deviceId', $deviceId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(DeviceLog::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
