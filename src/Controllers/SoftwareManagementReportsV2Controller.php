<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\FotaV2ResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\DeviceSoftwareUpgrade;
use VerizonLib\Models\SoftwarePackage;
use VerizonLib\Models\V2AccountDeviceList;
use VerizonLib\Models\V2CampaignDevice;
use VerizonLib\Models\V2CampaignHistory;
use VerizonLib\Server;

class SoftwareManagementReportsV2Controller extends BaseController
{
    /**
     * This endpoint allows user to list a certain type of software of an account.
     *
     * @param string $account Account identifier.
     * @param string|null $distributionType Filter distributionType to get specific type of
     *        software. Value is LWM2M, OMD-DM or HTTP.
     *
     * @return ApiResponse Response from the API call
     */
    public function listAvailableSoftware(string $account, ?string $distributionType = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/software/{account}')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                QueryParam::init('distributionType', $distributionType)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(SoftwarePackage::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * The device endpoint gets devices information of an account.
     *
     * @param string $account Account identifier.
     * @param string|null $lastSeenDeviceId Last seen device identifier.
     * @param string|null $distributionType Filter distributionType to get specific type of devices.
     *        Values is LWM2M, OMD-DM or HTTP.
     *
     * @return ApiResponse Response from the API call
     */
    public function listAccountDevices(
        string $account,
        ?string $lastSeenDeviceId = null,
        ?string $distributionType = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/devices/{account}')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                QueryParam::init('lastSeenDeviceId', $lastSeenDeviceId),
                QueryParam::init('distributionType', $distributionType)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(V2AccountDeviceList::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * The endpoint allows user to get software upgrade history of a device based on device IMEI.
     *
     * @param string $account Account identifier.
     * @param string $deviceId Device IMEI identifier.
     *
     * @return ApiResponse Response from the API call
     */
    public function getDeviceFirmwareUpgradeHistory(string $account, string $deviceId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/reports/{account}/devices/{deviceId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('deviceId', $deviceId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(DeviceSoftwareUpgrade::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * The report endpoint allows user to get campaign history of an account for specified status.
     *
     * @param string $account Account identifier.
     * @param string $campaignStatus Status of the campaign.
     * @param string|null $lastSeenCampaignId Last seen campaign Id.
     *
     * @return ApiResponse Response from the API call
     */
    public function getCampaignHistoryByStatus(
        string $account,
        string $campaignStatus,
        ?string $lastSeenCampaignId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/reports/{account}/campaigns')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                QueryParam::init('campaignStatus', $campaignStatus),
                QueryParam::init('lastSeenCampaignId', $lastSeenCampaignId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(V2CampaignHistory::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * The report endpoint allows user to get the full list of device of a campaign.
     *
     * @param string $account Account identifier.
     * @param string $campaignId Campaign identifier.
     * @param string|null $lastSeenDeviceId Last seen device identifier.
     *
     * @return ApiResponse Response from the API call
     */
    public function getCampaignDeviceStatus(
        string $account,
        string $campaignId,
        ?string $lastSeenDeviceId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/reports/{account}/campaigns/{campaignId}/devices'
        )
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                TemplateParam::init('campaignId', $campaignId),
                QueryParam::init('lastSeenDeviceId', $lastSeenDeviceId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(V2CampaignDevice::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
