<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\GIORestErrorResponseException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\GetDeviceListWithProfilesRequest;
use VerizonLib\Models\GIORequestResponse;
use VerizonLib\Models\ProvhistoryRequest;
use VerizonLib\Models\StatusResponse;
use VerizonLib\Server;

class DeviceActionsController extends BaseController
{
    /**
     * Allows the profile to fetch the complete device list. This works with Verizon US and Global profiles.
     *
     * @param GetDeviceListWithProfilesRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function retrieveTheGlobalDeviceList(GetDeviceListWithProfilesRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v2/devices/actions/list')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GIORestErrorResponseException::class))
            ->type(GIORequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retreive the provisioning history of a specific device or devices.
     *
     * @param ProvhistoryRequest $body Device Provisioning History
     *
     * @return ApiResponse Response from the API call
     */
    public function retrieveDeviceProvisioningHistory(ProvhistoryRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v2/devices/history/actions/list')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GIORestErrorResponseException::class))
            ->type(GIORequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get the status of an asynchronous request made with the Device Actions.
     *
     * @param string $accountName
     * @param string $requestID
     *
     * @return ApiResponse Response from the API call
     */
    public function getAsynchronousRequestStatus(string $accountName, string $requestID): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/m2m/v2/accounts/{accountName}/requests/{requestID}/status'
        )
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('accountName', $accountName),
                TemplateParam::init('requestID', $requestID)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response', GIORestErrorResponseException::class))
            ->type(StatusResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
