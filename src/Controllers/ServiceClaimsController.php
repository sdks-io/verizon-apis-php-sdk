<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\EdgeServiceOnboardingResultErrorException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\AssociateCloudCredentialResult;
use VerizonLib\Models\ClaimStatusRequest;
use VerizonLib\Models\CSPProfileIdRequest;
use VerizonLib\Models\ServiceClaims;
use VerizonLib\Models\SortDirectionEnum;
use VerizonLib\Server;

class ServiceClaimsController extends BaseController
{
    /**
     * Associate an existing cloud credential with a service's claim which will be used to connect to
     * user's cloud provider.
     *
     * @param string $accountName User account name.
     * @param string $serviceId System generated unique identifier of the service which user is
     *        using.
     * @param string $claimId System generated unique identifier for the claim which user is using.
     * @param CSPProfileIdRequest $body
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function associateCloudCredentialWithServiceClaim(
        string $accountName,
        string $serviceId,
        string $claimId,
        CSPProfileIdRequest $body,
        ?string $correlationId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/v1/services/{serviceId}/claims/{claimId}/associateCspProfile'
        )
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('serviceId', $serviceId),
                TemplateParam::init('claimId', $claimId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('404', ErrorType::init('Not Found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(AssociateCloudCredentialResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch all service's claim(s) associated with a service. Service claims are generated based on
     * service's compatibility with different cloud service provider.
     *
     * @param string $accountName User account name.
     * @param string $serviceId Auto-generated Id of the claim whose information needs to be
     *        fetched.
     * @param string|null $correlationId
     * @param string|null $claimStatus Queries with claim status on the claims.
     * @param string|null $q Use the comma (,) character to separate multiple values,eg
     *        claimType=Public MEC:claims.sandBoxState=NOT_STARTED,STARTED.
     * @param int|null $limit Number of items to return.
     * @param int|null $offSet Id of the last respose value in the previous list.
     * @param string|null $sortKey Sorts the response by an attribute. Default is createdDate.
     * @param string|null $sortDir Sorts the response. Use asc for ascending or desc for descending
     *        order. The default is desc.
     * @param bool|null $detailsFlag Default as true. If it is true then it will return all details.
     *
     * @return ApiResponse Response from the API call
     */
    public function listServiceClaims(
        string $accountName,
        string $serviceId,
        ?string $correlationId = null,
        ?string $claimStatus = null,
        ?string $q = null,
        ?int $limit = null,
        ?int $offSet = null,
        ?string $sortKey = 'createdDate',
        ?string $sortDir = null,
        ?bool $detailsFlag = true
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/service/{serviceId}/claims')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('serviceId', $serviceId),
                HeaderParam::init('correlationId', $correlationId),
                QueryParam::init('claimStatus', $claimStatus),
                QueryParam::init('q', $q),
                QueryParam::init('limit', $limit),
                QueryParam::init('offSet', $offSet),
                QueryParam::init('sortKey', $sortKey),
                QueryParam::init('sortDir', $sortDir)->serializeBy([SortDirectionEnum::class, 'checkValue']),
                QueryParam::init('detailsFlag', $detailsFlag)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->type(ServiceClaims::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Using this API user can update service's claim status as complete/verified etc.
     *
     * @param string $accountName User account name.
     * @param string $serviceId System generated unique identifier of the service which user is
     *        using.
     * @param string $claimId System generated unique identifier of the claim which user is using.
     * @param ClaimStatusRequest $body
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function updateServiceClaimStatus(
        string $accountName,
        string $serviceId,
        string $claimId,
        ClaimStatusRequest $body,
        ?string $correlationId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/v1/services/{serviceId}/claims/{claimId}/claimStatus'
        )
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('serviceId', $serviceId),
                TemplateParam::init('claimId', $claimId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('404', ErrorType::init('Not Found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Mark a service's claim status as complete post successful verification of sandbox testing in the
     * respective sandbox environment.
     *
     * @param string $accountName User account name.
     * @param string $serviceId System generated unique identifier of the service which user is
     *        using.
     * @param string $claimId System generated unique identifier of the claim which user is using.
     * @param string|null $correlationId
     *
     * @return ApiResponse Response from the API call
     */
    public function markServiceClaimStatusAsCompleted(
        string $accountName,
        string $serviceId,
        string $claimId,
        ?string $correlationId = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/v1/services/{serviceId}/claims/{claimId}/claimStatusCompleted'
        )
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('AccountName', $accountName),
                TemplateParam::init('serviceId', $serviceId),
                TemplateParam::init('claimId', $claimId),
                HeaderParam::init('correlationId', $correlationId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad request.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->throwErrorOn('404', ErrorType::init('Not Found.', EdgeServiceOnboardingResultErrorException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceOnboardingResultErrorException::class)
            )
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
