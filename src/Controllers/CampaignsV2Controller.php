<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\FotaV2ResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\CampaignSoftware;
use VerizonLib\Models\CampaignSoftwareUpgrade;
use VerizonLib\Models\FotaV2SuccessResult;
use VerizonLib\Models\SchedulesSoftwareUpgradeRequest;
use VerizonLib\Models\UploadAndScheduleFileRequest;
use VerizonLib\Models\UploadAndScheduleFileResponse;
use VerizonLib\Models\V2AddOrRemoveDeviceRequest;
use VerizonLib\Models\V2AddOrRemoveDeviceResult;
use VerizonLib\Models\V2ChangeCampaignDatesRequest;
use VerizonLib\Server;

class CampaignsV2Controller extends BaseController
{
    /**
     * This endpoint allows user to schedule a software upgrade.
     *
     * @param string $account Account identifier.
     * @param CampaignSoftwareUpgrade $body Software upgrade information.
     *
     * @return ApiResponse Response from the API call
     */
    public function scheduleCampaignFirmwareUpgrade(string $account, CampaignSoftwareUpgrade $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/campaigns/{account}')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                HeaderParam::init('Content-Type', '*/*'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(CampaignSoftware::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows user to get information of a software upgrade.
     *
     * @param string $account Account identifier.
     * @param string $campaignId Software upgrade identifier.
     *
     * @return ApiResponse Response from the API call
     */
    public function getCampaignInformation(string $account, string $campaignId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/campaigns/{account}/{campaignId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('campaignId', $campaignId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(CampaignSoftware::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows user to Add or Remove devices to an existing software upgrade.
     *
     * @param string $account Account identifier.
     * @param string $campaignId Software upgrade information.
     * @param V2AddOrRemoveDeviceRequest $body Request to add or remove device to existing software
     *        upgrade information.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateCampaignFirmwareDevices(
        string $account,
        string $campaignId,
        V2AddOrRemoveDeviceRequest $body
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/campaigns/{account}/{campaignId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                TemplateParam::init('campaignId', $campaignId),
                HeaderParam::init('Content-Type', '*/*'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(V2AddOrRemoveDeviceResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows user to cancel software upgrade. A software upgrade already started can not be
     * cancelled.
     *
     * @param string $account Account identifier.
     * @param string $campaignId Unique identifier of campaign.
     *
     * @return ApiResponse Response from the API call
     */
    public function cancelCampaign(string $account, string $campaignId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/campaigns/{account}/{campaignId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('campaignId', $campaignId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(FotaV2SuccessResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows user to change campaign dates and time windows. Fields which need to remain
     * unchanged should be also provided.
     *
     * @param string $account Account identifier.
     * @param string $campaignId Software upgrade information.
     * @param V2ChangeCampaignDatesRequest $body New dates and time windows.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateCampaignDates(
        string $account,
        string $campaignId,
        V2ChangeCampaignDatesRequest $body
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/campaigns/{account}/{campaignId}/dates')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                TemplateParam::init('campaignId', $campaignId),
                HeaderParam::init('Content-Type', '*/*'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(CampaignSoftware::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * You can upload configuration files and schedule them in a campaign to devices.
     *
     * @param string $acc Account identifier.
     * @param UploadAndScheduleFileRequest $body Device logging information.
     *
     * @return ApiResponse Response from the API call
     */
    public function scheduleFileUpgrade(string $acc, UploadAndScheduleFileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/campaigns/files/{acc}')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('acc', $acc),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(UploadAndScheduleFileResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Campaign time windows for downloading and installing software are available as long as the device
     * OEM supports this.
     *
     * @param string $acc Account identifier.
     * @param SchedulesSoftwareUpgradeRequest $body Device logging information.
     *
     * @return ApiResponse Response from the API call
     */
    public function scheduleSWUpgradeHttpDevices(string $acc, SchedulesSoftwareUpgradeRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/campaigns/software/{acc}')
            ->server(Server::SOFTWARE_MANAGEMENT_V2)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('acc', $acc),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV2ResultException::class))
            ->type(UploadAndScheduleFileResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
