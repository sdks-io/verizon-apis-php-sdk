<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\ConnectivityManagementResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\Account;
use VerizonLib\Models\AccountLeadsResult;
use VerizonLib\Models\AccountStatesAndServices;
use VerizonLib\Server;

class AccountsController extends BaseController
{
    /**
     * Returns information about a specified account.
     *
     * @param string $aname Account name.
     *
     * @return ApiResponse Response from the API call
     */
    public function getAccountInformation(string $aname): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/m2m/v1/accounts/{aname}')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('aname', $aname));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(Account::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns a list and details of all custom services and states defined for a specified account.
     *
     * @param string $aname Account name.
     *
     * @return ApiResponse Response from the API call
     */
    public function listAccountStatesAndServices(string $aname): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/m2m/v1/accounts/{aname}/statesandservices')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('aname', $aname));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(AccountStatesAndServices::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * When HTTP status is 202, a URL will be returned in the Location header of the form /leads/{aname}?
     * next={token}. This URL can be used to request the next set of leads.
     *
     * @param string $aname Account name.
     * @param int|null $next Continue the previous query from the pageUrl in Location Header.
     *
     * @return ApiResponse Response from the API call
     */
    public function listAccountLeads(string $aname, ?int $next = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/m2m/v1/leads/{aname}')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('aname', $aname), QueryParam::init('next', $next));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error response.', ConnectivityManagementResultException::class))
            ->type(AccountLeadsResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
