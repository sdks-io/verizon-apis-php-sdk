<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\FotaV1ResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\Firmware;
use VerizonLib\Models\FirmwareUpgrade;
use VerizonLib\Models\FirmwareUpgradeChangeRequest;
use VerizonLib\Models\FirmwareUpgradeChangeResult;
use VerizonLib\Models\FirmwareUpgradeRequest;
use VerizonLib\Models\FotaV1SuccessResult;
use VerizonLib\Server;

class FirmwareV1Controller extends BaseController
{
    /**
     * Lists all device firmware images available for an account, based on the devices registered to that
     * account.
     *
     * @param string $account Account identifier in "##########-#####".
     *
     * @return ApiResponse Response from the API call
     */
    public function listAvailableFirmware(string $account): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/firmware/{account}')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(Firmware::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Schedules a firmware upgrade for devices.
     *
     * @param FirmwareUpgradeRequest $body Details of the firmware upgrade request.
     *
     * @return ApiResponse Response from the API call
     */
    public function scheduleFirmwareUpgrade(FirmwareUpgradeRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/upgrades')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(FirmwareUpgrade::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns information about a specified upgrade, include the target date of the upgrade, the list of
     * devices in the upgrade, and the status of the upgrade for each device.
     *
     * @param string $account Account identifier in "##########-#####".
     * @param string $upgradeId The UUID of the upgrade, returned by POST /upgrades when the upgrade
     *        was scheduled.
     *
     * @return ApiResponse Response from the API call
     */
    public function listFirmwareUpgradeDetails(string $account, string $upgradeId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/upgrades/{account}/upgrade/{upgradeId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('upgradeId', $upgradeId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(FirmwareUpgrade::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Add or remove devices from a scheduled upgrade.
     *
     * @param string $account Account identifier in "##########-#####".
     * @param string $upgradeId The UUID of the upgrade, returned by POST /upgrades when the upgrade
     *        was scheduled.
     * @param FirmwareUpgradeChangeRequest $body List of devices to add or remove.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateFirmwareUpgradeDevices(
        string $account,
        string $upgradeId,
        FirmwareUpgradeChangeRequest $body
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/upgrades/{account}/upgrade/{upgradeId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('account', $account),
                TemplateParam::init('upgradeId', $upgradeId),
                HeaderParam::init('Content-Type', '*/*'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(FirmwareUpgradeChangeResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Cancel a scheduled firmware upgrade.
     *
     * @param string $account Account identifier in "##########-#####".
     * @param string $upgradeId The UUID of the scheduled upgrade that you want to cancel.
     *
     * @return ApiResponse Response from the API call
     */
    public function cancelScheduledFirmwareUpgrade(string $account, string $upgradeId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/upgrades/{account}/upgrade/{upgradeId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V1)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('account', $account), TemplateParam::init('upgradeId', $upgradeId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV1ResultException::class))
            ->type(FotaV1SuccessResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
