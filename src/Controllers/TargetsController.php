<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\CreateIoTApplicationRequest;
use VerizonLib\Models\CreateIoTApplicationResponse;
use VerizonLib\Models\CreateTargetRequest;
use VerizonLib\Models\DeleteTargetRequest;
use VerizonLib\Models\GenerateExternalIDRequest;
use VerizonLib\Models\GenerateExternalIDResult;
use VerizonLib\Models\QueryTargetRequest;
use VerizonLib\Models\Target;
use VerizonLib\Server;

class TargetsController extends BaseController
{
    /**
     * Search for targets by property values. Returns an array of all matching target resources.
     *
     * @param QueryTargetRequest $body Search for targets by property values.
     *
     * @return ApiResponse Response from the API call
     */
    public function queryTarget(QueryTargetRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/targets/actions/query')
            ->server(Server::CLOUD_CONNECTOR)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(Target::class, 1)->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Remove a target from a ThingSpace account.
     *
     * @param DeleteTargetRequest $body The request body identifies the target to delete.
     *
     * @return ApiResponse Response from the API call
     */
    public function deleteTarget(DeleteTargetRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/targets/actions/delete')
            ->server(Server::CLOUD_CONNECTOR)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Define a target to receive data streams, alerts, or callbacks. After creating the target resource,
     * use its ID in a subscription to set up a data stream.
     *
     * @param CreateTargetRequest $body The request body provides the details of the target that you
     *        want to create.
     *
     * @return ApiResponse Response from the API call
     */
    public function createTarget(CreateTargetRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/targets')
            ->server(Server::CLOUD_CONNECTOR)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(Target::class)->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a unique string that ThingSpace will pass to AWS for increased security.
     *
     * @param GenerateExternalIDRequest $body The request body only contains the authenticating
     *        account.
     *
     * @return ApiResponse Response from the API call
     */
    public function generateTargetExternalID(GenerateExternalIDRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/targets/actions/newextid')
            ->server(Server::CLOUD_CONNECTOR)
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->type(GenerateExternalIDResult::class)->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Deploy a new Azure IoT Central application based on the Verizon ARM template within the specified
     * Azure Active Directory account.
     *
     * @param string $billingaccountID TThe ThingSpace ID of the authenticating billing account.
     * @param CreateIoTApplicationRequest $body The request body must include the UUID of the
     *        subscription that you want to update plus any properties that you want to change.
     *
     * @return ApiResponse Response from the API call
     */
    public function createAzureCentralIoTApplication(
        string $billingaccountID,
        CreateIoTApplicationRequest $body
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/targets/actions/newaic')
            ->server(Server::CLOUD_CONNECTOR)
            ->auth('oAuth2')
            ->parameters(
                HeaderParam::init('BillingaccountID', $billingaccountID),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()->type(CreateIoTApplicationResponse::class)->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
