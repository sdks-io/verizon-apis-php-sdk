<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\DeviceDiagnosticsResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\DiagnosticsObservationResult;
use VerizonLib\Models\ObservationRequest;
use VerizonLib\Server;

class DiagnosticsObservationsController extends BaseController
{
    /**
     * This endpoint allows the user to start or change observe diagnostics.
     *
     * @param ObservationRequest $body Request for device observation information.
     *
     * @return ApiResponse Response from the API call
     */
    public function startDiagnosticsObservation(ObservationRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/devices/attributes/actions/observe')
            ->server(Server::DEVICE_DIAGNOSTICS)
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', '*/*'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response.', DeviceDiagnosticsResultException::class))
            ->type(DiagnosticsObservationResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows the user to stop or reset observe diagnostics.
     *
     * @param string $transactionId The ID value associated with the transaction.
     * @param string $accountName The numeric account name.
     *
     * @return ApiResponse Response from the API call
     */
    public function stopDiagnosticsObservation(string $transactionId, string $accountName): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/devices/attributes/actions/observe')
            ->server(Server::DEVICE_DIAGNOSTICS)
            ->auth('global')
            ->parameters(
                QueryParam::init('transactionId', $transactionId),
                QueryParam::init('accountName', $accountName)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('0', ErrorType::init('Error response.', DeviceDiagnosticsResultException::class))
            ->type(DiagnosticsObservationResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
