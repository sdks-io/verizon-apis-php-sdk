<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\EdgeDiscoveryResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\CreateServiceProfileResult;
use VerizonLib\Models\DeleteServiceProfileResult;
use VerizonLib\Models\ListServiceProfilesResult;
use VerizonLib\Models\ResourcesServiceProfile;
use VerizonLib\Models\ResourcesServiceProfileWithId;
use VerizonLib\Models\UpdateServiceProfileResult;

class ServiceProfilesController extends BaseController
{
    /**
     * Creates a service profile that describes the resource requirements of a service.
     *
     * @param ResourcesServiceProfile $body The request body passes all of the needed parameters to
     *        create a service profile. Parameters will be edited here rather than the
     *        **Parameters** section above. The `maxLatencyMs` and `clientType` parameters are
     *        both required in the request body. **Note:** The `maxLatencyMs` value must be
     *        submitted in multiples of 5. Additionally, "GPU" is future functionality and the
     *        values are not captured.
     *
     * @return ApiResponse Response from the API call
     */
    public function createServiceProfile(ResourcesServiceProfile $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/serviceprofiles')
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('HTTP 400 Bad Request.', EdgeDiscoveryResultException::class))
            ->throwErrorOn('401', ErrorType::init('HTTP 401 Unauthorized.', EdgeDiscoveryResultException::class))
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeDiscoveryResultException::class)
            )
            ->type(CreateServiceProfileResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * List all service profiles registered under your API key.
     *
     * @return ApiResponse Response from the API call
     */
    public function listServiceProfiles(): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/serviceprofiles')->auth('oAuth2');

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('HTTP 400 Bad Request.', EdgeDiscoveryResultException::class))
            ->throwErrorOn('401', ErrorType::init('HTTP 401 Unauthorized.', EdgeDiscoveryResultException::class))
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeDiscoveryResultException::class)
            )
            ->type(ListServiceProfilesResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns a specified service profile.
     *
     * @param string $serviceProfileId
     *
     * @return ApiResponse Response from the API call
     */
    public function getServiceProfile(string $serviceProfileId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/serviceprofiles/{serviceProfileId}')
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('serviceProfileId', $serviceProfileId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('HTTP 400 Bad Request.', EdgeDiscoveryResultException::class))
            ->throwErrorOn('401', ErrorType::init('HTTP 401 Unauthorized.', EdgeDiscoveryResultException::class))
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeDiscoveryResultException::class)
            )
            ->type(ResourcesServiceProfileWithId::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update the definition of a Service Profile.
     *
     * @param string $serviceProfileId
     * @param ResourcesServiceProfile $body The request body passes the rest of the needed
     *        parameters to create a service profile. The `maxLatencyMs` and `clientType`
     *        parameters are both required in the request body. **Note:** The `maxLatencyMs` value
     *        must be submitted in multiples of 5. Additionally, "GPU" is future functionality and
     *        the values are not captured. Default values to use are shown.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateServiceProfile(string $serviceProfileId, ResourcesServiceProfile $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/serviceprofiles/{serviceProfileId}')
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('serviceProfileId', $serviceProfileId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('HTTP 400 Bad Request.', EdgeDiscoveryResultException::class))
            ->throwErrorOn('401', ErrorType::init('HTTP 401 Unauthorized.', EdgeDiscoveryResultException::class))
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeDiscoveryResultException::class)
            )
            ->type(UpdateServiceProfileResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete Service Profile based on unique service profile ID.
     *
     * @param string $serviceProfileId
     *
     * @return ApiResponse Response from the API call
     */
    public function deleteServiceProfile(string $serviceProfileId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/serviceprofiles/{serviceProfileId}')
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('serviceProfileId', $serviceProfileId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('HTTP 400 Bad Request.', EdgeDiscoveryResultException::class))
            ->throwErrorOn('401', ErrorType::init('HTTP 401 Unauthorized.', EdgeDiscoveryResultException::class))
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeDiscoveryResultException::class)
            )
            ->type(DeleteServiceProfileResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
