<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\EdgeDiscoveryResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\DeregisterServiceEndpointResult;
use VerizonLib\Models\ListAllServiceEndpointsResult;
use VerizonLib\Models\ListOptimalServiceEndpointsResult;
use VerizonLib\Models\RegisterServiceEndpointResult;
use VerizonLib\Models\ResourcesEdgeHostedServiceWithProfileId;
use VerizonLib\Models\UpdateServiceEndpointResult;
use VerizonLib\Models\UserEquipmentIdentityTypeEnum;

class ServiceEndpointsController extends BaseController
{
    /**
     * Returns a list of optimal Service Endpoints that client devices can connect to. **Note:** If a query
     * is sent with all of the parameters, it will fail with a "400" error. You can search based on the
     * following parameter combinations - Region plus Service Endpoints IDs and Subscriber density (density
     * is optional but recommended), Region plus Service Endpoints IDs and UEIdentity(Including UEIdentity
     * Type) and Service Endpoints IDs plus UEIdentity(Including UEIdentity Type).
     *
     * @param string|null $region MEC region name. Current valid values are US_WEST_2 and US_EAST_1.
     * @param int|null $subscriberDensity Minimum number of 4G/5G subscribers per square kilometer.
     * @param string|null $uEIdentityType Type of User Equipment identifier used in `UEIdentity`.
     * @param string|null $uEIdentity The identifier value for User Equipment. The type of
     *        identifier is defined by the 'UEIdentityType' parameter. The`IPAddress`format can be
     *        IPv4 or IPv6.
     * @param string|null $serviceEndpointsIds A system-defined string identifier representing one
     *        or more registered Service Endpoints.
     *
     * @return ApiResponse Response from the API call
     */
    public function listOptimalServiceEndpoints(
        ?string $region = null,
        ?int $subscriberDensity = null,
        ?string $uEIdentityType = null,
        ?string $uEIdentity = null,
        ?string $serviceEndpointsIds = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/serviceendpoints')
            ->auth('oAuth2')
            ->parameters(
                QueryParam::init('region', $region),
                QueryParam::init('subscriberDensity', $subscriberDensity),
                QueryParam::init('UEIdentityType', $uEIdentityType)
                    ->serializeBy([UserEquipmentIdentityTypeEnum::class, 'checkValue']),
                QueryParam::init('UEIdentity', $uEIdentity),
                QueryParam::init('serviceEndpointsIds', $serviceEndpointsIds)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('HTTP 400 Bad Request.', EdgeDiscoveryResultException::class))
            ->throwErrorOn('401', ErrorType::init('HTTP 401 Unauthorized.', EdgeDiscoveryResultException::class))
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeDiscoveryResultException::class)
            )
            ->type(ListOptimalServiceEndpointsResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Register Service Endpoints of a deployed application to specified MEC Platforms.
     *
     * @param ResourcesEdgeHostedServiceWithProfileId[] $body An array of Service Endpoint data for
     *        a deployed application. The request body passes all of the needed parameters to
     *        create a service endpoint. Parameters will be edited here rather than the
     *        **Parameters** section above. The `ern`,`applicationServerProviderId`,
     *        `applicationId` and `serviceProfileID` parameters are required. **Note:** Currently,
     *        the only valid value for `applicationServerProviderId`is **AWS**. Also, if you do
     *        not know one of the optional values (i.e. URI), you can erase the line from the
     *        query by back-spacing over it.
     *
     * @return ApiResponse Response from the API call
     */
    public function registerServiceEndpoints(array $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/serviceendpoints')
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('HTTP 400 Bad Request.', EdgeDiscoveryResultException::class))
            ->throwErrorOn('401', ErrorType::init('HTTP 401 Unauthorized.', EdgeDiscoveryResultException::class))
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeDiscoveryResultException::class)
            )
            ->type(RegisterServiceEndpointResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns a list of all registered service endpoints.
     *
     * @return ApiResponse Response from the API call
     */
    public function listAllServiceEndpoints(): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/serviceendpointsall')->auth('oAuth2');

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('HTTP 400 Bad Request.', EdgeDiscoveryResultException::class))
            ->throwErrorOn('401', ErrorType::init('HTTP 401 Unauthorized.', EdgeDiscoveryResultException::class))
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeDiscoveryResultException::class)
            )
            ->type(ListAllServiceEndpointsResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Returns endpoint information for all Service Endpoints registered to a specified serviceEndpointId.
     *
     * @param string $serviceEndpointsId A system-defined string identifier representing one or more
     *        registered Service Endpoints.
     *
     * @return ApiResponse Response from the API call
     */
    public function getServiceEndpoint(string $serviceEndpointsId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/serviceendpoints/{serviceEndpointsId}')
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('serviceEndpointsId', $serviceEndpointsId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('HTTP 400 Bad Request.', EdgeDiscoveryResultException::class))
            ->throwErrorOn('401', ErrorType::init('HTTP 401 Unauthorized.', EdgeDiscoveryResultException::class))
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeDiscoveryResultException::class)
            )
            ->type(ResourcesEdgeHostedServiceWithProfileId::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update registered Service Endpoint information.
     *
     * @param string $serviceEndpointsId A system-defined string identifier representing one or more
     *        registered Service Endpoints.
     * @param ResourcesEdgeHostedServiceWithProfileId[] $body Data needed for Service Endpoint
     *        information. The request body passes the rest of the needed parameters to create a
     *        service endpoint. Parameters other than `serviceEndpointsId` will be edited here
     *        rather than the **Parameters** section above. The `ern`,
     *        `applicationServerProviderId` and `applicationId` parameters are required. **Note:**
     *        Currently, the only valid value for `applicationServerProviderId`is **AWS**.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateServiceEndpoint(string $serviceEndpointsId, array $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/serviceendpoints/{serviceEndpointsId}')
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('serviceEndpointsId', $serviceEndpointsId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('HTTP 400 Bad Request.', EdgeDiscoveryResultException::class))
            ->throwErrorOn('401', ErrorType::init('HTTP 401 Unauthorized.', EdgeDiscoveryResultException::class))
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeDiscoveryResultException::class)
            )
            ->type(UpdateServiceEndpointResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Deregister an application's Service Endpoint from the MEC Platform(s).
     *
     * @param string $serviceEndpointsId A system-defined string identifier representing one or more
     *        registered Service Endpoints.
     *
     * @return ApiResponse Response from the API call
     */
    public function deregisterServiceEndpoint(string $serviceEndpointsId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/serviceendpoints/{serviceEndpointsId}')
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('serviceEndpointsId', $serviceEndpointsId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('HTTP 400 Bad Request.', EdgeDiscoveryResultException::class))
            ->throwErrorOn('401', ErrorType::init('HTTP 401 Unauthorized.', EdgeDiscoveryResultException::class))
            ->throwErrorOn(
                '0',
                ErrorType::init('HTTP 500 Internal Server Error.', EdgeDiscoveryResultException::class)
            )
            ->type(DeregisterServiceEndpointResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
