<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\EdgeServiceLaunchResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\ClustersNamespaces;
use VerizonLib\Models\ClusterStateEnum;
use VerizonLib\Models\MECSiteLocationsResult;
use VerizonLib\Server;

class MECSitesController extends BaseController
{
    /**
     * Retrieve all clusters for the customer.
     *
     * @param string $userId
     * @param string $role
     * @param string $customerId
     * @param string $requestId
     * @param string|null $eRN
     * @param string|null $name
     * @param string|null $offset
     * @param string|null $limit
     * @param string|null $correlationId
     * @param string|null $clusterState
     *
     * @return ApiResponse Response from the API call
     */
    public function listERNClusterNamespaces(
        string $userId,
        string $role,
        string $customerId,
        string $requestId,
        ?string $eRN = null,
        ?string $name = null,
        ?string $offset = null,
        ?string $limit = null,
        ?string $correlationId = null,
        ?string $clusterState = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/platform/clusters')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(
                HeaderParam::init('userId', $userId),
                HeaderParam::init('role', $role),
                HeaderParam::init('customerId', $customerId),
                HeaderParam::init('requestId', $requestId),
                QueryParam::init('ERN', $eRN),
                QueryParam::init('name', $name),
                QueryParam::init('offset', $offset),
                QueryParam::init('limit', $limit),
                HeaderParam::init('correlationId', $correlationId),
                QueryParam::init('cluster_state', $clusterState)->serializeBy([ClusterStateEnum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn('404', ErrorType::init('Not found.', EdgeServiceLaunchResultException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error.', EdgeServiceLaunchResultException::class)
            )
            ->throwErrorOn('0', ErrorType::init('Unexpected error.', EdgeServiceLaunchResultException::class))
            ->type(ClustersNamespaces::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Supports fetching MEC locations so the user can view the city.
     *
     * @param string|null $accountName User account name.
     *
     * @return ApiResponse Response from the API call
     */
    public function listMECSiteLocations(?string $accountName = null): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/mecsite/locations')
            ->server(Server::SERVICES)
            ->auth('global')
            ->parameters(HeaderParam::init('AccountName', $accountName));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Error Response.', EdgeServiceLaunchResultException::class))
            ->type(MECSiteLocationsResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
