<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\FotaV3ResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\DeviceFirmwareList;
use VerizonLib\Models\DeviceFirmwareVersionUpdateResult;
use VerizonLib\Models\FirmwareIMEI;
use VerizonLib\Models\FirmwarePackage;
use VerizonLib\Models\FirmwareProtocolEnum;
use VerizonLib\Server;

class FirmwareV3Controller extends BaseController
{
    /**
     * This endpoint allows user to list the firmware of an account.
     *
     * @param string $acc Account identifier.
     * @param string $protocol Filter to retrieve a specific protocol type used.
     *
     * @return ApiResponse Response from the API call
     */
    public function listAvailableFirmware(string $acc, string $protocol): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/firmware/{acc}')
            ->server(Server::SOFTWARE_MANAGEMENT_V3)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('acc', $acc),
                QueryParam::init('protocol', $protocol)->serializeBy([FirmwareProtocolEnum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV3ResultException::class))
            ->type(FirmwarePackage::class, 1)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Synchronize ThingSpace with the FOTA server for up to 100 devices.
     *
     * @param string $acc Account identifier.
     * @param FirmwareIMEI $body DeviceIds to get firmware info synchronously.
     *
     * @return ApiResponse Response from the API call
     */
    public function synchronizeDeviceFirmware(string $acc, FirmwareIMEI $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/firmware/{acc}/devices')
            ->server(Server::SOFTWARE_MANAGEMENT_V3)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('acc', $acc),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV3ResultException::class))
            ->type(DeviceFirmwareList::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Ask a device to report its firmware version asynchronously.
     *
     * @param string $acc Account identifier.
     * @param string $deviceId Device identifier.
     *
     * @return ApiResponse Response from the API call
     */
    public function reportDeviceFirmware(string $acc, string $deviceId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/firmware/{acc}/async/{deviceId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V3)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('acc', $acc), TemplateParam::init('deviceId', $deviceId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV3ResultException::class))
            ->type(DeviceFirmwareVersionUpdateResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
