<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\RestErrorResponseException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\ActivateDeviceProfileRequest;
use VerizonLib\Models\DeactivateDeviceProfileRequest;
use VerizonLib\Models\ProfileRequest;
use VerizonLib\Models\RequestResponse;
use VerizonLib\Models\SetFallbackAttributeRequest;
use VerizonLib\Server;

class DeviceProfileManagementController extends BaseController
{
    /**
     * Uses the profile to bring the device under management.
     *
     * @param ActivateDeviceProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function activateDeviceThroughProfile(ActivateDeviceProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/m2m/v1/devices/profile/actions/activate_enable'
        )
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', RestErrorResponseException::class))
            ->type(RequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Uses the profile to activate the device.
     *
     * @param ProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function profileToActivateDevice(ProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/activate')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', RestErrorResponseException::class))
            ->type(RequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Uses the profile to deactivate the device.
     *
     * @param DeactivateDeviceProfileRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function profileToDeactivateDevice(DeactivateDeviceProfileRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/m2m/v1/devices/profile/actions/deactivate')
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', RestErrorResponseException::class))
            ->type(RequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Allows the profile to set the fallback attribute to the device.
     *
     * @param SetFallbackAttributeRequest $body Device Profile Query
     *
     * @return ApiResponse Response from the API call
     */
    public function profileToSetFallbackAttribute(SetFallbackAttributeRequest $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/m2m/v1/devices/profile/actions/setfallbackattribute'
        )
            ->server(Server::THINGSPACE)
            ->auth('oAuth2')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', RestErrorResponseException::class))
            ->type(RequestResponse::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
