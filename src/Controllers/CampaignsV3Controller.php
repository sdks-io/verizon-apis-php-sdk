<?php

declare(strict_types=1);

/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use VerizonLib\Exceptions\FotaV3ResultException;
use VerizonLib\Http\ApiResponse;
use VerizonLib\Models\Campaign;
use VerizonLib\Models\CampaignFirmwareUpgrade;
use VerizonLib\Models\FirmwareCampaign;
use VerizonLib\Models\FotaV3SuccessResult;
use VerizonLib\Models\V3AddOrRemoveDeviceRequest;
use VerizonLib\Models\V3AddOrRemoveDeviceResult;
use VerizonLib\Models\V3ChangeCampaignDatesRequest;
use VerizonLib\Server;

class CampaignsV3Controller extends BaseController
{
    /**
     * This endpoint allows a user to schedule a firmware upgrade for a list of devices.
     *
     * @param string $acc Account identifier.
     * @param CampaignFirmwareUpgrade $body Firmware upgrade information.
     *
     * @return ApiResponse Response from the API call
     */
    public function scheduleCampaignFirmwareUpgrade(string $acc, CampaignFirmwareUpgrade $body): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/campaigns/firmware/{acc}')
            ->server(Server::SOFTWARE_MANAGEMENT_V3)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('acc', $acc),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV3ResultException::class))
            ->type(FirmwareCampaign::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows user to Add or Remove devices to an existing campaign.
     *
     * @param string $acc Account identifier.
     * @param string $campaignId Unique identifier of a campaign.
     * @param V3AddOrRemoveDeviceRequest $body Add or remove device to existing upgrade information.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateCampaignFirmwareDevices(
        string $acc,
        string $campaignId,
        V3AddOrRemoveDeviceRequest $body
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/campaigns/firmware/{acc}/{campaignId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V3)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('acc', $acc),
                TemplateParam::init('campaignId', $campaignId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV3ResultException::class))
            ->type(V3AddOrRemoveDeviceResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows user to change campaign dates and time windows. Fields which need to remain
     * unchanged should be also provided.
     *
     * @param string $acc Account identifier.
     * @param string $campaignId Firmware upgrade information.
     * @param V3ChangeCampaignDatesRequest $body New dates and time windows.
     *
     * @return ApiResponse Response from the API call
     */
    public function updateCampaignDates(
        string $acc,
        string $campaignId,
        V3ChangeCampaignDatesRequest $body
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/campaigns/firmware/{acc}/{campaignId}/dates')
            ->server(Server::SOFTWARE_MANAGEMENT_V3)
            ->auth('oAuth2')
            ->parameters(
                TemplateParam::init('acc', $acc),
                TemplateParam::init('campaignId', $campaignId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV3ResultException::class))
            ->type(FirmwareCampaign::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows the user to retrieve campaign level information for a specified campaign.
     *
     * @param string $acc Account identifier.
     * @param string $campaignId Firmware upgrade identifier.
     *
     * @return ApiResponse Response from the API call
     */
    public function getCampaignInformation(string $acc, string $campaignId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/campaigns/{acc}/{campaignId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V3)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('acc', $acc), TemplateParam::init('campaignId', $campaignId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV3ResultException::class))
            ->type(Campaign::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows user to cancel a firmware campaign. A firmware campaign already started can not
     * be cancelled.
     *
     * @param string $acc Account identifier.
     * @param string $campaignId Firmware upgrade information.
     *
     * @return ApiResponse Response from the API call
     */
    public function cancelCampaign(string $acc, string $campaignId): ApiResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/campaigns/{acc}/{campaignId}')
            ->server(Server::SOFTWARE_MANAGEMENT_V3)
            ->auth('oAuth2')
            ->parameters(TemplateParam::init('acc', $acc), TemplateParam::init('campaignId', $campaignId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Unexpected error.', FotaV3ResultException::class))
            ->type(FotaV3SuccessResult::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
