<?php

declare(strict_types=1);

/*
 * VerizonThingSpaceQualityOfServiceAPIEndpointsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Tests;

use Core\Types\CallbackCatcher;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Authentication\ThingspaceOauthCredentialsBuilder;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\Authentication\VzM2mSessionTokenCredentialsBuilder;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\VerizonThingSpaceQualityOfServiceAPIEndpointsClient;
use VerizonThingSpaceQualityOfServiceAPIEndpointsLib\VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder;

class ClientFactory
{
    public static function create(CallbackCatcher $httpCallback): VerizonThingSpaceQualityOfServiceAPIEndpointsClient
    {
        $clientBuilder = VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder::init();
        $clientBuilder = self::addConfigurationFromEnvironment($clientBuilder);
        $clientBuilder = self::addTestConfiguration($clientBuilder);
        return $clientBuilder->httpCallback($httpCallback)->build();
    }

    public static function addTestConfiguration(
        VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder $builder
    ): VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder {
        return $builder;
    }

    public static function addConfigurationFromEnvironment(
        VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder $builder
    ): VerizonThingSpaceQualityOfServiceAPIEndpointsClientBuilder {
        $timeout = getenv('VERIZON_THING_SPACE_QUALITY_OF_SERVICE_API_ENDPOINTS_LIB_TIMEOUT');
        $numberOfRetries = getenv('VERIZON_THING_SPACE_QUALITY_OF_SERVICE_API_ENDPOINTS_LIB_NUMBER_OF_RETRIES');
        $maximumRetryWaitTime = getenv(
            'VERIZON_THING_SPACE_QUALITY_OF_SERVICE_API_ENDPOINTS_LIB_MAXIMUM_RETRY_WAIT_TIME'
        );
        $vZM2MToken2 = getenv('VERIZON_THING_SPACE_QUALITY_OF_SERVICE_API_ENDPOINTS_LIB_V_ZM_2_M_TOKEN_2');
        $environment = getenv('VERIZON_THING_SPACE_QUALITY_OF_SERVICE_API_ENDPOINTS_LIB_ENVIRONMENT');
        $oAuthClientId = getenv('VERIZON_THING_SPACE_QUALITY_OF_SERVICE_API_ENDPOINTS_LIB_O_AUTH_CLIENT_ID');
        $oAuthClientSecret = getenv(
            'VERIZON_THING_SPACE_QUALITY_OF_SERVICE_API_ENDPOINTS_LIB_O_AUTH_CLIENT_SECRET'
        );
        $vZM2MToken = getenv('VERIZON_THING_SPACE_QUALITY_OF_SERVICE_API_ENDPOINTS_LIB_V_ZM_2_M_TOKEN');

        if (!empty($timeout) && \is_numeric($timeout)) {
            $builder->timeout(intval($timeout));
        }

        if (!empty($numberOfRetries) && \is_numeric($numberOfRetries)) {
            $builder->numberOfRetries(intval($numberOfRetries));
        }

        if (!empty($maximumRetryWaitTime) && \is_numeric($maximumRetryWaitTime)) {
            $builder->maximumRetryWaitTime(intval($maximumRetryWaitTime));
        }

        if (!empty($vZM2MToken2)) {
            $builder->vZM2MToken2($vZM2MToken2);
        }

        if (!empty($environment)) {
            $builder->environment($environment);
        }

        if (!empty($oAuthClientId) && !empty($oAuthClientSecret)) {
            $builder->thingspaceOauthCredentials(
                ThingspaceOauthCredentialsBuilder::init($oAuthClientId, $oAuthClientSecret)
            );
        }

        if (!empty($vZM2MToken)) {
            $builder->vzM2mSessionTokenCredentials(VzM2mSessionTokenCredentialsBuilder::init($vZM2MToken));
        }

        return $builder;
    }
}
